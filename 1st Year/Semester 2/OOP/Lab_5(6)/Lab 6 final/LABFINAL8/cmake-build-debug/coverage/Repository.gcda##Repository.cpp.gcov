        -:    0:Source:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/Lab 6 final/LABFINAL8/Repository.cpp
        -:    0:Graph:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/Lab 6 final/LABFINAL8/cmake-build-debug/CMakeFiles/LABFINAL8.dir/Repository.gcno
        -:    0:Data:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/Lab 6 final/LABFINAL8/cmake-build-debug/CMakeFiles/LABFINAL8.dir/Repository.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "Repository.h"
        -:    2:#include <iostream>
        -:    3:#include <fstream>
        -:    4:
        -:    5:
        -:    6:
        -:    7://Load movies from given file
       36:    8:void Repository::loadMoviesFromFile()
       36:    8-block  0
        -:    9:{
       36:   10:    if (movieFileName == "")
       36:   10-block  0
       30:   11:        return;
       30:   11-block  0
        6:   12:    Movie movieLoadedFromFile;
        6:   12-block  0
        6:   12-block  1
        6:   12-block  2
    $$$$$:   12-block  3
    $$$$$:   12-block  4
    $$$$$:   12-block  5
    $$$$$:   12-block  6
    $$$$$:   12-block  7
    $$$$$:   12-block  8
        6:   13:    std::ifstream fin(movieFileName);
        6:   13-block  0
       11:   14:    while (fin >> movieLoadedFromFile) {
        6:   14-block  0
       11:   14-block  1
       11:   14-block  2
       11:   14-block  3
        5:   14-block  4
        5:   15:        if(std::find(movieList.begin(), movieList.end(), movieLoadedFromFile) == movieList.end())
        5:   15-block  0
        5:   15-block  1
        3:   16:            movieList.push_back(movieLoadedFromFile);
        3:   16-block  0
        3:   16-block  1
        -:   17:    }
        6:   18:    fin.close();
        6:   18-block  0
       36:   19:}
    $$$$$:   19-block  0
    $$$$$:   19-block  1
        6:   19-block  2
       36:   19-block  3
    $$$$$:   19-block  4
        -:   20:
        -:   21:
        -:   22://Write movies to given file
       38:   23:void Repository::writeMoviesToFile()
       38:   23-block  0
        -:   24:{
       38:   25:    if (movieFileName == "")
       38:   25-block  0
       32:   26:        return;
       32:   26-block  0
        6:   27:    std::ofstream fout(movieFileName);
       10:   28:    for (const Movie& movieToWrite : movieList) {
        6:   28-block  0
       10:   28-block  1
        4:   28-block  2
        4:   28-block  3
        4:   29:        fout << movieToWrite << '\n';
        4:   29-block  0
        4:   29-block  1
        -:   30:    }
        6:   31:    fout.close();
        6:   31-block  0
       38:   32:}
    $$$$$:   32-block  0
        6:   32-block  1
       38:   32-block  2
    $$$$$:   32-block  3
        -:   33:
        -:   34://Repository constructor
       68:   35:Repository::Repository(const std::string& nameOfTheFileUsed)
       34:   35-block  0
       34:   35-block  1
       34:   36:{
       34:   37:    std::vector<Movie>{};
       34:   38:    movieFileName = nameOfTheFileUsed;
       34:   38-block  0
       34:   39:    loadMoviesFromFile();
       34:   39-block  0
        -:   40:
       68:   41:}
       34:   41-block  0
    $$$$$:   41-block  1
    $$$$$:   41-block  2
       34:   41-block  3
        -:   42:
        -:   43://Repository destructor
       10:   44:Repository::~Repository()
        5:   44-block  0
        5:   44-block  1
        5:   45:{
        5:   46:    writeMoviesToFile();
        5:   46-block  0
       10:   47:}
        5:   47-block  0
    $$$$$:   47-block  1
    $$$$$:   47-block  2
        5:   47-block  3
        -:   48:
        -:   49:
        -:   50://Add given movie to list
       30:   51:int Repository::addMovie(const Movie& movieToAdd)
       30:   51-block  0
        -:   52:{
       30:   53:    auto iteratorWhereMovieIsFound = std::find(movieList.begin(), movieList.end(),  movieToAdd);
       30:   54:    if (iteratorWhereMovieIsFound !=  movieList.end() && movieList.size() != 0)
       30:   54-block  0
        3:   54-block  1
       30:   54-block  2
        3:   55:        return -1;
        3:   55-block  0
       27:   56:    movieList.push_back(movieToAdd);
       27:   57:    writeMoviesToFile();
       27:   58:    return 1;
       27:   58-block  0
       30:   59:}
       30:   59-block  0
        -:   60:
        -:   61:
        -:   62:
        -:   63://Delete a movie from the movieList
        4:   64:int Repository::deleteMovie(const Movie& movieToDelete)
        4:   64-block  0
        -:   65:{
        4:   66:    auto iteratorWhereMovieIsFound = std::find(movieList.begin(), movieList.end(),  movieToDelete);
        4:   67:    if (iteratorWhereMovieIsFound == movieList.end())
        4:   67-block  0
        2:   68:        return -1;
        2:   68-block  0
        2:   69:    movieList.erase(iteratorWhereMovieIsFound);
        2:   70:    writeMoviesToFile();
        2:   71:    return 1;
        2:   71-block  0
        4:   72:}
        4:   72-block  0
        -:   73:
        -:   74:
        -:   75://Update a movie from the movieList
        4:   76:int Repository::updateMovie(const Movie& movieToUpdateWith)
        4:   76-block  0
        -:   77:{
        4:   78:    auto iteratorWhereMovieIsFound = std::find(movieList.begin(), movieList.end(),  movieToUpdateWith);
        4:   79:	if (iteratorWhereMovieIsFound == movieList.end())
        4:   79-block  0
        2:   80:		return -1;
        2:   80-block  0
        2:   81:	*iteratorWhereMovieIsFound = movieToUpdateWith;
        2:   82:    writeMoviesToFile();
        2:   83:	return 1;
        2:   83-block  0
        4:   84:}
        4:   84-block  0
        -:   85:
        -:   86://Change the file name of the repository
        1:   87:void Repository::changeFileName(const std::string& nameOfTheFileUsed)
        1:   87-block  0
        -:   88:{
        -:   89:
        1:   90:    movieFileName = nameOfTheFileUsed;
        1:   91:    writeMoviesToFile();
        1:   92:}
        1:   92-block  0
        -:   93:
        -:   94:
        -:   95://Get the movie at a certain position
        2:   96:Movie Repository::getMovieAtPosition(int positionOfMovie)
        2:   96-block  0
        -:   97:{
        2:   98:	if (positionOfMovie < 0 || positionOfMovie >= movieList.size())
        2:   98-block  0
        1:   98-block  1
        1:   99:		throw std::runtime_error("Invalid position");
        1:   99-block  0
        1:   99-block  1
    $$$$$:   99-block  2
    $$$$$:   99-block  3
        1:  100:	return movieList[positionOfMovie];}
        1:  100-block  0
        -:  101:
        -:  102://Get the number of movies in the list
        3:  103:int Repository::getNumberOfMovies()
        3:  103-block  0
        -:  104:{
        3:  105:	return movieList.size();
        3:  105-block  0
        -:  106:}
        -:  107:
        -:  108://Get all the movies with a given genre
        7:  109:std::vector<Movie> Repository::getMoviesByGenre(const std::string& genreGiven)
        7:  109-block  0
        -:  110:{
        7:  111:    std::vector<Movie> moviesWithGenre;
        7:  112:    if (genreGiven == "")
        7:  112-block  0
        1:  113:        return movieList;
        1:  113-block  0
        1:  113-block  1
       16:  114:    std::copy_if(movieList.begin(), movieList.end(), std::back_inserter(moviesWithGenre), [&genreGiven](const Movie& movie) {return movie.getGenre() == genreGiven; });
        6:  114-block  0
        6:  114-block  1
       10:  114-block  2
       10:  114-block  3
        6:  115:    return moviesWithGenre;
        6:  115-block  0
        7:  116:}
    $$$$$:  116-block  0
        7:  116-block  1
    $$$$$:  116-block  2
        -:  117:
        -:  118://Get all the movies
       14:  119:std::vector<Movie> Repository::getAllMovies()
       14:  119-block  0
        -:  120:{
       14:  121:	return movieList;
       14:  121-block  0
        -:  122:}
        -:  123:
        -:  124:
        -:  125://Get all the movies in the watch list
        1:  126:std::vector<Movie> Repository::getAllWatchListMovies()
        1:  126-block  0
        -:  127:{
        1:  128:	return userWatchList;
        1:  128-block  0
        -:  129:}
        -:  130:
        -:  131:
        -:  132://Add a certain movie to the watch list
        4:  133:int Repository::addMovieToWatchlist(const Movie& movieToAdd)
        4:  133-block  0
        -:  134:{
        4:  135:    auto iteratorWhereMovieIsFound = std::find(userWatchList.begin(), userWatchList.end(), movieToAdd);
        4:  136:    if (iteratorWhereMovieIsFound != userWatchList.end())
        4:  136-block  0
        1:  137:        return -1;
        1:  137-block  0
        3:  138:    userWatchList.push_back(movieToAdd);
        3:  139:    return 1;
        3:  139-block  0
        4:  140:}
        4:  140-block  0
        -:  141:
        -:  142:
        -:  143://Add a certain movie to the watch list by the title
        3:  144:int Repository::addMovieToWatchListByTitle(const std::string& titleOfTheMovieToAdd)
        3:  144-block  0
        -:  145:{
        6:  146:    auto iteratorWhereMovieFound = std::find_if(movieList.begin(), movieList.end(), [&titleOfTheMovieToAdd](const Movie& movie) {return movie.getTitle() == titleOfTheMovieToAdd; });
        3:  146-block  0
        3:  146-block  1
        3:  147:    if (iteratorWhereMovieFound == movieList.end())
        3:  147-block  0
        1:  148:        return -1;
        1:  148-block  0
        2:  149:    userWatchList.push_back(*iteratorWhereMovieFound);
        2:  150:    return 1;
        2:  150-block  0
        3:  151:}
        3:  151-block  0
        -:  152:
        -:  153://Get the number of movies in the watch list
        1:  154:int Repository::getNumberOfMoviesWatchList()
        1:  154-block  0
        -:  155:{
        1:  156:	return userWatchList.size();
        1:  156-block  0
        -:  157:}
