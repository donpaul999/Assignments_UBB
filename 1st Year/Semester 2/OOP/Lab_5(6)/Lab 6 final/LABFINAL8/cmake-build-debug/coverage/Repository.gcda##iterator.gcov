        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/iterator
        -:    0:Graph:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/Lab 6 final/LABFINAL8/cmake-build-debug/CMakeFiles/LABFINAL8.dir/Repository.gcno
        -:    0:Data:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/Lab 6 final/LABFINAL8/cmake-build-debug/CMakeFiles/LABFINAL8.dir/Repository.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- iterator ----------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_ITERATOR
        -:   11:#define _LIBCPP_ITERATOR
        -:   12:
        -:   13:/*
        -:   14:    iterator synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:template<class Iterator>
        -:   20:struct iterator_traits
        -:   21:{
        -:   22:    typedef typename Iterator::difference_type difference_type;
        -:   23:    typedef typename Iterator::value_type value_type;
        -:   24:    typedef typename Iterator::pointer pointer;
        -:   25:    typedef typename Iterator::reference reference;
        -:   26:    typedef typename Iterator::iterator_category iterator_category;
        -:   27:};
        -:   28:
        -:   29:template<class T>
        -:   30:struct iterator_traits<T*>
        -:   31:{
        -:   32:    typedef ptrdiff_t difference_type;
        -:   33:    typedef T value_type;
        -:   34:    typedef T* pointer;
        -:   35:    typedef T& reference;
        -:   36:    typedef random_access_iterator_tag iterator_category;
        -:   37:};
        -:   38:
        -:   39:template<class Category, class T, class Distance = ptrdiff_t,
        -:   40:         class Pointer = T*, class Reference = T&>
        -:   41:struct iterator
        -:   42:{
        -:   43:    typedef T         value_type;
        -:   44:    typedef Distance  difference_type;
        -:   45:    typedef Pointer   pointer;
        -:   46:    typedef Reference reference;
        -:   47:    typedef Category  iterator_category;
        -:   48:};
        -:   49:
        -:   50:struct input_iterator_tag  {};
        -:   51:struct output_iterator_tag {};
        -:   52:struct forward_iterator_tag       : public input_iterator_tag         {};
        -:   53:struct bidirectional_iterator_tag : public forward_iterator_tag       {};
        -:   54:struct random_access_iterator_tag : public bidirectional_iterator_tag {};
        -:   55:
        -:   56:// 27.4.3, iterator operations
        -:   57:// extension: second argument not conforming to C++03
        -:   58:template <class InputIterator>  // constexpr in C++17
        -:   59:  constexpr void advance(InputIterator& i,
        -:   60:             typename iterator_traits<InputIterator>::difference_type n);
        -:   61:
        -:   62:template <class InputIterator>  // constexpr in C++17
        -:   63:  constexpr typename iterator_traits<InputIterator>::difference_type
        -:   64:    distance(InputIterator first, InputIterator last);
        -:   65:
        -:   66:template <class InputIterator>  // constexpr in C++17
        -:   67:  constexpr InputIterator next(InputIterator x,
        -:   68:typename iterator_traits<InputIterator>::difference_type n = 1);
        -:   69:
        -:   70:template <class BidirectionalIterator>  // constexpr in C++17
        -:   71:  constexpr BidirectionalIterator prev(BidirectionalIterator x,
        -:   72:    typename iterator_traits<BidirectionalIterator>::difference_type n = 1);
        -:   73:
        -:   74:template <class Iterator>
        -:   75:class reverse_iterator
        -:   76:    : public iterator<typename iterator_traits<Iterator>::iterator_category,
        -:   77:                      typename iterator_traits<Iterator>::value_type,
        -:   78:                      typename iterator_traits<Iterator>::difference_type,
        -:   79:                      typename iterator_traits<Iterator>::pointer,
        -:   80:                      typename iterator_traits<Iterator>::reference>
        -:   81:{
        -:   82:protected:
        -:   83:    Iterator current;
        -:   84:public:
        -:   85:    typedef Iterator                                            iterator_type;
        -:   86:    typedef typename iterator_traits<Iterator>::difference_type difference_type;
        -:   87:    typedef typename iterator_traits<Iterator>::reference       reference;
        -:   88:    typedef typename iterator_traits<Iterator>::pointer         pointer;
        -:   89:
        -:   90:    constexpr reverse_iterator();
        -:   91:    constexpr explicit reverse_iterator(Iterator x);
        -:   92:    template <class U> constexpr reverse_iterator(const reverse_iterator<U>& u);
        -:   93:    template <class U> constexpr reverse_iterator& operator=(const reverse_iterator<U>& u);
        -:   94:    constexpr Iterator base() const;
        -:   95:    constexpr reference operator*() const;
        -:   96:    constexpr pointer   operator->() const;
        -:   97:    constexpr reverse_iterator& operator++();
        -:   98:    constexpr reverse_iterator  operator++(int);
        -:   99:    constexpr reverse_iterator& operator--();
        -:  100:    constexpr reverse_iterator  operator--(int);
        -:  101:    constexpr reverse_iterator  operator+ (difference_type n) const;
        -:  102:    constexpr reverse_iterator& operator+=(difference_type n);
        -:  103:    constexpr reverse_iterator  operator- (difference_type n) const;
        -:  104:    constexpr reverse_iterator& operator-=(difference_type n);
        -:  105:    constexpr reference         operator[](difference_type n) const;
        -:  106:};
        -:  107:
        -:  108:template <class Iterator1, class Iterator2>
        -:  109:constexpr bool                          // constexpr in C++17
        -:  110:operator==(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  111:
        -:  112:template <class Iterator1, class Iterator2>
        -:  113:constexpr bool                          // constexpr in C++17
        -:  114:operator<(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  115:
        -:  116:template <class Iterator1, class Iterator2>
        -:  117:constexpr bool                          // constexpr in C++17
        -:  118:operator!=(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  119:
        -:  120:template <class Iterator1, class Iterator2>
        -:  121:constexpr bool                          // constexpr in C++17
        -:  122:operator>(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  123:
        -:  124:template <class Iterator1, class Iterator2>
        -:  125:constexpr bool                          // constexpr in C++17
        -:  126:operator>=(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  127:
        -:  128:template <class Iterator1, class Iterator2>
        -:  129:constexpr bool                          // constexpr in C++17
        -:  130:operator<=(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  131:
        -:  132:template <class Iterator1, class Iterator2>
        -:  133:constexpr auto
        -:  134:operator-(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y)
        -:  135:-> decltype(__y.base() - __x.base());   // constexpr in C++17
        -:  136:
        -:  137:template <class Iterator>
        -:  138:constexpr reverse_iterator<Iterator>
        -:  139:operator+(typename reverse_iterator<Iterator>::difference_type n,
        -:  140:          const reverse_iterator<Iterator>& x);   // constexpr in C++17
        -:  141:
        -:  142:template <class Iterator>
        -:  143:constexpr reverse_iterator<Iterator> make_reverse_iterator(Iterator i); // C++14, constexpr in C++17
        -:  144:
        -:  145:template <class Container>
        -:  146:class back_insert_iterator
        -:  147:{
        -:  148:protected:
        -:  149:    Container* container;
        -:  150:public:
        -:  151:    typedef Container                   container_type;
        -:  152:    typedef void                        value_type;
        -:  153:    typedef void                        difference_type;
        -:  154:    typedef void                        reference;
        -:  155:    typedef void                        pointer;
        -:  156:
        -:  157:    explicit back_insert_iterator(Container& x);
        -:  158:    back_insert_iterator& operator=(const typename Container::value_type& value);
        -:  159:    back_insert_iterator& operator*();
        -:  160:    back_insert_iterator& operator++();
        -:  161:    back_insert_iterator  operator++(int);
        -:  162:};
        -:  163:
        -:  164:template <class Container> back_insert_iterator<Container> back_inserter(Container& x);
        -:  165:
        -:  166:template <class Container>
        -:  167:class front_insert_iterator
        -:  168:{
        -:  169:protected:
        -:  170:    Container* container;
        -:  171:public:
        -:  172:    typedef Container                    container_type;
        -:  173:    typedef void                         value_type;
        -:  174:    typedef void                         difference_type;
        -:  175:    typedef void                         reference;
        -:  176:    typedef void                         pointer;
        -:  177:
        -:  178:    explicit front_insert_iterator(Container& x);
        -:  179:    front_insert_iterator& operator=(const typename Container::value_type& value);
        -:  180:    front_insert_iterator& operator*();
        -:  181:    front_insert_iterator& operator++();
        -:  182:    front_insert_iterator  operator++(int);
        -:  183:};
        -:  184:
        -:  185:template <class Container> front_insert_iterator<Container> front_inserter(Container& x);
        -:  186:
        -:  187:template <class Container>
        -:  188:class insert_iterator
        -:  189:{
        -:  190:protected:
        -:  191:    Container* container;
        -:  192:    typename Container::iterator iter;
        -:  193:public:
        -:  194:    typedef Container              container_type;
        -:  195:    typedef void                   value_type;
        -:  196:    typedef void                   difference_type;
        -:  197:    typedef void                   reference;
        -:  198:    typedef void                   pointer;
        -:  199:
        -:  200:    insert_iterator(Container& x, typename Container::iterator i);
        -:  201:    insert_iterator& operator=(const typename Container::value_type& value);
        -:  202:    insert_iterator& operator*();
        -:  203:    insert_iterator& operator++();
        -:  204:    insert_iterator& operator++(int);
        -:  205:};
        -:  206:
        -:  207:template <class Container, class Iterator>
        -:  208:insert_iterator<Container> inserter(Container& x, Iterator i);
        -:  209:
        -:  210:template <class Iterator>
        -:  211:class move_iterator {
        -:  212:public:
        -:  213:    typedef Iterator                                              iterator_type;
        -:  214:    typedef typename iterator_traits<Iterator>::difference_type   difference_type;
        -:  215:    typedef Iterator                                              pointer;
        -:  216:    typedef typename iterator_traits<Iterator>::value_type        value_type;
        -:  217:    typedef typename iterator_traits<Iterator>::iterator_category iterator_category;
        -:  218:    typedef value_type&&                                          reference;
        -:  219:
        -:  220:    constexpr move_iterator();  // all the constexprs are in C++17
        -:  221:    constexpr explicit move_iterator(Iterator i);
        -:  222:    template <class U>
        -:  223:      constexpr move_iterator(const move_iterator<U>& u);
        -:  224:    template <class U>
        -:  225:      constexpr move_iterator& operator=(const move_iterator<U>& u);
        -:  226:    constexpr iterator_type base() const;
        -:  227:    constexpr reference operator*() const;
        -:  228:    constexpr pointer operator->() const;
        -:  229:    constexpr move_iterator& operator++();
        -:  230:    constexpr move_iterator operator++(int);
        -:  231:    constexpr move_iterator& operator--();
        -:  232:    constexpr move_iterator operator--(int);
        -:  233:    constexpr move_iterator operator+(difference_type n) const;
        -:  234:    constexpr move_iterator& operator+=(difference_type n);
        -:  235:    constexpr move_iterator operator-(difference_type n) const;
        -:  236:    constexpr move_iterator& operator-=(difference_type n);
        -:  237:    constexpr unspecified operator[](difference_type n) const;
        -:  238:private:
        -:  239:    Iterator current; // exposition only
        -:  240:};
        -:  241:
        -:  242:template <class Iterator1, class Iterator2>
        -:  243:constexpr bool   // constexpr in C++17
        -:  244:operator==(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  245:
        -:  246:template <class Iterator1, class Iterator2>
        -:  247:constexpr bool   // constexpr in C++17
        -:  248:operator!=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  249:
        -:  250:template <class Iterator1, class Iterator2>
        -:  251:constexpr bool   // constexpr in C++17
        -:  252:operator<(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  253:
        -:  254:template <class Iterator1, class Iterator2>
        -:  255:constexpr bool   // constexpr in C++17
        -:  256:operator<=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  257:
        -:  258:template <class Iterator1, class Iterator2>
        -:  259:constexpr bool   // constexpr in C++17
        -:  260:operator>(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  261:
        -:  262:template <class Iterator1, class Iterator2>
        -:  263:constexpr bool   // constexpr in C++17
        -:  264:operator>=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  265:
        -:  266:template <class Iterator1, class Iterator2>
        -:  267:constexpr auto   // constexpr in C++17
        -:  268:operator-(const move_iterator<Iterator1>& x,
        -:  269:          const move_iterator<Iterator2>& y) -> decltype(x.base() - y.base());
        -:  270:
        -:  271:template <class Iterator>
        -:  272:constexpr move_iterator<Iterator> operator+(   // constexpr in C++17
        -:  273:            typename move_iterator<Iterator>::difference_type n,
        -:  274:            const move_iterator<Iterator>& x);
        -:  275:
        -:  276:template <class Iterator>   // constexpr in C++17
        -:  277:constexpr  move_iterator<Iterator> make_move_iterator(const Iterator& i);
        -:  278:
        -:  279:
        -:  280:template <class T, class charT = char, class traits = char_traits<charT>, class Distance = ptrdiff_t>
        -:  281:class istream_iterator
        -:  282:    : public iterator<input_iterator_tag, T, Distance, const T*, const T&>
        -:  283:{
        -:  284:public:
        -:  285:    typedef charT char_type;
        -:  286:    typedef traits traits_type;
        -:  287:    typedef basic_istream<charT,traits> istream_type;
        -:  288:
        -:  289:    constexpr istream_iterator();
        -:  290:    istream_iterator(istream_type& s);
        -:  291:    istream_iterator(const istream_iterator& x);
        -:  292:    ~istream_iterator();
        -:  293:
        -:  294:    const T& operator*() const;
        -:  295:    const T* operator->() const;
        -:  296:    istream_iterator& operator++();
        -:  297:    istream_iterator  operator++(int);
        -:  298:};
        -:  299:
        -:  300:template <class T, class charT, class traits, class Distance>
        -:  301:bool operator==(const istream_iterator<T,charT,traits,Distance>& x,
        -:  302:                const istream_iterator<T,charT,traits,Distance>& y);
        -:  303:template <class T, class charT, class traits, class Distance>
        -:  304:bool operator!=(const istream_iterator<T,charT,traits,Distance>& x,
        -:  305:                const istream_iterator<T,charT,traits,Distance>& y);
        -:  306:
        -:  307:template <class T, class charT = char, class traits = char_traits<charT> >
        -:  308:class ostream_iterator
        -:  309:    : public iterator<output_iterator_tag, void, void, void ,void>
        -:  310:{
        -:  311:public:
        -:  312:    typedef charT char_type;
        -:  313:    typedef traits traits_type;
        -:  314:    typedef basic_ostream<charT,traits> ostream_type;
        -:  315:
        -:  316:    ostream_iterator(ostream_type& s);
        -:  317:    ostream_iterator(ostream_type& s, const charT* delimiter);
        -:  318:    ostream_iterator(const ostream_iterator& x);
        -:  319:    ~ostream_iterator();
        -:  320:    ostream_iterator& operator=(const T& value);
        -:  321:
        -:  322:    ostream_iterator& operator*();
        -:  323:    ostream_iterator& operator++();
        -:  324:    ostream_iterator& operator++(int);
        -:  325:};
        -:  326:
        -:  327:template<class charT, class traits = char_traits<charT> >
        -:  328:class istreambuf_iterator
        -:  329:    : public iterator<input_iterator_tag, charT,
        -:  330:                      typename traits::off_type, unspecified,
        -:  331:                      charT>
        -:  332:{
        -:  333:public:
        -:  334:    typedef charT                         char_type;
        -:  335:    typedef traits                        traits_type;
        -:  336:    typedef typename traits::int_type     int_type;
        -:  337:    typedef basic_streambuf<charT,traits> streambuf_type;
        -:  338:    typedef basic_istream<charT,traits>   istream_type;
        -:  339:
        -:  340:    istreambuf_iterator() noexcept;
        -:  341:    istreambuf_iterator(istream_type& s) noexcept;
        -:  342:    istreambuf_iterator(streambuf_type* s) noexcept;
        -:  343:    istreambuf_iterator(a-private-type) noexcept;
        -:  344:
        -:  345:    charT                operator*() const;
        -:  346:    pointer operator->() const;
        -:  347:    istreambuf_iterator& operator++();
        -:  348:    a-private-type       operator++(int);
        -:  349:
        -:  350:    bool equal(const istreambuf_iterator& b) const;
        -:  351:};
        -:  352:
        -:  353:template <class charT, class traits>
        -:  354:bool operator==(const istreambuf_iterator<charT,traits>& a,
        -:  355:                const istreambuf_iterator<charT,traits>& b);
        -:  356:template <class charT, class traits>
        -:  357:bool operator!=(const istreambuf_iterator<charT,traits>& a,
        -:  358:                const istreambuf_iterator<charT,traits>& b);
        -:  359:
        -:  360:template <class charT, class traits = char_traits<charT> >
        -:  361:class ostreambuf_iterator
        -:  362:    : public iterator<output_iterator_tag, void, void, void, void>
        -:  363:{
        -:  364:public:
        -:  365:    typedef charT                         char_type;
        -:  366:    typedef traits                        traits_type;
        -:  367:    typedef basic_streambuf<charT,traits> streambuf_type;
        -:  368:    typedef basic_ostream<charT,traits>   ostream_type;
        -:  369:
        -:  370:    ostreambuf_iterator(ostream_type& s) noexcept;
        -:  371:    ostreambuf_iterator(streambuf_type* s) noexcept;
        -:  372:    ostreambuf_iterator& operator=(charT c);
        -:  373:    ostreambuf_iterator& operator*();
        -:  374:    ostreambuf_iterator& operator++();
        -:  375:    ostreambuf_iterator& operator++(int);
        -:  376:    bool failed() const noexcept;
        -:  377:};
        -:  378:
        -:  379:template <class C> constexpr auto begin(C& c) -> decltype(c.begin());
        -:  380:template <class C> constexpr auto begin(const C& c) -> decltype(c.begin());
        -:  381:template <class C> constexpr auto end(C& c) -> decltype(c.end());
        -:  382:template <class C> constexpr auto end(const C& c) -> decltype(c.end());
        -:  383:template <class T, size_t N> constexpr T* begin(T (&array)[N]);
        -:  384:template <class T, size_t N> constexpr T* end(T (&array)[N]);
        -:  385:
        -:  386:template <class C> auto constexpr cbegin(const C& c) -> decltype(std::begin(c));        // C++14
        -:  387:template <class C> auto constexpr cend(const C& c) -> decltype(std::end(c));            // C++14
        -:  388:template <class C> auto constexpr rbegin(C& c) -> decltype(c.rbegin());                 // C++14
        -:  389:template <class C> auto constexpr rbegin(const C& c) -> decltype(c.rbegin());           // C++14
        -:  390:template <class C> auto constexpr rend(C& c) -> decltype(c.rend());                     // C++14
        -:  391:template <class C> constexpr auto rend(const C& c) -> decltype(c.rend());               // C++14
        -:  392:template <class E> reverse_iterator<const E*> constexpr rbegin(initializer_list<E> il); // C++14
        -:  393:template <class E> reverse_iterator<const E*> constexpr rend(initializer_list<E> il);   // C++14
        -:  394:template <class T, size_t N> reverse_iterator<T*> constexpr rbegin(T (&array)[N]);      // C++14
        -:  395:template <class T, size_t N> reverse_iterator<T*> constexpr rend(T (&array)[N]);        // C++14
        -:  396:template <class C> constexpr auto crbegin(const C& c) -> decltype(std::rbegin(c));      // C++14
        -:  397:template <class C> constexpr auto crend(const C& c) -> decltype(std::rend(c));          // C++14
        -:  398:
        -:  399:// 24.8, container access:
        -:  400:template <class C> constexpr auto size(const C& c) -> decltype(c.size());         // C++17
        -:  401:template <class T, size_t N> constexpr size_t size(const T (&array)[N]) noexcept; // C++17
        -:  402:
        -:  403:template <class C> constexpr auto ssize(const C& c)
        -:  404:    -> common_type_t<ptrdiff_t, make_signed_t<decltype(c.size())>>;				       // C++20
        -:  405:template <class T, ptrdiff_t> constexpr ptrdiff_t ssize(const T (&array)[N]) noexcept; // C++20
        -:  406:
        -:  407:template <class C> constexpr auto empty(const C& c) -> decltype(c.empty());       // C++17
        -:  408:template <class T, size_t N> constexpr bool empty(const T (&array)[N]) noexcept;  // C++17
        -:  409:template <class E> constexpr bool empty(initializer_list<E> il) noexcept;         // C++17
        -:  410:template <class C> constexpr auto data(C& c) -> decltype(c.data());               // C++17
        -:  411:template <class C> constexpr auto data(const C& c) -> decltype(c.data());         // C++17
        -:  412:template <class T, size_t N> constexpr T* data(T (&array)[N]) noexcept;           // C++17
        -:  413:template <class E> constexpr const E* data(initializer_list<E> il) noexcept;      // C++17
        -:  414:
        -:  415:}  // std
        -:  416:
        -:  417:*/
        -:  418:
        -:  419:#include <__config>
        -:  420:#include <iosfwd> // for forward declarations of vector and string.
        -:  421:#include <__functional_base>
        -:  422:#include <type_traits>
        -:  423:#include <cstddef>
        -:  424:#include <initializer_list>
        -:  425:#include <__cxx_version>
        -:  426:#ifdef __APPLE__
        -:  427:#include <Availability.h>
        -:  428:#endif
        -:  429:
        -:  430:#include <__debug>
        -:  431:
        -:  432:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  433:#pragma GCC system_header
        -:  434:#endif
        -:  435:
        -:  436:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  437:
        -:  438:struct _LIBCPP_TEMPLATE_VIS input_iterator_tag {};
        -:  439:struct _LIBCPP_TEMPLATE_VIS output_iterator_tag {};
        -:  440:struct _LIBCPP_TEMPLATE_VIS forward_iterator_tag       : public input_iterator_tag {};
        -:  441:struct _LIBCPP_TEMPLATE_VIS bidirectional_iterator_tag : public forward_iterator_tag {};
        -:  442:struct _LIBCPP_TEMPLATE_VIS random_access_iterator_tag : public bidirectional_iterator_tag {};
        -:  443:
        -:  444:template <class _Tp>
        -:  445:struct __has_iterator_typedefs
        -:  446:{
        -:  447:private:
        -:  448:    struct __two {char __lx; char __lxx;};
        -:  449:    template <class _Up> static __two __test(...);
        -:  450:    template <class _Up> static char __test(typename std::__void_t<typename _Up::iterator_category>::type* = 0,
        -:  451:    										typename std::__void_t<typename _Up::difference_type>::type* = 0,
        -:  452:    										typename std::__void_t<typename _Up::value_type>::type* = 0,
        -:  453:    										typename std::__void_t<typename _Up::reference>::type* = 0,
        -:  454:    										typename std::__void_t<typename _Up::pointer>::type* = 0
        -:  455:    										);
        -:  456:public:
        -:  457:    static const bool value = sizeof(__test<_Tp>(0,0,0,0,0)) == 1;
        -:  458:};
        -:  459:
        -:  460:
        -:  461:template <class _Tp>
        -:  462:struct __has_iterator_category
        -:  463:{
        -:  464:private:
        -:  465:    struct __two {char __lx; char __lxx;};
        -:  466:    template <class _Up> static __two __test(...);
        -:  467:    template <class _Up> static char __test(typename _Up::iterator_category* = 0);
        -:  468:public:
        -:  469:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  470:};
        -:  471:
        -:  472:template <class _Iter, bool> struct __iterator_traits_impl {};
        -:  473:
        -:  474:template <class _Iter>
        -:  475:struct __iterator_traits_impl<_Iter, true>
        -:  476:{
        -:  477:    typedef typename _Iter::difference_type   difference_type;
        -:  478:    typedef typename _Iter::value_type        value_type;
        -:  479:    typedef typename _Iter::pointer           pointer;
        -:  480:    typedef typename _Iter::reference         reference;
        -:  481:    typedef typename _Iter::iterator_category iterator_category;
        -:  482:};
        -:  483:
        -:  484:template <class _Iter, bool> struct __iterator_traits {};
        -:  485:
        -:  486:template <class _Iter>
        -:  487:struct __iterator_traits<_Iter, true>
        -:  488:    :  __iterator_traits_impl
        -:  489:      <
        -:  490:        _Iter,
        -:  491:        is_convertible<typename _Iter::iterator_category, input_iterator_tag>::value ||
        -:  492:        is_convertible<typename _Iter::iterator_category, output_iterator_tag>::value
        -:  493:      >
        -:  494:{};
        -:  495:
        -:  496:// iterator_traits<Iterator> will only have the nested types if Iterator::iterator_category
        -:  497://    exists.  Else iterator_traits<Iterator> will be an empty class.  This is a
        -:  498://    conforming extension which allows some programs to compile and behave as
        -:  499://    the client expects instead of failing at compile time.
        -:  500:
        -:  501:template <class _Iter>
        -:  502:struct _LIBCPP_TEMPLATE_VIS iterator_traits
        -:  503:    : __iterator_traits<_Iter, __has_iterator_typedefs<_Iter>::value> {};
        -:  504:
        -:  505:template<class _Tp>
        -:  506:struct _LIBCPP_TEMPLATE_VIS iterator_traits<_Tp*>
        -:  507:{
        -:  508:    typedef ptrdiff_t difference_type;
        -:  509:    typedef typename remove_cv<_Tp>::type value_type;
        -:  510:    typedef _Tp* pointer;
        -:  511:    typedef _Tp& reference;
        -:  512:    typedef random_access_iterator_tag iterator_category;
        -:  513:};
        -:  514:
        -:  515:template <class _Tp, class _Up, bool = __has_iterator_category<iterator_traits<_Tp> >::value>
        -:  516:struct __has_iterator_category_convertible_to
        -:  517:    : public integral_constant<bool, is_convertible<typename iterator_traits<_Tp>::iterator_category, _Up>::value>
        -:  518:{};
        -:  519:
        -:  520:template <class _Tp, class _Up>
        -:  521:struct __has_iterator_category_convertible_to<_Tp, _Up, false> : public false_type {};
        -:  522:
        -:  523:template <class _Tp>
        -:  524:struct __is_input_iterator : public __has_iterator_category_convertible_to<_Tp, input_iterator_tag> {};
        -:  525:
        -:  526:template <class _Tp>
        -:  527:struct __is_forward_iterator : public __has_iterator_category_convertible_to<_Tp, forward_iterator_tag> {};
        -:  528:
        -:  529:template <class _Tp>
        -:  530:struct __is_bidirectional_iterator : public __has_iterator_category_convertible_to<_Tp, bidirectional_iterator_tag> {};
        -:  531:
        -:  532:template <class _Tp>
        -:  533:struct __is_random_access_iterator : public __has_iterator_category_convertible_to<_Tp, random_access_iterator_tag> {};
        -:  534:
        -:  535:template <class _Tp>
        -:  536:struct __is_exactly_input_iterator
        -:  537:    : public integral_constant<bool,
        -:  538:         __has_iterator_category_convertible_to<_Tp, input_iterator_tag>::value &&
        -:  539:        !__has_iterator_category_convertible_to<_Tp, forward_iterator_tag>::value> {};
        -:  540:
        -:  541:template<class _Category, class _Tp, class _Distance = ptrdiff_t,
        -:  542:         class _Pointer = _Tp*, class _Reference = _Tp&>
        -:  543:struct _LIBCPP_TEMPLATE_VIS iterator
        -:  544:{
        -:  545:    typedef _Tp        value_type;
        -:  546:    typedef _Distance  difference_type;
        -:  547:    typedef _Pointer   pointer;
        -:  548:    typedef _Reference reference;
        -:  549:    typedef _Category  iterator_category;
        -:  550:};
        -:  551:
        -:  552:template <class _InputIter>
        -:  553:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  554:void __advance(_InputIter& __i,
        -:  555:             typename iterator_traits<_InputIter>::difference_type __n, input_iterator_tag)
        -:  556:{
        -:  557:    for (; __n > 0; --__n)
        -:  558:        ++__i;
        -:  559:}
        -:  560:
        -:  561:template <class _BiDirIter>
        -:  562:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  563:void __advance(_BiDirIter& __i,
        -:  564:             typename iterator_traits<_BiDirIter>::difference_type __n, bidirectional_iterator_tag)
        -:  565:{
        -:  566:    if (__n >= 0)
        -:  567:        for (; __n > 0; --__n)
        -:  568:            ++__i;
        -:  569:    else
        -:  570:        for (; __n < 0; ++__n)
        -:  571:            --__i;
        -:  572:}
        -:  573:
        -:  574:template <class _RandIter>
        -:  575:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  576:void __advance(_RandIter& __i,
        -:  577:             typename iterator_traits<_RandIter>::difference_type __n, random_access_iterator_tag)
        -:  578:{
        -:  579:   __i += __n;
        -:  580:}
        -:  581:
        -:  582:template <class _InputIter>
        -:  583:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  584:void advance(_InputIter& __i,
        -:  585:             typename iterator_traits<_InputIter>::difference_type __n)
        -:  586:{
        -:  587:    _LIBCPP_ASSERT(__n >= 0 || __is_bidirectional_iterator<_InputIter>::value,
        -:  588:                       "Attempt to advance(it, -n) on a non-bidi iterator");
        -:  589:    __advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category());
        -:  590:}
        -:  591:
        -:  592:template <class _InputIter>
        -:  593:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  594:typename iterator_traits<_InputIter>::difference_type
        -:  595:__distance(_InputIter __first, _InputIter __last, input_iterator_tag)
        -:  596:{
        -:  597:    typename iterator_traits<_InputIter>::difference_type __r(0);
        -:  598:    for (; __first != __last; ++__first)
        -:  599:        ++__r;
        -:  600:    return __r;
        -:  601:}
        -:  602:
        -:  603:template <class _RandIter>
        -:  604:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  605:typename iterator_traits<_RandIter>::difference_type
        -:  606:__distance(_RandIter __first, _RandIter __last, random_access_iterator_tag)
        -:  607:{
        -:  608:    return __last - __first;
        -:  609:}
        -:  610:
        -:  611:template <class _InputIter>
        -:  612:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  613:typename iterator_traits<_InputIter>::difference_type
        -:  614:distance(_InputIter __first, _InputIter __last)
        -:  615:{
        -:  616:    return __distance(__first, __last, typename iterator_traits<_InputIter>::iterator_category());
        -:  617:}
        -:  618:
        -:  619:template <class _InputIter>
        -:  620:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  621:typename enable_if
        -:  622:<
        -:  623:    __is_input_iterator<_InputIter>::value,
        -:  624:    _InputIter
        -:  625:>::type
        -:  626:next(_InputIter __x,
        -:  627:     typename iterator_traits<_InputIter>::difference_type __n = 1)
        -:  628:{
        -:  629:    _LIBCPP_ASSERT(__n >= 0 || __is_bidirectional_iterator<_InputIter>::value,
        -:  630:                       "Attempt to next(it, -n) on a non-bidi iterator");
        -:  631:
        -:  632:    _VSTD::advance(__x, __n);
        -:  633:    return __x;
        -:  634:}
        -:  635:
        -:  636:template <class _InputIter>
        -:  637:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  638:typename enable_if
        -:  639:<
        -:  640:    __is_input_iterator<_InputIter>::value,
        -:  641:    _InputIter
        -:  642:>::type
        -:  643:prev(_InputIter __x,
        -:  644:     typename iterator_traits<_InputIter>::difference_type __n = 1)
        -:  645:{
        -:  646:    _LIBCPP_ASSERT(__n <= 0 || __is_bidirectional_iterator<_InputIter>::value,
        -:  647:                       "Attempt to prev(it, +n) on a non-bidi iterator");
        -:  648:    _VSTD::advance(__x, -__n);
        -:  649:    return __x;
        -:  650:}
        -:  651:
        -:  652:
        -:  653:template <class _Tp, class = void>
        -:  654:struct __is_stashing_iterator : false_type {};
        -:  655:
        -:  656:template <class _Tp>
        -:  657:struct __is_stashing_iterator<_Tp, typename __void_t<typename _Tp::__stashing_iterator_tag>::type>
        -:  658:  : true_type {};
        -:  659:
        -:  660:template <class _Iter>
        -:  661:class _LIBCPP_TEMPLATE_VIS reverse_iterator
        -:  662:    : public iterator<typename iterator_traits<_Iter>::iterator_category,
        -:  663:                      typename iterator_traits<_Iter>::value_type,
        -:  664:                      typename iterator_traits<_Iter>::difference_type,
        -:  665:                      typename iterator_traits<_Iter>::pointer,
        -:  666:                      typename iterator_traits<_Iter>::reference>
        -:  667:{
        -:  668:private:
        -:  669:    /*mutable*/ _Iter __t;  // no longer used as of LWG #2360, not removed due to ABI break
        -:  670:
        -:  671:    static_assert(!__is_stashing_iterator<_Iter>::value,
        -:  672:      "The specified iterator type cannot be used with reverse_iterator; "
        -:  673:      "Using stashing iterators with reverse_iterator causes undefined behavior");
        -:  674:
        -:  675:protected:
        -:  676:    _Iter current;
        -:  677:public:
        -:  678:    typedef _Iter                                            iterator_type;
        -:  679:    typedef typename iterator_traits<_Iter>::difference_type difference_type;
        -:  680:    typedef typename iterator_traits<_Iter>::reference       reference;
        -:  681:    typedef typename iterator_traits<_Iter>::pointer         pointer;
        -:  682:
        -:  683:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  684:    reverse_iterator() : __t(), current() {}
        -:  685:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  686:    explicit reverse_iterator(_Iter __x) : __t(__x), current(__x) {}
        -:  687:    template <class _Up>
        -:  688:        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  689:        reverse_iterator(const reverse_iterator<_Up>& __u) : __t(__u.base()), current(__u.base()) {}
        -:  690:    template <class _Up>
        -:  691:        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  692:        reverse_iterator& operator=(const reverse_iterator<_Up>& __u)
        -:  693:            { __t = current = __u.base(); return *this; }
        -:  694:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  695:    _Iter base() const {return current;}
        -:  696:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  697:    reference operator*() const {_Iter __tmp = current; return *--__tmp;}
        -:  698:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  699:    pointer  operator->() const {return _VSTD::addressof(operator*());}
        -:  700:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  701:    reverse_iterator& operator++() {--current; return *this;}
        -:  702:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  703:    reverse_iterator  operator++(int) {reverse_iterator __tmp(*this); --current; return __tmp;}
        -:  704:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  705:    reverse_iterator& operator--() {++current; return *this;}
        -:  706:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  707:    reverse_iterator  operator--(int) {reverse_iterator __tmp(*this); ++current; return __tmp;}
        -:  708:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  709:    reverse_iterator  operator+ (difference_type __n) const {return reverse_iterator(current - __n);}
        -:  710:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  711:    reverse_iterator& operator+=(difference_type __n) {current -= __n; return *this;}
        -:  712:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  713:    reverse_iterator  operator- (difference_type __n) const {return reverse_iterator(current + __n);}
        -:  714:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  715:    reverse_iterator& operator-=(difference_type __n) {current += __n; return *this;}
        -:  716:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  717:    reference         operator[](difference_type __n) const {return *(*this + __n);}
        -:  718:};
        -:  719:
        -:  720:template <class _Iter1, class _Iter2>
        -:  721:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  722:bool
        -:  723:operator==(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  724:{
        -:  725:    return __x.base() == __y.base();
        -:  726:}
        -:  727:
        -:  728:template <class _Iter1, class _Iter2>
        -:  729:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  730:bool
        -:  731:operator<(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  732:{
        -:  733:    return __x.base() > __y.base();
        -:  734:}
        -:  735:
        -:  736:template <class _Iter1, class _Iter2>
        -:  737:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  738:bool
        -:  739:operator!=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  740:{
        -:  741:    return __x.base() != __y.base();
        -:  742:}
        -:  743:
        -:  744:template <class _Iter1, class _Iter2>
        -:  745:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  746:bool
        -:  747:operator>(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  748:{
        -:  749:    return __x.base() < __y.base();
        -:  750:}
        -:  751:
        -:  752:template <class _Iter1, class _Iter2>
        -:  753:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  754:bool
        -:  755:operator>=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  756:{
        -:  757:    return __x.base() <= __y.base();
        -:  758:}
        -:  759:
        -:  760:template <class _Iter1, class _Iter2>
        -:  761:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  762:bool
        -:  763:operator<=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  764:{
        -:  765:    return __x.base() >= __y.base();
        -:  766:}
        -:  767:
        -:  768:#ifndef _LIBCPP_CXX03_LANG
        -:  769:template <class _Iter1, class _Iter2>
        -:  770:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  771:auto
        -:  772:operator-(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  773:-> decltype(__y.base() - __x.base())
        -:  774:{
        -:  775:    return __y.base() - __x.base();
        -:  776:}
        -:  777:#else
        -:  778:template <class _Iter1, class _Iter2>
        -:  779:inline _LIBCPP_INLINE_VISIBILITY
        -:  780:typename reverse_iterator<_Iter1>::difference_type
        -:  781:operator-(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  782:{
        -:  783:    return __y.base() - __x.base();
        -:  784:}
        -:  785:#endif
        -:  786:
        -:  787:template <class _Iter>
        -:  788:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  789:reverse_iterator<_Iter>
        -:  790:operator+(typename reverse_iterator<_Iter>::difference_type __n, const reverse_iterator<_Iter>& __x)
        -:  791:{
        -:  792:    return reverse_iterator<_Iter>(__x.base() - __n);
        -:  793:}
        -:  794:
        -:  795:#if _LIBCPP_STD_VER > 11
        -:  796:template <class _Iter>
        -:  797:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  798:reverse_iterator<_Iter> make_reverse_iterator(_Iter __i)
        -:  799:{
        -:  800:    return reverse_iterator<_Iter>(__i);
        -:  801:}
        -:  802:#endif
        -:  803:
        -:  804:template <class _Container>
        -:  805:class _LIBCPP_TEMPLATE_VIS back_insert_iterator
        -:  806:    : public iterator<output_iterator_tag,
        -:  807:                      void,
        -:  808:                      void,
        -:  809:                      void,
        -:  810:                      void>
        -:  811:{
        -:  812:protected:
        -:  813:    _Container* container;
        -:  814:public:
        -:  815:    typedef _Container container_type;
        -:  816:
       12:  817:    _LIBCPP_INLINE_VISIBILITY explicit back_insert_iterator(_Container& __x) : container(_VSTD::addressof(__x)) {}
        6:  817-block  0
        6:  817-block  1
        6:  817-block  2
        6:  817-block  3
        9:  818:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator=(const typename _Container::value_type& __value_)
        9:  818-block  0
        9:  819:        {container->push_back(__value_); return *this;}
        9:  819-block  0
        -:  820:#ifndef _LIBCPP_CXX03_LANG
        -:  821:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator=(typename _Container::value_type&& __value_)
        -:  822:        {container->push_back(_VSTD::move(__value_)); return *this;}
        -:  823:#endif  // _LIBCPP_CXX03_LANG
        9:  824:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator*()     {return *this;}
        9:  824-block  0
        9:  824-block  1
        9:  825:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator++()    {return *this;}
        9:  825-block  0
        9:  825-block  1
        -:  826:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator  operator++(int) {return *this;}
        -:  827:};
        -:  828:
        -:  829:template <class _Container>
        -:  830:inline _LIBCPP_INLINE_VISIBILITY
        -:  831:back_insert_iterator<_Container>
        6:  832:back_inserter(_Container& __x)
        6:  832-block  0
        -:  833:{
        6:  834:    return back_insert_iterator<_Container>(__x);
        6:  834-block  0
        -:  835:}
        -:  836:
        -:  837:template <class _Container>
        -:  838:class _LIBCPP_TEMPLATE_VIS front_insert_iterator
        -:  839:    : public iterator<output_iterator_tag,
        -:  840:                      void,
        -:  841:                      void,
        -:  842:                      void,
        -:  843:                      void>
        -:  844:{
        -:  845:protected:
        -:  846:    _Container* container;
        -:  847:public:
        -:  848:    typedef _Container container_type;
        -:  849:
        -:  850:    _LIBCPP_INLINE_VISIBILITY explicit front_insert_iterator(_Container& __x) : container(_VSTD::addressof(__x)) {}
        -:  851:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator=(const typename _Container::value_type& __value_)
        -:  852:        {container->push_front(__value_); return *this;}
        -:  853:#ifndef _LIBCPP_CXX03_LANG
        -:  854:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator=(typename _Container::value_type&& __value_)
        -:  855:        {container->push_front(_VSTD::move(__value_)); return *this;}
        -:  856:#endif  // _LIBCPP_CXX03_LANG
        -:  857:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator*()     {return *this;}
        -:  858:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator++()    {return *this;}
        -:  859:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator  operator++(int) {return *this;}
        -:  860:};
        -:  861:
        -:  862:template <class _Container>
        -:  863:inline _LIBCPP_INLINE_VISIBILITY
        -:  864:front_insert_iterator<_Container>
        -:  865:front_inserter(_Container& __x)
        -:  866:{
        -:  867:    return front_insert_iterator<_Container>(__x);
        -:  868:}
        -:  869:
        -:  870:template <class _Container>
        -:  871:class _LIBCPP_TEMPLATE_VIS insert_iterator
        -:  872:    : public iterator<output_iterator_tag,
        -:  873:                      void,
        -:  874:                      void,
        -:  875:                      void,
        -:  876:                      void>
        -:  877:{
        -:  878:protected:
        -:  879:    _Container* container;
        -:  880:    typename _Container::iterator iter;
        -:  881:public:
        -:  882:    typedef _Container container_type;
        -:  883:
        -:  884:    _LIBCPP_INLINE_VISIBILITY insert_iterator(_Container& __x, typename _Container::iterator __i)
        -:  885:        : container(_VSTD::addressof(__x)), iter(__i) {}
        -:  886:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator=(const typename _Container::value_type& __value_)
        -:  887:        {iter = container->insert(iter, __value_); ++iter; return *this;}
        -:  888:#ifndef _LIBCPP_CXX03_LANG
        -:  889:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator=(typename _Container::value_type&& __value_)
        -:  890:        {iter = container->insert(iter, _VSTD::move(__value_)); ++iter; return *this;}
        -:  891:#endif  // _LIBCPP_CXX03_LANG
        -:  892:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator*()        {return *this;}
        -:  893:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator++()       {return *this;}
        -:  894:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator++(int)    {return *this;}
        -:  895:};
        -:  896:
        -:  897:template <class _Container>
        -:  898:inline _LIBCPP_INLINE_VISIBILITY
        -:  899:insert_iterator<_Container>
        -:  900:inserter(_Container& __x, typename _Container::iterator __i)
        -:  901:{
        -:  902:    return insert_iterator<_Container>(__x, __i);
        -:  903:}
        -:  904:
        -:  905:template <class _Tp, class _CharT = char,
        -:  906:          class _Traits = char_traits<_CharT>, class _Distance = ptrdiff_t>
        -:  907:class _LIBCPP_TEMPLATE_VIS istream_iterator
        -:  908:    : public iterator<input_iterator_tag, _Tp, _Distance, const _Tp*, const _Tp&>
        -:  909:{
        -:  910:public:
        -:  911:    typedef _CharT char_type;
        -:  912:    typedef _Traits traits_type;
        -:  913:    typedef basic_istream<_CharT,_Traits> istream_type;
        -:  914:private:
        -:  915:    istream_type* __in_stream_;
        -:  916:    _Tp __value_;
        -:  917:public:
        -:  918:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR istream_iterator() : __in_stream_(0), __value_() {}
        -:  919:    _LIBCPP_INLINE_VISIBILITY istream_iterator(istream_type& __s) : __in_stream_(_VSTD::addressof(__s))
        -:  920:        {
        -:  921:            if (!(*__in_stream_ >> __value_))
        -:  922:                __in_stream_ = 0;
        -:  923:        }
        -:  924:
        -:  925:    _LIBCPP_INLINE_VISIBILITY const _Tp& operator*() const {return __value_;}
        -:  926:    _LIBCPP_INLINE_VISIBILITY const _Tp* operator->() const {return _VSTD::addressof((operator*()));}
        -:  927:    _LIBCPP_INLINE_VISIBILITY istream_iterator& operator++()
        -:  928:        {
        -:  929:            if (!(*__in_stream_ >> __value_))
        -:  930:                __in_stream_ = 0;
        -:  931:            return *this;
        -:  932:        }
        -:  933:    _LIBCPP_INLINE_VISIBILITY istream_iterator  operator++(int)
        -:  934:        {istream_iterator __t(*this); ++(*this); return __t;}
        -:  935:
        -:  936:    template <class _Up, class _CharU, class _TraitsU, class _DistanceU>
        -:  937:    friend _LIBCPP_INLINE_VISIBILITY
        -:  938:    bool
        -:  939:    operator==(const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __x,
        -:  940:               const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __y);
        -:  941:
        -:  942:    template <class _Up, class _CharU, class _TraitsU, class _DistanceU>
        -:  943:    friend _LIBCPP_INLINE_VISIBILITY
        -:  944:    bool
        -:  945:    operator==(const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __x,
        -:  946:               const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __y);
        -:  947:};
        -:  948:
        -:  949:template <class _Tp, class _CharT, class _Traits, class _Distance>
        -:  950:inline _LIBCPP_INLINE_VISIBILITY
        -:  951:bool
        -:  952:operator==(const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __x,
        -:  953:           const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __y)
        -:  954:{
        -:  955:    return __x.__in_stream_ == __y.__in_stream_;
        -:  956:}
        -:  957:
        -:  958:template <class _Tp, class _CharT, class _Traits, class _Distance>
        -:  959:inline _LIBCPP_INLINE_VISIBILITY
        -:  960:bool
        -:  961:operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __x,
        -:  962:           const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __y)
        -:  963:{
        -:  964:    return !(__x == __y);
        -:  965:}
        -:  966:
        -:  967:template <class _Tp, class _CharT = char, class _Traits = char_traits<_CharT> >
        -:  968:class _LIBCPP_TEMPLATE_VIS ostream_iterator
        -:  969:    : public iterator<output_iterator_tag, void, void, void, void>
        -:  970:{
        -:  971:public:
        -:  972:    typedef _CharT char_type;
        -:  973:    typedef _Traits traits_type;
        -:  974:    typedef basic_ostream<_CharT,_Traits> ostream_type;
        -:  975:private:
        -:  976:    ostream_type* __out_stream_;
        -:  977:    const char_type* __delim_;
        -:  978:public:
        -:  979:    _LIBCPP_INLINE_VISIBILITY ostream_iterator(ostream_type& __s) _NOEXCEPT
        -:  980:        : __out_stream_(_VSTD::addressof(__s)), __delim_(0) {}
        -:  981:    _LIBCPP_INLINE_VISIBILITY ostream_iterator(ostream_type& __s, const _CharT* __delimiter) _NOEXCEPT
        -:  982:        : __out_stream_(_VSTD::addressof(__s)), __delim_(__delimiter) {}
        -:  983:    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator=(const _Tp& __value_)
        -:  984:        {
        -:  985:            *__out_stream_ << __value_;
        -:  986:            if (__delim_)
        -:  987:                *__out_stream_ << __delim_;
        -:  988:            return *this;
        -:  989:        }
        -:  990:
        -:  991:    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator*()     {return *this;}
        -:  992:    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator++()    {return *this;}
        -:  993:    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator++(int) {return *this;}
        -:  994:};
        -:  995:
        -:  996:template<class _CharT, class _Traits>
        -:  997:class _LIBCPP_TEMPLATE_VIS istreambuf_iterator
        -:  998:    : public iterator<input_iterator_tag, _CharT,
        -:  999:                      typename _Traits::off_type, _CharT*,
        -: 1000:                      _CharT>
        -: 1001:{
        -: 1002:public:
        -: 1003:    typedef _CharT                          char_type;
        -: 1004:    typedef _Traits                         traits_type;
        -: 1005:    typedef typename _Traits::int_type      int_type;
        -: 1006:    typedef basic_streambuf<_CharT,_Traits> streambuf_type;
        -: 1007:    typedef basic_istream<_CharT,_Traits>   istream_type;
        -: 1008:private:
        -: 1009:    mutable streambuf_type* __sbuf_;
        -: 1010:
        -: 1011:    class __proxy
        -: 1012:    {
        -: 1013:        char_type __keep_;
        -: 1014:        streambuf_type* __sbuf_;
        -: 1015:        _LIBCPP_INLINE_VISIBILITY __proxy(char_type __c, streambuf_type* __s)
        -: 1016:            : __keep_(__c), __sbuf_(__s) {}
        -: 1017:        friend class istreambuf_iterator;
        -: 1018:    public:
        -: 1019:        _LIBCPP_INLINE_VISIBILITY char_type operator*() const {return __keep_;}
        -: 1020:    };
        -: 1021:
        -: 1022:    _LIBCPP_INLINE_VISIBILITY
        -: 1023:    bool __test_for_eof() const
        -: 1024:    {
        -: 1025:        if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sgetc(), traits_type::eof()))
        -: 1026:            __sbuf_ = 0;
        -: 1027:        return __sbuf_ == 0;
        -: 1028:    }
        -: 1029:public:
        -: 1030:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR istreambuf_iterator() _NOEXCEPT : __sbuf_(0) {}
        -: 1031:    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator(istream_type& __s) _NOEXCEPT
        -: 1032:        : __sbuf_(__s.rdbuf()) {}
        -: 1033:    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator(streambuf_type* __s) _NOEXCEPT
        -: 1034:        : __sbuf_(__s) {}
        -: 1035:    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator(const __proxy& __p) _NOEXCEPT
        -: 1036:        : __sbuf_(__p.__sbuf_) {}
        -: 1037:
        -: 1038:    _LIBCPP_INLINE_VISIBILITY char_type  operator*() const
        -: 1039:        {return static_cast<char_type>(__sbuf_->sgetc());}
        -: 1040:    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator& operator++()
        -: 1041:        {
        -: 1042:            __sbuf_->sbumpc();
        -: 1043:            return *this;
        -: 1044:        }
        -: 1045:    _LIBCPP_INLINE_VISIBILITY __proxy              operator++(int)
        -: 1046:        {
        -: 1047:            return __proxy(__sbuf_->sbumpc(), __sbuf_);
        -: 1048:        }
        -: 1049:
        -: 1050:    _LIBCPP_INLINE_VISIBILITY bool equal(const istreambuf_iterator& __b) const
        -: 1051:        {return __test_for_eof() == __b.__test_for_eof();}
        -: 1052:};
        -: 1053:
        -: 1054:template <class _CharT, class _Traits>
        -: 1055:inline _LIBCPP_INLINE_VISIBILITY
        -: 1056:bool operator==(const istreambuf_iterator<_CharT,_Traits>& __a,
        -: 1057:                const istreambuf_iterator<_CharT,_Traits>& __b)
        -: 1058:                {return __a.equal(__b);}
        -: 1059:
        -: 1060:template <class _CharT, class _Traits>
        -: 1061:inline _LIBCPP_INLINE_VISIBILITY
        -: 1062:bool operator!=(const istreambuf_iterator<_CharT,_Traits>& __a,
        -: 1063:                const istreambuf_iterator<_CharT,_Traits>& __b)
        -: 1064:                {return !__a.equal(__b);}
        -: 1065:
        -: 1066:template <class _CharT, class _Traits>
        -: 1067:class _LIBCPP_TEMPLATE_VIS ostreambuf_iterator
        -: 1068:    : public iterator<output_iterator_tag, void, void, void, void>
        -: 1069:{
        -: 1070:public:
        -: 1071:    typedef _CharT                          char_type;
        -: 1072:    typedef _Traits                         traits_type;
        -: 1073:    typedef basic_streambuf<_CharT,_Traits> streambuf_type;
        -: 1074:    typedef basic_ostream<_CharT,_Traits>   ostream_type;
        -: 1075:private:
        -: 1076:    streambuf_type* __sbuf_;
        -: 1077:public:
    #####: 1078:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator(ostream_type& __s) _NOEXCEPT
    $$$$$: 1078-block  0
    $$$$$: 1078-block  1
    #####: 1079:        : __sbuf_(__s.rdbuf()) {}
    $$$$$: 1079-block  0
    $$$$$: 1079-block  1
    $$$$$: 1079-block  2
    $$$$$: 1079-block  3
        -: 1080:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator(streambuf_type* __s) _NOEXCEPT
        -: 1081:        : __sbuf_(__s) {}
        -: 1082:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator=(_CharT __c)
        -: 1083:        {
        -: 1084:            if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sputc(__c), traits_type::eof()))
        -: 1085:                __sbuf_ = 0;
        -: 1086:            return *this;
        -: 1087:        }
        -: 1088:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator*()     {return *this;}
        -: 1089:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator++()    {return *this;}
        -: 1090:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator++(int) {return *this;}
    #####: 1091:    _LIBCPP_INLINE_VISIBILITY bool failed() const _NOEXCEPT {return __sbuf_ == 0;}
    $$$$$: 1091-block  0
    $$$$$: 1091-block  1
        -: 1092:
        -: 1093:    template <class _Ch, class _Tr>
        -: 1094:    friend
        -: 1095:    _LIBCPP_HIDDEN
        -: 1096:    ostreambuf_iterator<_Ch, _Tr>
        -: 1097:    __pad_and_output(ostreambuf_iterator<_Ch, _Tr> __s,
        -: 1098:                     const _Ch* __ob, const _Ch* __op, const _Ch* __oe,
        -: 1099:                     ios_base& __iob, _Ch __fl);
        -: 1100:};
        -: 1101:
        -: 1102:template <class _Iter>
        -: 1103:class _LIBCPP_TEMPLATE_VIS move_iterator
        -: 1104:{
        -: 1105:private:
        -: 1106:    _Iter __i;
        -: 1107:public:
        -: 1108:    typedef _Iter                                            iterator_type;
        -: 1109:    typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;
        -: 1110:    typedef typename iterator_traits<iterator_type>::value_type value_type;
        -: 1111:    typedef typename iterator_traits<iterator_type>::difference_type difference_type;
        -: 1112:    typedef iterator_type pointer;
        -: 1113:#ifndef _LIBCPP_CXX03_LANG
        -: 1114:    typedef typename iterator_traits<iterator_type>::reference __reference;
        -: 1115:    typedef typename conditional<
        -: 1116:            is_reference<__reference>::value,
        -: 1117:            typename remove_reference<__reference>::type&&,
        -: 1118:            __reference
        -: 1119:        >::type reference;
        -: 1120:#else
        -: 1121:    typedef typename iterator_traits<iterator_type>::reference reference;
        -: 1122:#endif
        -: 1123:
        -: 1124:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1125:    move_iterator() : __i() {}
        -: 1126:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1127:    explicit move_iterator(_Iter __x) : __i(__x) {}
        -: 1128:    template <class _Up>
        -: 1129:      _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1130:      move_iterator(const move_iterator<_Up>& __u) : __i(__u.base()) {}
        -: 1131:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 _Iter base() const {return __i;}
        -: 1132:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1133:    reference operator*() const { return static_cast<reference>(*__i); }
        -: 1134:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1135:    pointer  operator->() const { return __i;}
        -: 1136:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1137:    move_iterator& operator++() {++__i; return *this;}
        -: 1138:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1139:    move_iterator  operator++(int) {move_iterator __tmp(*this); ++__i; return __tmp;}
        -: 1140:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1141:    move_iterator& operator--() {--__i; return *this;}
        -: 1142:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1143:    move_iterator  operator--(int) {move_iterator __tmp(*this); --__i; return __tmp;}
        -: 1144:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1145:    move_iterator  operator+ (difference_type __n) const {return move_iterator(__i + __n);}
        -: 1146:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1147:    move_iterator& operator+=(difference_type __n) {__i += __n; return *this;}
        -: 1148:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1149:    move_iterator  operator- (difference_type __n) const {return move_iterator(__i - __n);}
        -: 1150:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1151:    move_iterator& operator-=(difference_type __n) {__i -= __n; return *this;}
        -: 1152:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1153:    reference operator[](difference_type __n) const { return static_cast<reference>(__i[__n]); }
        -: 1154:};
        -: 1155:
        -: 1156:template <class _Iter1, class _Iter2>
        -: 1157:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1158:bool
        -: 1159:operator==(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1160:{
        -: 1161:    return __x.base() == __y.base();
        -: 1162:}
        -: 1163:
        -: 1164:template <class _Iter1, class _Iter2>
        -: 1165:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1166:bool
        -: 1167:operator<(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1168:{
        -: 1169:    return __x.base() < __y.base();
        -: 1170:}
        -: 1171:
        -: 1172:template <class _Iter1, class _Iter2>
        -: 1173:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1174:bool
        -: 1175:operator!=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1176:{
        -: 1177:    return __x.base() != __y.base();
        -: 1178:}
        -: 1179:
        -: 1180:template <class _Iter1, class _Iter2>
        -: 1181:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1182:bool
        -: 1183:operator>(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1184:{
        -: 1185:    return __x.base() > __y.base();
        -: 1186:}
        -: 1187:
        -: 1188:template <class _Iter1, class _Iter2>
        -: 1189:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1190:bool
        -: 1191:operator>=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1192:{
        -: 1193:    return __x.base() >= __y.base();
        -: 1194:}
        -: 1195:
        -: 1196:template <class _Iter1, class _Iter2>
        -: 1197:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1198:bool
        -: 1199:operator<=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1200:{
        -: 1201:    return __x.base() <= __y.base();
        -: 1202:}
        -: 1203:
        -: 1204:#ifndef _LIBCPP_CXX03_LANG
        -: 1205:template <class _Iter1, class _Iter2>
        -: 1206:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1207:auto
        -: 1208:operator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1209:-> decltype(__x.base() - __y.base())
        -: 1210:{
        -: 1211:    return __x.base() - __y.base();
        -: 1212:}
        -: 1213:#else
        -: 1214:template <class _Iter1, class _Iter2>
        -: 1215:inline _LIBCPP_INLINE_VISIBILITY
        -: 1216:typename move_iterator<_Iter1>::difference_type
        -: 1217:operator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1218:{
        -: 1219:    return __x.base() - __y.base();
        -: 1220:}
        -: 1221:#endif
        -: 1222:
        -: 1223:template <class _Iter>
        -: 1224:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1225:move_iterator<_Iter>
        -: 1226:operator+(typename move_iterator<_Iter>::difference_type __n, const move_iterator<_Iter>& __x)
        -: 1227:{
        -: 1228:    return move_iterator<_Iter>(__x.base() + __n);
        -: 1229:}
        -: 1230:
        -: 1231:template <class _Iter>
        -: 1232:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1233:move_iterator<_Iter>
        -: 1234:make_move_iterator(_Iter __i)
        -: 1235:{
        -: 1236:    return move_iterator<_Iter>(__i);
        -: 1237:}
        -: 1238:
        -: 1239:// __wrap_iter
        -: 1240:
        -: 1241:template <class _Iter> class __wrap_iter;
        -: 1242:
        -: 1243:template <class _Iter1, class _Iter2>
        -: 1244:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1245:bool
        -: 1246:operator==(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1247:
        -: 1248:template <class _Iter1, class _Iter2>
        -: 1249:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1250:bool
        -: 1251:operator<(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1252:
        -: 1253:template <class _Iter1, class _Iter2>
        -: 1254:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1255:bool
        -: 1256:operator!=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1257:
        -: 1258:template <class _Iter1, class _Iter2>
        -: 1259:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1260:bool
        -: 1261:operator>(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1262:
        -: 1263:template <class _Iter1, class _Iter2>
        -: 1264:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1265:bool
        -: 1266:operator>=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1267:
        -: 1268:template <class _Iter1, class _Iter2>
        -: 1269:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1270:bool
        -: 1271:operator<=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1272:
        -: 1273:#ifndef _LIBCPP_CXX03_LANG
        -: 1274:template <class _Iter1, class _Iter2>
        -: 1275:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1276:auto
        -: 1277:operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1278:-> decltype(__x.base() - __y.base());
        -: 1279:#else
        -: 1280:template <class _Iter1, class _Iter2>
        -: 1281:_LIBCPP_INLINE_VISIBILITY
        -: 1282:typename __wrap_iter<_Iter1>::difference_type
        -: 1283:operator-(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1284:#endif
        -: 1285:
        -: 1286:template <class _Iter>
        -: 1287:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1288:__wrap_iter<_Iter>
        -: 1289:operator+(typename __wrap_iter<_Iter>::difference_type, __wrap_iter<_Iter>) _NOEXCEPT;
        -: 1290:
        -: 1291:template <class _Ip, class _Op> _Op _LIBCPP_INLINE_VISIBILITY copy(_Ip, _Ip, _Op);
        -: 1292:template <class _B1, class _B2> _B2 _LIBCPP_INLINE_VISIBILITY copy_backward(_B1, _B1, _B2);
        -: 1293:template <class _Ip, class _Op> _Op _LIBCPP_INLINE_VISIBILITY move(_Ip, _Ip, _Op);
        -: 1294:template <class _B1, class _B2> _B2 _LIBCPP_INLINE_VISIBILITY move_backward(_B1, _B1, _B2);
        -: 1295:
        -: 1296:#if _LIBCPP_DEBUG_LEVEL < 2
        -: 1297:
        -: 1298:template <class _Tp>
        -: 1299:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1300:typename enable_if
        -: 1301:<
        -: 1302:    is_trivially_copy_assignable<_Tp>::value,
        -: 1303:    _Tp*
        -: 1304:>::type
        -: 1305:__unwrap_iter(__wrap_iter<_Tp*>);
        -: 1306:
        -: 1307:#else
        -: 1308:
        -: 1309:template <class _Tp>
        -: 1310:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1311:typename enable_if
        -: 1312:<
        -: 1313:    is_trivially_copy_assignable<_Tp>::value,
        -: 1314:    __wrap_iter<_Tp*>
        -: 1315:>::type
        -: 1316:__unwrap_iter(__wrap_iter<_Tp*> __i);
        -: 1317:
        -: 1318:#endif
        -: 1319:
        -: 1320:template <class _Iter>
        -: 1321:class __wrap_iter
        -: 1322:{
        -: 1323:public:
        -: 1324:    typedef _Iter                                                      iterator_type;
        -: 1325:    typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;
        -: 1326:    typedef typename iterator_traits<iterator_type>::value_type        value_type;
        -: 1327:    typedef typename iterator_traits<iterator_type>::difference_type   difference_type;
        -: 1328:    typedef typename iterator_traits<iterator_type>::pointer           pointer;
        -: 1329:    typedef typename iterator_traits<iterator_type>::reference         reference;
        -: 1330:private:
        -: 1331:    iterator_type __i;
        -: 1332:public:
        -: 1333:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter() _NOEXCEPT
        -: 1334:#if _LIBCPP_STD_VER > 11
        -: 1335:                : __i{}
        -: 1336:#endif
        -: 1337:    {
        -: 1338:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1339:        __get_db()->__insert_i(this);
        -: 1340:#endif
        -: 1341:    }
        -: 1342:    template <class _Up> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        4: 1343:        __wrap_iter(const __wrap_iter<_Up>& __u,
        2: 1343-block  0
        2: 1343-block  1
        -: 1344:            typename enable_if<is_convertible<_Up, iterator_type>::value>::type* = 0) _NOEXCEPT
        2: 1345:            : __i(__u.base())
        2: 1346:    {
        -: 1347:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1348:        __get_db()->__iterator_copy(this, &__u);
        -: 1349:#endif
        4: 1350:    }
        2: 1350-block  0
        2: 1350-block  1
        -: 1351:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1352:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1353:    __wrap_iter(const __wrap_iter& __x)
        -: 1354:        : __i(__x.base())
        -: 1355:    {
        -: 1356:        __get_db()->__iterator_copy(this, &__x);
        -: 1357:    }
        -: 1358:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1359:    __wrap_iter& operator=(const __wrap_iter& __x)
        -: 1360:    {
        -: 1361:        if (this != &__x)
        -: 1362:        {
        -: 1363:            __get_db()->__iterator_copy(this, &__x);
        -: 1364:            __i = __x.__i;
        -: 1365:        }
        -: 1366:        return *this;
        -: 1367:    }
        -: 1368:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1369:    ~__wrap_iter()
        -: 1370:    {
        -: 1371:        __get_db()->__erase_i(this);
        -: 1372:    }
        -: 1373:#endif
       46: 1374:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG reference operator*() const _NOEXCEPT
       46: 1374-block  0
        -: 1375:    {
        -: 1376:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1377:        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),
        -: 1378:                       "Attempted to dereference a non-dereferenceable iterator");
        -: 1379:#endif
       46: 1380:        return *__i;
       46: 1380-block  0
        -: 1381:    }
        -: 1382:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG pointer  operator->() const _NOEXCEPT
        -: 1383:    {
        -: 1384:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1385:        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),
        -: 1386:                       "Attempted to dereference a non-dereferenceable iterator");
        -: 1387:#endif
        -: 1388:        return (pointer)_VSTD::addressof(*__i);
        -: 1389:    }
       21: 1390:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator++() _NOEXCEPT
       21: 1390-block  0
        -: 1391:    {
        -: 1392:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1393:        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),
        -: 1394:                       "Attempted to increment non-incrementable iterator");
        -: 1395:#endif
       21: 1396:        ++__i;
       21: 1397:        return *this;
       21: 1397-block  0
        -: 1398:    }
        -: 1399:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator++(int) _NOEXCEPT
        -: 1400:        {__wrap_iter __tmp(*this); ++(*this); return __tmp;}
        -: 1401:
        -: 1402:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator--() _NOEXCEPT
        -: 1403:    {
        -: 1404:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1405:        _LIBCPP_ASSERT(__get_const_db()->__decrementable(this),
        -: 1406:                       "Attempted to decrement non-decrementable iterator");
        -: 1407:#endif
        -: 1408:        --__i;
        -: 1409:        return *this;
        -: 1410:    }
        -: 1411:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator--(int) _NOEXCEPT
        -: 1412:        {__wrap_iter __tmp(*this); --(*this); return __tmp;}
        -: 1413:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator+ (difference_type __n) const _NOEXCEPT
        -: 1414:        {__wrap_iter __w(*this); __w += __n; return __w;}
        -: 1415:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator+=(difference_type __n) _NOEXCEPT
        -: 1416:    {
        -: 1417:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1418:        _LIBCPP_ASSERT(__get_const_db()->__addable(this, __n),
        -: 1419:                   "Attempted to add/subtract iterator outside of valid range");
        -: 1420:#endif
        -: 1421:        __i += __n;
        -: 1422:        return *this;
        -: 1423:    }
        -: 1424:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator- (difference_type __n) const _NOEXCEPT
        -: 1425:        {return *this + (-__n);}
        -: 1426:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator-=(difference_type __n) _NOEXCEPT
        -: 1427:        {*this += -__n; return *this;}
        -: 1428:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG reference    operator[](difference_type __n) const _NOEXCEPT
        -: 1429:    {
        -: 1430:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1431:        _LIBCPP_ASSERT(__get_const_db()->__subscriptable(this, __n),
        -: 1432:                   "Attempted to subscript iterator outside of valid range");
        -: 1433:#endif
        -: 1434:        return __i[__n];
        -: 1435:    }
        -: 1436:
      272: 1437:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG iterator_type base() const _NOEXCEPT {return __i;}
      268: 1437-block  0
      268: 1437-block  1
        4: 1437-block  2
        4: 1437-block  3
        -: 1438:
        -: 1439:private:
        -: 1440:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1441:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter(const void* __p, iterator_type __x) : __i(__x)
        -: 1442:    {
        -: 1443:        __get_db()->__insert_ic(this, __p);
        -: 1444:    }
        -: 1445:#else
      356: 1446:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter(iterator_type __x) _NOEXCEPT : __i(__x) {}
      176: 1446-block  0
      176: 1446-block  1
      176: 1446-block  2
      176: 1446-block  3
        2: 1446-block  4
        2: 1446-block  5
        2: 1446-block  6
        2: 1446-block  7
        -: 1447:#endif
        -: 1448:
        -: 1449:    template <class _Up> friend class __wrap_iter;
        -: 1450:    template <class _CharT, class _Traits, class _Alloc> friend class basic_string;
        -: 1451:    template <class _Tp, class _Alloc> friend class _LIBCPP_TEMPLATE_VIS vector;
        -: 1452:    template <class _Tp, size_t> friend class _LIBCPP_TEMPLATE_VIS span;
        -: 1453:
        -: 1454:    template <class _Iter1, class _Iter2>
        -: 1455:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1456:    bool
        -: 1457:    operator==(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1458:
        -: 1459:    template <class _Iter1, class _Iter2>
        -: 1460:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1461:    bool
        -: 1462:    operator<(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1463:
        -: 1464:    template <class _Iter1, class _Iter2>
        -: 1465:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1466:    bool
        -: 1467:    operator!=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1468:
        -: 1469:    template <class _Iter1, class _Iter2>
        -: 1470:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1471:    bool
        -: 1472:    operator>(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1473:
        -: 1474:    template <class _Iter1, class _Iter2>
        -: 1475:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1476:    bool
        -: 1477:    operator>=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1478:
        -: 1479:    template <class _Iter1, class _Iter2>
        -: 1480:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1481:    bool
        -: 1482:    operator<=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1483:
        -: 1484:#ifndef _LIBCPP_CXX03_LANG
        -: 1485:    template <class _Iter1, class _Iter2>
        -: 1486:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1487:    auto
        -: 1488:    operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1489:    -> decltype(__x.base() - __y.base());
        -: 1490:#else
        -: 1491:    template <class _Iter1, class _Iter2>
        -: 1492:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1493:    typename __wrap_iter<_Iter1>::difference_type
        -: 1494:    operator-(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1495:#endif
        -: 1496:
        -: 1497:    template <class _Iter1>
        -: 1498:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1499:    __wrap_iter<_Iter1>
        -: 1500:    operator+(typename __wrap_iter<_Iter1>::difference_type, __wrap_iter<_Iter1>) _NOEXCEPT;
        -: 1501:
        -: 1502:    template <class _Ip, class _Op> friend _Op copy(_Ip, _Ip, _Op);
        -: 1503:    template <class _B1, class _B2> friend _B2 copy_backward(_B1, _B1, _B2);
        -: 1504:    template <class _Ip, class _Op> friend _Op move(_Ip, _Ip, _Op);
        -: 1505:    template <class _B1, class _B2> friend _B2 move_backward(_B1, _B1, _B2);
        -: 1506:
        -: 1507:#if _LIBCPP_DEBUG_LEVEL < 2
        -: 1508:    template <class _Tp>
        -: 1509:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1510:    typename enable_if
        -: 1511:    <
        -: 1512:        is_trivially_copy_assignable<_Tp>::value,
        -: 1513:        _Tp*
        -: 1514:    >::type
        -: 1515:    __unwrap_iter(__wrap_iter<_Tp*>);
        -: 1516:#else
        -: 1517:  template <class _Tp>
        -: 1518:  inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1519:  typename enable_if
        -: 1520:  <
        -: 1521:      is_trivially_copy_assignable<_Tp>::value,
        -: 1522:      __wrap_iter<_Tp*>
        -: 1523:  >::type
        -: 1524:  __unwrap_iter(__wrap_iter<_Tp*> __i);
        -: 1525:#endif
        -: 1526:};
        -: 1527:
        -: 1528:template <class _Iter1, class _Iter2>
        -: 1529:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1530:bool
      133: 1531:operator==(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
      133: 1531-block  0
        -: 1532:{
      133: 1533:    return __x.base() == __y.base();
      133: 1533-block  0
        -: 1534:}
        -: 1535:
        -: 1536:template <class _Iter1, class _Iter2>
        -: 1537:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1538:bool
        -: 1539:operator<(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1540:{
        -: 1541:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1542:    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),
        -: 1543:                   "Attempted to compare incomparable iterators");
        -: 1544:#endif
        -: 1545:    return __x.base() < __y.base();
        -: 1546:}
        -: 1547:
        -: 1548:template <class _Iter1, class _Iter2>
        -: 1549:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1550:bool
        -: 1551:operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1552:{
        -: 1553:    return !(__x == __y);
        -: 1554:}
        -: 1555:
        -: 1556:template <class _Iter1, class _Iter2>
        -: 1557:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1558:bool
        -: 1559:operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1560:{
        -: 1561:    return __y < __x;
        -: 1562:}
        -: 1563:
        -: 1564:template <class _Iter1, class _Iter2>
        -: 1565:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1566:bool
        -: 1567:operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1568:{
        -: 1569:    return !(__x < __y);
        -: 1570:}
        -: 1571:
        -: 1572:template <class _Iter1, class _Iter2>
        -: 1573:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1574:bool
        -: 1575:operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1576:{
        -: 1577:    return !(__y < __x);
        -: 1578:}
        -: 1579:
        -: 1580:template <class _Iter1>
        -: 1581:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1582:bool
      117: 1583:operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT
      117: 1583-block  0
        -: 1584:{
      117: 1585:    return !(__x == __y);
      117: 1585-block  0
        -: 1586:}
        -: 1587:
        -: 1588:template <class _Iter1>
        -: 1589:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1590:bool
        -: 1591:operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT
        -: 1592:{
        -: 1593:    return __y < __x;
        -: 1594:}
        -: 1595:
        -: 1596:template <class _Iter1>
        -: 1597:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1598:bool
        -: 1599:operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT
        -: 1600:{
        -: 1601:    return !(__x < __y);
        -: 1602:}
        -: 1603:
        -: 1604:template <class _Iter1>
        -: 1605:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1606:bool
        -: 1607:operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT
        -: 1608:{
        -: 1609:    return !(__y < __x);
        -: 1610:}
        -: 1611:
        -: 1612:#ifndef _LIBCPP_CXX03_LANG
        -: 1613:template <class _Iter1, class _Iter2>
        -: 1614:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1615:auto
        2: 1616:operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        2: 1616-block  0
        -: 1617:-> decltype(__x.base() - __y.base())
        -: 1618:{
        -: 1619:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1620:    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),
        -: 1621:                   "Attempted to subtract incompatible iterators");
        -: 1622:#endif
        2: 1623:    return __x.base() - __y.base();
        2: 1623-block  0
        -: 1624:}
        -: 1625:#else
        -: 1626:template <class _Iter1, class _Iter2>
        -: 1627:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1628:typename __wrap_iter<_Iter1>::difference_type
        -: 1629:operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1630:{
        -: 1631:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1632:    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),
        -: 1633:                   "Attempted to subtract incompatible iterators");
        -: 1634:#endif
        -: 1635:    return __x.base() - __y.base();
        -: 1636:}
        -: 1637:#endif
        -: 1638:
        -: 1639:template <class _Iter>
        -: 1640:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1641:__wrap_iter<_Iter>
        -: 1642:operator+(typename __wrap_iter<_Iter>::difference_type __n,
        -: 1643:          __wrap_iter<_Iter> __x) _NOEXCEPT
        -: 1644:{
        -: 1645:    __x += __n;
        -: 1646:    return __x;
        -: 1647:}
        -: 1648:
        -: 1649:template <class _Iter>
        -: 1650:struct __libcpp_is_trivial_iterator
        -: 1651:    : public _LIBCPP_BOOL_CONSTANT(is_pointer<_Iter>::value) {};
        -: 1652:
        -: 1653:template <class _Iter>
        -: 1654:struct __libcpp_is_trivial_iterator<move_iterator<_Iter> >
        -: 1655:    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {};
        -: 1656:
        -: 1657:template <class _Iter>
        -: 1658:struct __libcpp_is_trivial_iterator<reverse_iterator<_Iter> >
        -: 1659:    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {};
        -: 1660:
        -: 1661:template <class _Iter>
        -: 1662:struct __libcpp_is_trivial_iterator<__wrap_iter<_Iter> >
        -: 1663:    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {};
        -: 1664:
        -: 1665:
        -: 1666:template <class _Tp, size_t _Np>
        -: 1667:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1668:_Tp*
        -: 1669:begin(_Tp (&__array)[_Np])
        -: 1670:{
        -: 1671:    return __array;
        -: 1672:}
        -: 1673:
        -: 1674:template <class _Tp, size_t _Np>
        -: 1675:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1676:_Tp*
        -: 1677:end(_Tp (&__array)[_Np])
        -: 1678:{
        -: 1679:    return __array + _Np;
        -: 1680:}
        -: 1681:
        -: 1682:#if !defined(_LIBCPP_CXX03_LANG)
        -: 1683:
        -: 1684:template <class _Cp>
        -: 1685:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1686:auto
        -: 1687:begin(_Cp& __c) -> decltype(__c.begin())
        -: 1688:{
        -: 1689:    return __c.begin();
        -: 1690:}
        -: 1691:
        -: 1692:template <class _Cp>
        -: 1693:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1694:auto
        -: 1695:begin(const _Cp& __c) -> decltype(__c.begin())
        -: 1696:{
        -: 1697:    return __c.begin();
        -: 1698:}
        -: 1699:
        -: 1700:template <class _Cp>
        -: 1701:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1702:auto
        -: 1703:end(_Cp& __c) -> decltype(__c.end())
        -: 1704:{
        -: 1705:    return __c.end();
        -: 1706:}
        -: 1707:
        -: 1708:template <class _Cp>
        -: 1709:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1710:auto
        -: 1711:end(const _Cp& __c) -> decltype(__c.end())
        -: 1712:{
        -: 1713:    return __c.end();
        -: 1714:}
        -: 1715:
        -: 1716:#if _LIBCPP_STD_VER > 11
        -: 1717:
        -: 1718:template <class _Tp, size_t _Np>
        -: 1719:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1720:reverse_iterator<_Tp*> rbegin(_Tp (&__array)[_Np])
        -: 1721:{
        -: 1722:    return reverse_iterator<_Tp*>(__array + _Np);
        -: 1723:}
        -: 1724:
        -: 1725:template <class _Tp, size_t _Np>
        -: 1726:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1727:reverse_iterator<_Tp*> rend(_Tp (&__array)[_Np])
        -: 1728:{
        -: 1729:    return reverse_iterator<_Tp*>(__array);
        -: 1730:}
        -: 1731:
        -: 1732:template <class _Ep>
        -: 1733:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1734:reverse_iterator<const _Ep*> rbegin(initializer_list<_Ep> __il)
        -: 1735:{
        -: 1736:    return reverse_iterator<const _Ep*>(__il.end());
        -: 1737:}
        -: 1738:
        -: 1739:template <class _Ep>
        -: 1740:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1741:reverse_iterator<const _Ep*> rend(initializer_list<_Ep> __il)
        -: 1742:{
        -: 1743:    return reverse_iterator<const _Ep*>(__il.begin());
        -: 1744:}
        -: 1745:
        -: 1746:template <class _Cp>
        -: 1747:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1748:auto cbegin(const _Cp& __c) -> decltype(_VSTD::begin(__c))
        -: 1749:{
        -: 1750:    return _VSTD::begin(__c);
        -: 1751:}
        -: 1752:
        -: 1753:template <class _Cp>
        -: 1754:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1755:auto cend(const _Cp& __c) -> decltype(_VSTD::end(__c))
        -: 1756:{
        -: 1757:    return _VSTD::end(__c);
        -: 1758:}
        -: 1759:
        -: 1760:template <class _Cp>
        -: 1761:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1762:auto rbegin(_Cp& __c) -> decltype(__c.rbegin())
        -: 1763:{
        -: 1764:    return __c.rbegin();
        -: 1765:}
        -: 1766:
        -: 1767:template <class _Cp>
        -: 1768:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1769:auto rbegin(const _Cp& __c) -> decltype(__c.rbegin())
        -: 1770:{
        -: 1771:    return __c.rbegin();
        -: 1772:}
        -: 1773:
        -: 1774:template <class _Cp>
        -: 1775:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1776:auto rend(_Cp& __c) -> decltype(__c.rend())
        -: 1777:{
        -: 1778:    return __c.rend();
        -: 1779:}
        -: 1780:
        -: 1781:template <class _Cp>
        -: 1782:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1783:auto rend(const _Cp& __c) -> decltype(__c.rend())
        -: 1784:{
        -: 1785:    return __c.rend();
        -: 1786:}
        -: 1787:
        -: 1788:template <class _Cp>
        -: 1789:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1790:auto crbegin(const _Cp& __c) -> decltype(_VSTD::rbegin(__c))
        -: 1791:{
        -: 1792:    return _VSTD::rbegin(__c);
        -: 1793:}
        -: 1794:
        -: 1795:template <class _Cp>
        -: 1796:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1797:auto crend(const _Cp& __c) -> decltype(_VSTD::rend(__c))
        -: 1798:{
        -: 1799:    return _VSTD::rend(__c);
        -: 1800:}
        -: 1801:
        -: 1802:#endif
        -: 1803:
        -: 1804:
        -: 1805:#else  // defined(_LIBCPP_CXX03_LANG)
        -: 1806:
        -: 1807:template <class _Cp>
        -: 1808:_LIBCPP_INLINE_VISIBILITY
        -: 1809:typename _Cp::iterator
        -: 1810:begin(_Cp& __c)
        -: 1811:{
        -: 1812:    return __c.begin();
        -: 1813:}
        -: 1814:
        -: 1815:template <class _Cp>
        -: 1816:_LIBCPP_INLINE_VISIBILITY
        -: 1817:typename _Cp::const_iterator
        -: 1818:begin(const _Cp& __c)
        -: 1819:{
        -: 1820:    return __c.begin();
        -: 1821:}
        -: 1822:
        -: 1823:template <class _Cp>
        -: 1824:_LIBCPP_INLINE_VISIBILITY
        -: 1825:typename _Cp::iterator
        -: 1826:end(_Cp& __c)
        -: 1827:{
        -: 1828:    return __c.end();
        -: 1829:}
        -: 1830:
        -: 1831:template <class _Cp>
        -: 1832:_LIBCPP_INLINE_VISIBILITY
        -: 1833:typename _Cp::const_iterator
        -: 1834:end(const _Cp& __c)
        -: 1835:{
        -: 1836:    return __c.end();
        -: 1837:}
        -: 1838:
        -: 1839:#endif  // !defined(_LIBCPP_CXX03_LANG)
        -: 1840:
        -: 1841:#if _LIBCPP_STD_VER > 14
        -: 1842:
        -: 1843:// #if _LIBCPP_STD_VER > 11
        -: 1844:// template <>
        -: 1845:// struct _LIBCPP_TEMPLATE_VIS plus<void>
        -: 1846:// {
        -: 1847://     template <class _T1, class _T2>
        -: 1848://     _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1849://     auto operator()(_T1&& __t, _T2&& __u) const
        -: 1850://     _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) + _VSTD::forward<_T2>(__u)))
        -: 1851://     -> decltype        (_VSTD::forward<_T1>(__t) + _VSTD::forward<_T2>(__u))
        -: 1852://         { return        _VSTD::forward<_T1>(__t) + _VSTD::forward<_T2>(__u); }
        -: 1853://     typedef void is_transparent;
        -: 1854:// };
        -: 1855:// #endif
        -: 1856:
        -: 1857:template <class _Cont>
        -: 1858:_LIBCPP_INLINE_VISIBILITY
        -: 1859:constexpr auto size(const _Cont& __c)
        -: 1860:_NOEXCEPT_(noexcept(__c.size()))
        -: 1861:-> decltype        (__c.size())
        -: 1862:{ return            __c.size(); }
        -: 1863:
        -: 1864:template <class _Tp, size_t _Sz>
        -: 1865:_LIBCPP_INLINE_VISIBILITY
        -: 1866:constexpr size_t size(const _Tp (&)[_Sz]) noexcept { return _Sz; }
        -: 1867:
        -: 1868:#if _LIBCPP_STD_VER > 17
        -: 1869:template <class _Cont>
        -: 1870:_LIBCPP_INLINE_VISIBILITY
        -: 1871:constexpr auto ssize(const _Cont& __c)
        -: 1872:_NOEXCEPT_(noexcept(static_cast<common_type_t<ptrdiff_t, make_signed_t<decltype(__c.size())>>>(__c.size())))
        -: 1873:->                              common_type_t<ptrdiff_t, make_signed_t<decltype(__c.size())>>
        -: 1874:{ return            static_cast<common_type_t<ptrdiff_t, make_signed_t<decltype(__c.size())>>>(__c.size()); }
        -: 1875:
        -: 1876:template <class _Tp, ptrdiff_t _Sz>
        -: 1877:_LIBCPP_INLINE_VISIBILITY
        -: 1878:constexpr ptrdiff_t ssize(const _Tp (&)[_Sz]) noexcept { return _Sz; }
        -: 1879:#endif
        -: 1880:
        -: 1881:template <class _Cont>
        -: 1882:_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1883:constexpr auto empty(const _Cont& __c)
        -: 1884:_NOEXCEPT_(noexcept(__c.empty()))
        -: 1885:-> decltype        (__c.empty())
        -: 1886:{ return            __c.empty(); }
        -: 1887:
        -: 1888:template <class _Tp, size_t _Sz>
        -: 1889:_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1890:constexpr bool empty(const _Tp (&)[_Sz]) noexcept { return false; }
        -: 1891:
        -: 1892:template <class _Ep>
        -: 1893:_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1894:constexpr bool empty(initializer_list<_Ep> __il) noexcept { return __il.size() == 0; }
        -: 1895:
        -: 1896:template <class _Cont> constexpr
        -: 1897:_LIBCPP_INLINE_VISIBILITY
        -: 1898:auto data(_Cont& __c)
        -: 1899:_NOEXCEPT_(noexcept(__c.data()))
        -: 1900:-> decltype        (__c.data())
        -: 1901:{ return            __c.data(); }
        -: 1902:
        -: 1903:template <class _Cont> constexpr
        -: 1904:_LIBCPP_INLINE_VISIBILITY
        -: 1905:auto data(const _Cont& __c)
        -: 1906:_NOEXCEPT_(noexcept(__c.data()))
        -: 1907:-> decltype        (__c.data())
        -: 1908:{ return            __c.data(); }
        -: 1909:
        -: 1910:template <class _Tp, size_t _Sz>
        -: 1911:_LIBCPP_INLINE_VISIBILITY
        -: 1912:constexpr _Tp* data(_Tp (&__array)[_Sz]) noexcept { return __array; }
        -: 1913:
        -: 1914:template <class _Ep>
        -: 1915:_LIBCPP_INLINE_VISIBILITY
        -: 1916:constexpr const _Ep* data(initializer_list<_Ep> __il) noexcept { return __il.begin(); }
        -: 1917:#endif
        -: 1918:
        -: 1919:
        -: 1920:_LIBCPP_END_NAMESPACE_STD
        -: 1921:
        -: 1922:#endif  // _LIBCPP_ITERATOR
