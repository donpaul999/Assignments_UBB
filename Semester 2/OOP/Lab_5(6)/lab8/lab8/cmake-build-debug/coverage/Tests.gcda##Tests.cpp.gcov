        -:    0:Source:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/Tests.cpp
        -:    0:Graph:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/Tests.gcno
        -:    0:Data:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/Tests.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "Tests.h"
        -:    2:#include <iostream>
        1:    3:void Tests::runAllTests()
        1:    3-block  0
        -:    4:{	
        1:    5:	runMovieTests();
        1:    6:	runDynamicArrayTests();
        1:    7:	runRepositoryTests();
        1:    8:	runAdminServiceTests();
        1:    9:	runUserServiceTests();
        1:   10:    runFileRepositoryTests();
        1:   11:}
        1:   11-block  0
        -:   12:
        1:   13:void Tests::runMovieTests()
        1:   13-block  0
        -:   14:{
        1:   15:	Movie_AnyMovie_MovieCreated();
        1:   16:	setterGetterTitle_AnyMovie_CorrectTitle();
        1:   17:    setterGetterGenre_AnyMovie_CorrectGenre();
        1:   18:    setterGetterYearOfRelease_AnyMovie_CorrectYearOfRelease();
        1:   19:    setterGetterNumberOfLikes_AnyMovie_CorrectNumberOfLikes();
        1:   20:    setterGetterTrailer_AnyMovie_CorrectTrailer();
        1:   21:    explode_AnyString_CorrectTokenizedString();
        1:   22:    getOutputForm_AnyMovie_CorrectOutputForm();
        1:   23:    operatorOutput_AnyMovie_CorrectWrite();
        1:   24:    operatorInput_AnyMovie_CorrectRead();
        1:   25:    operatorDifferent_AnyMovies_DifferentMovies();
        1:   26:}
        1:   26-block  0
        -:   27:
        -:   28:
        1:   29:void Tests::runDynamicArrayTests()
        1:   29-block  0
        -:   30:{
        1:   31:	 DynamicVector_AnyVector_VectorCreated();
        1:   32:	 resizeElementsList_AnyVector_VectorResized();
        1:   33:	 searchElementInList_ElementInList_ReturnsTrue();
        1:   34:	 searchElementInList_ElementNotInList_ReturnsFalse();
        1:   35:	 append_ElementNotInList_ElementAppended();
        1:   36:	 append_AnyElement_ElementAppended();
        1:   37:	 remove_ElementInTheList_ElementRemoved();
        1:   38:	 remove_ElementNotInTheList_SizeRemainsTheSame();
        1:   39:	 update_ElementInTheList_ElementUpdated();
        1:   40:	 operatorPosition_ValidPosition_ElementReturned();
        1:   41:	 operatorPosition_InvalidPosition_ExceptionReturned();
        1:   42:	 size_AnyVector_CorrectSize();
        1:   43:	 operatorEqual_AnyVector_CorrectAssignment();
        1:   44:}
        1:   44-block  0
        -:   45:
        1:   46:void Tests::runRepositoryTests()
        1:   46-block  0
        -:   47:{
        1:   48:	 Repository_AnyRepository_RepositoryCreated();
        1:   49:	 addMovie_MovieNotInTheList_ReturnsOne();
        1:   50:	 addMovie_MovieInTheList_ReturnsMinusOne();
        1:   51:	 deleteMovie_MovieInTheList_ReturnsOne();
        1:   52:	 deleteMovie_MovieNotInTheList_ReturnsMinusOne();
        1:   53:	 update_MovieInTheList_ReturnsOne();
        1:   54:	 update_MovieNotInTheList_ReturnsMinusOne();
        1:   55:	 getNumberOfMovies_AnyRepository_CorrectNumberOfMovies();
        1:   56:	 getMovieAtPosition_ValidPosition_ReturnsMovie();
        1:   57:	 getMovieAtPosition_InValidPosition_ReturnsException();
        1:   58:	 writeMoviesToFile_AnyMovie_AddSucessful();
        1:   59:     loadMoviesFromFile_AnyMovie_LoadSucessful();
        1:   60:}
        1:   60-block  0
        -:   61:
        1:   62:void Tests::runAdminServiceTests()
        1:   62-block  0
        -:   63:{
        1:   64:	 AdminService_AnyAdminService_AdminServiceCreated();
        1:   65:	 adminAddMovie_MovieNotInTheList_ReturnsOne();
        1:   66:	 adminAddMovie_MovieInTheList_ReturnsMinusOne();
        1:   67:	 adminDeleteMovie_MovieInTheList_ReturnsOne();
        1:   68:	 adminDeleteMovie_MovieNotInTheList_ReturnsMinusOne();
        1:   69:	 adminUpdate_MovieInTheList_ReturnsOne();
        1:   70:	 adminUpdate_MovieNotInTheList_ReturnsMinusOne();
        1:   71:	 adminGetMovieList_AnyAdminService_CorrectMovies();
        1:   72:     explode_AnyString_TokenizedString();
        1:   73:     changeRepositoryFileName_AnyFileName_FileNameChanged();
        1:   74:}
        1:   74-block  0
        -:   75:
        1:   76:void Tests::runUserServiceTests()
        1:   76-block  0
        -:   77:{
        1:   78:	UserService_AnyUserService_UserServiceCreated();
        1:   79:	userGetMovieList_AnyUserService_CorrectMovies();
        1:   80:    userGetWatchList_AnyUserService_CorrectWatchList();
        1:   81:    listMoviesByGenre_NoMovieWithGenre_ReturnsMinusOne();
        1:   82:    listMoviesByGenre_ExistsMovieWithGenre_ReturnsOne();
        1:   83:    addMovieToWatchList_ExistsMovieInWatchLists_ReturnsMinusOne();
        1:   84:    addMovieToWatchList_MovieNotInWatchLists_ReturnsOne();
        1:   85:    addMovieToWatchListByTitle_NoMovieInMovieLists_ReturnsMinusOne();
        1:   86:    addMovieToWatchListByTitle_MovieInMovieLists_ReturnsOne();
        1:   87:    getWatchListLength_AnyUserService_CorrectLength();
        1:   88:    goToNextMovieByGenre_AnyUserService_CorrectPosition();
        1:   89:    goToNextMovieByGenre_AnyUserService_FirstPosition();
        1:   90:}
        1:   90-block  0
        -:   91:
        1:   92:void Tests::runFileRepositoryTests(){
        1:   92-block  0
        1:   93:    FileRepository_AnyRepository_FileRepositoryCreated();
        1:   94:    writeMoviesToFile_AnyMovie_AddSucessfulFileRepository();
        1:   95:    loadMoviesFromFile_AnyMovie_LoadSucessfulFileRepository();
        1:   96:    addMovie_MovieNotInTheList_ReturnsOneFileRepository();
        1:   97:    addMovie_MovieInTheList_ReturnsMinusOneFileRepository();
        1:   98:    deleteMovie_MovieInTheList_ReturnsOneFileRepository();
        1:   99:    deleteMovie_MovieNotInTheList_ReturnsMinusOneFileRepository();
        1:  100:    update_MovieInTheList_ReturnsOneFileRepository();
        1:  101:    update_MovieNotInTheList_ReturnsMinusOneFileRepository();
        1:  102:    getMovieAtPosition_ValidPosition_ReturnsMovieFileRepository();
        1:  103:    getMovieAtPosition_ValidPosition_ReturnsMovieFileRepository();
        1:  104:    getMoviesByGenre_ValidGenre_ReturnsListOfMovies();
        1:  105:    getMoviesByGenre_InvalidGenre_ReturnsEmptyList();
        1:  106:    getNumberOfMovies_AnyRepository_CorrectNumberOfMoviesFileRepository();
        1:  107:}
        1:  107-block  0
        -:  108:
        1:  109:void Tests::Movie_AnyMovie_MovieCreated()
        1:  109-block  0
        -:  110:{
        1:  111:	Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  111-block  0
        1:  111-block  1
        1:  111-block  2
    $$$$$:  111-block  3
    $$$$$:  111-block  4
    $$$$$:  111-block  5
    $$$$$:  111-block  6
        1:  112:	assert(movieUsed.getTitle() == "Test");
        1:  112-block  0
        1:  112-block  1
    $$$$$:  112-block  2
    $$$$$:  112-block  3
    $$$$$:  112-block  4
        1:  112-block  5
        1:  113:	assert(movieUsed.getGenre() == "CategoryTest");
        1:  113-block  0
        1:  113-block  1
    $$$$$:  113-block  2
    $$$$$:  113-block  3
    $$$$$:  113-block  4
        1:  113-block  5
        1:  114:	assert(movieUsed.getYearOfRelease() == 123);
        1:  114-block  0
        1:  114-block  1
    $$$$$:  114-block  2
    $$$$$:  114-block  3
    $$$$$:  114-block  4
        1:  114-block  5
        1:  115:	assert(movieUsed.getNumberOfLikes() == 456);
        1:  115-block  0
        1:  115-block  1
    $$$$$:  115-block  2
    $$$$$:  115-block  3
    $$$$$:  115-block  4
        1:  115-block  5
        1:  116:	assert(movieUsed.getTrailer() == "TrailerTest");
        1:  116-block  0
        1:  116-block  1
    $$$$$:  116-block  2
    $$$$$:  116-block  3
    $$$$$:  116-block  4
        1:  116-block  5
        -:  117:
        1:  118:}
    $$$$$:  118-block  0
    $$$$$:  118-block  1
    $$$$$:  118-block  2
        1:  118-block  3
        -:  119:
        1:  120:void Tests::setterGetterTitle_AnyMovie_CorrectTitle(){
        1:  120-block  0
        1:  121:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  121-block  0
        1:  121-block  1
        1:  121-block  2
    $$$$$:  121-block  3
    $$$$$:  121-block  4
    $$$$$:  121-block  5
    $$$$$:  121-block  6
        1:  122:    movieUsed.setTitle("Test2");
        1:  122-block  0
        1:  122-block  1
    $$$$$:  122-block  2
        1:  123:    assert(movieUsed.getTitle() == "Test2");
        1:  123-block  0
        1:  123-block  1
    $$$$$:  123-block  2
    $$$$$:  123-block  3
    $$$$$:  123-block  4
        1:  123-block  5
        1:  124:}
    $$$$$:  124-block  0
    $$$$$:  124-block  1
    $$$$$:  124-block  2
        1:  124-block  3
    $$$$$:  124-block  4
        1:  125:void Tests::setterGetterGenre_AnyMovie_CorrectGenre(){
        1:  125-block  0
        1:  126:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  126-block  0
        1:  126-block  1
        1:  126-block  2
    $$$$$:  126-block  3
    $$$$$:  126-block  4
    $$$$$:  126-block  5
    $$$$$:  126-block  6
        1:  127:    movieUsed.setGenre("Test2");
        1:  127-block  0
        1:  127-block  1
    $$$$$:  127-block  2
        1:  128:    assert(movieUsed.getGenre() == "Test2");
        1:  128-block  0
        1:  128-block  1
    $$$$$:  128-block  2
    $$$$$:  128-block  3
    $$$$$:  128-block  4
        1:  128-block  5
        1:  129:}
    $$$$$:  129-block  0
    $$$$$:  129-block  1
    $$$$$:  129-block  2
        1:  129-block  3
    $$$$$:  129-block  4
        1:  130:void Tests::setterGetterYearOfRelease_AnyMovie_CorrectYearOfRelease(){
        1:  130-block  0
        1:  131:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  131-block  0
        1:  131-block  1
        1:  131-block  2
    $$$$$:  131-block  3
    $$$$$:  131-block  4
    $$$$$:  131-block  5
    $$$$$:  131-block  6
        1:  132:    movieUsed.setYearOfRelease(2005);
        1:  132-block  0
        1:  133:    assert(movieUsed.getYearOfRelease() == 2005);
        1:  133-block  0
        1:  133-block  1
    $$$$$:  133-block  2
    $$$$$:  133-block  3
    $$$$$:  133-block  4
        1:  133-block  5
        1:  134:}
    $$$$$:  134-block  0
    $$$$$:  134-block  1
    $$$$$:  134-block  2
        1:  134-block  3
        1:  135:void Tests::setterGetterNumberOfLikes_AnyMovie_CorrectNumberOfLikes(){
        1:  135-block  0
        1:  136:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  136-block  0
        1:  136-block  1
        1:  136-block  2
    $$$$$:  136-block  3
    $$$$$:  136-block  4
    $$$$$:  136-block  5
    $$$$$:  136-block  6
        1:  137:    movieUsed.setNumberOfLikes(2005);
        1:  137-block  0
        1:  138:    assert(movieUsed.getNumberOfLikes() == 2005);
        1:  138-block  0
        1:  138-block  1
    $$$$$:  138-block  2
    $$$$$:  138-block  3
    $$$$$:  138-block  4
        1:  138-block  5
        1:  139:}
    $$$$$:  139-block  0
    $$$$$:  139-block  1
    $$$$$:  139-block  2
        1:  139-block  3
        1:  140:void Tests::setterGetterTrailer_AnyMovie_CorrectTrailer(){
        1:  140-block  0
        1:  141:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  141-block  0
        1:  141-block  1
        1:  141-block  2
    $$$$$:  141-block  3
    $$$$$:  141-block  4
    $$$$$:  141-block  5
    $$$$$:  141-block  6
        1:  142:    movieUsed.setTrailer("Test2");
        1:  142-block  0
        1:  142-block  1
    $$$$$:  142-block  2
        1:  143:    assert(movieUsed.getTrailer() == "Test2");
        1:  143-block  0
        1:  143-block  1
    $$$$$:  143-block  2
    $$$$$:  143-block  3
    $$$$$:  143-block  4
        1:  143-block  5
        1:  144:}
    $$$$$:  144-block  0
    $$$$$:  144-block  1
    $$$$$:  144-block  2
        1:  144-block  3
    $$$$$:  144-block  4
        -:  145:
        1:  146:void Tests::explode_AnyString_CorrectTokenizedString(){
        1:  146-block  0
        1:  147:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  147-block  0
        1:  147-block  1
        1:  147-block  2
    $$$$$:  147-block  3
    $$$$$:  147-block  4
    $$$$$:  147-block  5
    $$$$$:  147-block  6
        1:  148:    std::string stringUsed = "we,separate,string";
        1:  148-block  0
        1:  149:    std::vector<std::string> tokenizedString = movieUsed.explode(stringUsed, ",");
        1:  149-block  0
        1:  149-block  1
    $$$$$:  149-block  2
        1:  150:    assert(tokenizedString.size() == 3);
        1:  150-block  0
    $$$$$:  150-block  1
    $$$$$:  150-block  2
    $$$$$:  150-block  3
        1:  150-block  4
        1:  151:    assert(tokenizedString[0] == "we");
        1:  151-block  0
    $$$$$:  151-block  1
    $$$$$:  151-block  2
    $$$$$:  151-block  3
        1:  151-block  4
        1:  152:}
    $$$$$:  152-block  0
    $$$$$:  152-block  1
    $$$$$:  152-block  2
    $$$$$:  152-block  3
    $$$$$:  152-block  4
        1:  152-block  5
    $$$$$:  152-block  6
    $$$$$:  152-block  7
        -:  153:
        1:  154:void Tests::getOutputForm_AnyMovie_CorrectOutputForm(){
        1:  154-block  0
        1:  155:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  155-block  0
        1:  155-block  1
        1:  155-block  2
    $$$$$:  155-block  3
    $$$$$:  155-block  4
    $$$$$:  155-block  5
    $$$$$:  155-block  6
        1:  156:    std::string stringUsed = movieUsed.getOutputForm();
        1:  156-block  0
        1:  157:    assert(stringUsed == "Title: Test, Genre: CategoryTest, Year of Release: 123, Likes: 456, Trailer: TrailerTest;");
        1:  157-block  0
    $$$$$:  157-block  1
    $$$$$:  157-block  2
    $$$$$:  157-block  3
        1:  157-block  4
        1:  158:}
    $$$$$:  158-block  0
    $$$$$:  158-block  1
    $$$$$:  158-block  2
    $$$$$:  158-block  3
        1:  158-block  4
    $$$$$:  158-block  5
        -:  159:
        1:  160:void Tests::operatorInput_AnyMovie_CorrectRead() {
        1:  160-block  0
        1:  161:    std::ifstream fin("TestFileJops.txt");
        1:  162:    Movie movieUsed;
        1:  162-block  0
        1:  162-block  1
        1:  162-block  2
        1:  162-block  3
    $$$$$:  162-block  4
    $$$$$:  162-block  5
    $$$$$:  162-block  6
    $$$$$:  162-block  7
    $$$$$:  162-block  8
    $$$$$:  162-block  9
        1:  163:    fin >> movieUsed;
        1:  163-block  0
        1:  164:    assert(movieUsed.getTitle() == "Test");
        1:  164-block  0
        1:  164-block  1
    $$$$$:  164-block  2
    $$$$$:  164-block  3
    $$$$$:  164-block  4
        1:  164-block  5
        1:  165:    assert(movieUsed.getGenre() == "CategoryTest");
        1:  165-block  0
        1:  165-block  1
    $$$$$:  165-block  2
    $$$$$:  165-block  3
    $$$$$:  165-block  4
        1:  165-block  5
        1:  166:    assert(movieUsed.getYearOfRelease() == 123);
        1:  166-block  0
        1:  166-block  1
    $$$$$:  166-block  2
    $$$$$:  166-block  3
    $$$$$:  166-block  4
        1:  166-block  5
        1:  167:    assert(movieUsed.getNumberOfLikes() == 456);
        1:  167-block  0
        1:  167-block  1
    $$$$$:  167-block  2
    $$$$$:  167-block  3
    $$$$$:  167-block  4
        1:  167-block  5
        1:  168:    assert(movieUsed.getTrailer() == "TrailerTest");
        1:  168-block  0
        1:  168-block  1
    $$$$$:  168-block  2
    $$$$$:  168-block  3
    $$$$$:  168-block  4
        1:  168-block  5
        1:  169:    fin.close();
        1:  169-block  0
        1:  170:}
    $$$$$:  170-block  0
        1:  170-block  1
    $$$$$:  170-block  2
    $$$$$:  170-block  3
        -:  171:
        1:  172:void Tests::operatorOutput_AnyMovie_CorrectWrite(){
        1:  172-block  0
        1:  173:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  173-block  0
        1:  173-block  1
        1:  173-block  2
    $$$$$:  173-block  3
    $$$$$:  173-block  4
    $$$$$:  173-block  5
    $$$$$:  173-block  6
        1:  174:    std::ofstream fout("TestFileJops.txt");
        1:  174-block  0
        1:  175:    fout << movieUsed;
        1:  175-block  0
        1:  176:    fout.close();
        1:  176-block  0
        1:  177:    std::ifstream fin("TestFileJops.txt");
        1:  177-block  0
        1:  178:    fin >> movieUsed;
        1:  178-block  0
        1:  179:    assert(movieUsed.getTitle() == "Test");
        1:  179-block  0
        1:  179-block  1
    $$$$$:  179-block  2
    $$$$$:  179-block  3
    $$$$$:  179-block  4
        1:  179-block  5
        1:  180:    assert(movieUsed.getGenre() == "CategoryTest");
        1:  180-block  0
        1:  180-block  1
    $$$$$:  180-block  2
    $$$$$:  180-block  3
    $$$$$:  180-block  4
        1:  180-block  5
        1:  181:    assert(movieUsed.getYearOfRelease() == 123);
        1:  181-block  0
        1:  181-block  1
    $$$$$:  181-block  2
    $$$$$:  181-block  3
    $$$$$:  181-block  4
        1:  181-block  5
        1:  182:    assert(movieUsed.getNumberOfLikes() == 456);
        1:  182-block  0
        1:  182-block  1
    $$$$$:  182-block  2
    $$$$$:  182-block  3
    $$$$$:  182-block  4
        1:  182-block  5
        1:  183:    assert(movieUsed.getTrailer() == "TrailerTest");
        1:  183-block  0
        1:  183-block  1
    $$$$$:  183-block  2
    $$$$$:  183-block  3
    $$$$$:  183-block  4
        1:  183-block  5
        1:  184:    fin.close();
        1:  184-block  0
        1:  185:}
    $$$$$:  185-block  0
    $$$$$:  185-block  1
    $$$$$:  185-block  2
    $$$$$:  185-block  3
    $$$$$:  185-block  4
        1:  185-block  5
    $$$$$:  185-block  6
    $$$$$:  185-block  7
        -:  186:
        1:  187:void Tests::operatorDifferent_AnyMovies_DifferentMovies(){
        1:  187-block  0
        1:  188:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  188-block  0
        1:  188-block  1
        1:  188-block  2
    $$$$$:  188-block  3
    $$$$$:  188-block  4
    $$$$$:  188-block  5
    $$$$$:  188-block  6
        1:  189:    Movie secondMovieUsed = { "Test2", "CategoryTest", 123, 456, "TrailerTest" };
        1:  189-block  0
        1:  189-block  1
        1:  189-block  2
        1:  189-block  3
    $$$$$:  189-block  4
    $$$$$:  189-block  5
    $$$$$:  189-block  6
        1:  190:    assert(movieUsed != secondMovieUsed);
        1:  190-block  0
        1:  190-block  1
    $$$$$:  190-block  2
    $$$$$:  190-block  3
    $$$$$:  190-block  4
        1:  190-block  5
        1:  191:}
    $$$$$:  191-block  0
    $$$$$:  191-block  1
    $$$$$:  191-block  2
    $$$$$:  191-block  3
    $$$$$:  191-block  4
    $$$$$:  191-block  5
        1:  191-block  6
    $$$$$:  191-block  7
        -:  192:
        1:  193:void Tests::DynamicVector_AnyVector_VectorCreated()
        1:  193-block  0
        -:  194:{
        1:  195:	DynamicVector<int> vectorUsed{ 5 };
        1:  196:	assert(vectorUsed.capacity() == 5);
        1:  196-block  0
        1:  196-block  1
    $$$$$:  196-block  2
    $$$$$:  196-block  3
    $$$$$:  196-block  4
        1:  196-block  5
        -:  197:
        1:  198:}
    $$$$$:  198-block  0
        1:  198-block  1
    $$$$$:  198-block  2
        -:  199:
        1:  200:void Tests::resizeElementsList_AnyVector_VectorResized()
        1:  200-block  0
        -:  201:{
        1:  202:	DynamicVector<int> vectorUsed{ 2 };
        1:  203:	vectorUsed.append(1);
        1:  203-block  0
        1:  204:    vectorUsed.append(2);
        1:  204-block  0
        1:  205:    vectorUsed.append(3);
        1:  205-block  0
        1:  206:	assert(vectorUsed.capacity() == 4);
        1:  206-block  0
        1:  206-block  1
    $$$$$:  206-block  2
    $$$$$:  206-block  3
    $$$$$:  206-block  4
        1:  206-block  5
        1:  207:}
    $$$$$:  207-block  0
        1:  207-block  1
    $$$$$:  207-block  2
        -:  208:
        1:  209:void Tests::searchElementInList_ElementInList_ReturnsTrue()
        1:  209-block  0
        -:  210:{
        1:  211:	DynamicVector<int> vectorUsed{ 2 };
        1:  212:	int firstElementToAdd = 1, secondElementToAdd = 5;
        1:  213:	vectorUsed.append(firstElementToAdd);
        1:  213-block  0
        1:  214:	vectorUsed.append(secondElementToAdd);
        1:  214-block  0
        1:  215:	assert(vectorUsed.searchElementInList(5) == 1);
        1:  215-block  0
        1:  215-block  1
    $$$$$:  215-block  2
    $$$$$:  215-block  3
    $$$$$:  215-block  4
        1:  215-block  5
        1:  216:}
    $$$$$:  216-block  0
        1:  216-block  1
    $$$$$:  216-block  2
        -:  217:
        1:  218:void Tests::searchElementInList_ElementNotInList_ReturnsFalse()
        1:  218-block  0
        -:  219:{
        1:  220:	DynamicVector<int> vectorUsed{ 2 };
        1:  221:	int firstElementToAdd = 1, secondElementToAdd = 4;
        1:  222:    vectorUsed.append(firstElementToAdd);
        1:  222-block  0
        1:  223:	vectorUsed.append(secondElementToAdd);
        1:  223-block  0
        1:  224:	assert(vectorUsed.searchElementInList(5) == -1);
        1:  224-block  0
        1:  224-block  1
    $$$$$:  224-block  2
    $$$$$:  224-block  3
    $$$$$:  224-block  4
        1:  224-block  5
        1:  225:}
    $$$$$:  225-block  0
        1:  225-block  1
    $$$$$:  225-block  2
        -:  226:
        1:  227:void Tests::append_ElementNotInList_ElementAppended()
        1:  227-block  0
        -:  228:{
        1:  229:	DynamicVector<int> vectorUsed{ 2 };
        1:  230:	int firstElementToAdd = 1, secondElementToAdd = 5;
        1:  231:	vectorUsed.append(firstElementToAdd);
        1:  231-block  0
        1:  232:	vectorUsed.append(secondElementToAdd);
        1:  232-block  0
        1:  233:	assert(vectorUsed.searchElementInList(5) == 1);
        1:  233-block  0
        1:  233-block  1
    $$$$$:  233-block  2
    $$$$$:  233-block  3
    $$$$$:  233-block  4
        1:  233-block  5
        1:  234:}
    $$$$$:  234-block  0
        1:  234-block  1
    $$$$$:  234-block  2
        -:  235:
        1:  236:void Tests::append_AnyElement_ElementAppended()
        1:  236-block  0
        -:  237:{
        1:  238:	DynamicVector<int> vectorUsed{ 2 };
        1:  239:	vectorUsed.append(1);
        1:  239-block  0
        1:  240:	vectorUsed.append(1);
        1:  240-block  0
        1:  241:	assert(vectorUsed.size() == 2);
        1:  241-block  0
        1:  241-block  1
    $$$$$:  241-block  2
    $$$$$:  241-block  3
    $$$$$:  241-block  4
        1:  241-block  5
        1:  242:}
    $$$$$:  242-block  0
        1:  242-block  1
    $$$$$:  242-block  2
        -:  243:
        1:  244:void Tests::remove_ElementInTheList_ElementRemoved()
        1:  244-block  0
        -:  245:{
        1:  246:	DynamicVector<int> vectorUsed{ 2 };
        1:  247:    vectorUsed.append(1);
        1:  247-block  0
        1:  248:    vectorUsed.append(2);
        1:  248-block  0
        1:  249:    vectorUsed.append(3);
        1:  249-block  0
        1:  250:	vectorUsed.remove(1);
        1:  250-block  0
        1:  251:	assert(vectorUsed.searchElementInList(1) == -1);
        1:  251-block  0
        1:  251-block  1
    $$$$$:  251-block  2
    $$$$$:  251-block  3
    $$$$$:  251-block  4
        1:  251-block  5
        -:  252:
        1:  253:}
    $$$$$:  253-block  0
        1:  253-block  1
    $$$$$:  253-block  2
        -:  254:
        1:  255:void Tests::remove_ElementNotInTheList_SizeRemainsTheSame()
        1:  255-block  0
        -:  256:{
        1:  257:	DynamicVector<int> vectorUsed{ 2 };
        1:  258:	vectorUsed.append(1);
        1:  258-block  0
        1:  259:	vectorUsed.remove(2);
        1:  259-block  0
        1:  260:	assert(vectorUsed.size() == 1);
        1:  260-block  0
        1:  260-block  1
    $$$$$:  260-block  2
    $$$$$:  260-block  3
    $$$$$:  260-block  4
        1:  260-block  5
        1:  261:}
    $$$$$:  261-block  0
        1:  261-block  1
    $$$$$:  261-block  2
        -:  262:
        1:  263:void Tests::update_ElementInTheList_ElementUpdated()
        1:  263-block  0
        -:  264:{
        1:  265:	DynamicVector<int> vectorUsed{ 2 };
        1:  266:	vectorUsed.append(1);
        1:  266-block  0
        1:  267:	vectorUsed.update(1, 2);
        1:  267-block  0
        1:  268:	assert(vectorUsed.searchElementInList(1) == -1);
        1:  268-block  0
        1:  268-block  1
    $$$$$:  268-block  2
    $$$$$:  268-block  3
    $$$$$:  268-block  4
        1:  268-block  5
        1:  269:	assert(vectorUsed.searchElementInList(2) == 0);
        1:  269-block  0
        1:  269-block  1
    $$$$$:  269-block  2
    $$$$$:  269-block  3
    $$$$$:  269-block  4
        1:  269-block  5
        1:  270:}
    $$$$$:  270-block  0
        1:  270-block  1
    $$$$$:  270-block  2
        -:  271:
        1:  272:void Tests::operatorPosition_ValidPosition_ElementReturned()
        1:  272-block  0
        -:  273:{
        1:  274:	DynamicVector<int> vectorUsed{ 2 };
        1:  275:	vectorUsed.append(5);
        1:  275-block  0
        1:  276:	assert(vectorUsed[0] == 5);
        1:  276-block  0
        1:  276-block  1
    $$$$$:  276-block  2
    $$$$$:  276-block  3
    $$$$$:  276-block  4
        1:  276-block  5
        1:  277:}
    $$$$$:  277-block  0
        1:  277-block  1
    $$$$$:  277-block  2
        -:  278:
        1:  279:void Tests::operatorPosition_InvalidPosition_ExceptionReturned()
        1:  279-block  0
        -:  280:{
        1:  281:	DynamicVector<int> vectorUsed{ 2 };
        1:  282:	vectorUsed.append(5);
        1:  282-block  0
        -:  283:	try {
        1:  284:		int x = vectorUsed[1];
        1:  284-block  0
        1:  285:	}
    $$$$$:  285-block  0
        1:  285-block  1
        1:  286:	catch(std::exception Exception){
        -:  287:		assert(true);
        1:  288:	}
        1:  288-block  0
        1:  288-block  1
        2:  289:}
    $$$$$:  289-block  0
        1:  289-block  1
        1:  289-block  2
    $$$$$:  289-block  3
    $$$$$:  289-block  4
        -:  290:
        1:  291:void Tests::size_AnyVector_CorrectSize()
        1:  291-block  0
        -:  292:{
        1:  293:	DynamicVector<int> vectorUsed{ 2 };
        1:  294:	vectorUsed.append(1);
        1:  294-block  0
        1:  295:	vectorUsed.append(2);
        1:  295-block  0
        1:  296:	assert(vectorUsed.size() == 2);
        1:  296-block  0
        1:  296-block  1
    $$$$$:  296-block  2
    $$$$$:  296-block  3
    $$$$$:  296-block  4
        1:  296-block  5
        1:  297:}
    $$$$$:  297-block  0
        1:  297-block  1
    $$$$$:  297-block  2
        -:  298:
        1:  299:void Tests::operatorEqual_AnyVector_CorrectAssignment()
        1:  299-block  0
        -:  300:{
        1:  301:	DynamicVector<int> firstVectorUsed{ 2 };
        1:  302:	firstVectorUsed.append(1);
        1:  302-block  0
        1:  303:	firstVectorUsed.append(2);
        1:  303-block  0
        1:  304:	DynamicVector<int> secondVectorUsed{ 1 };
        1:  304-block  0
        1:  305:	secondVectorUsed = firstVectorUsed;
        1:  305-block  0
        1:  306:	assert(secondVectorUsed.searchElementInList(2) == 1);
        1:  306-block  0
        1:  306-block  1
    $$$$$:  306-block  2
    $$$$$:  306-block  3
    $$$$$:  306-block  4
        1:  306-block  5
        1:  307:}
    $$$$$:  307-block  0
    $$$$$:  307-block  1
        1:  307-block  2
    $$$$$:  307-block  3
    $$$$$:  307-block  4
        -:  308:
        1:  309:void Tests::Repository_AnyRepository_RepositoryCreated()
        1:  309-block  0
        -:  310:{
        1:  311:	Repository repositoryUsed{"TestFileJops.txt"};
        1:  311-block  0
    $$$$$:  311-block  1
    $$$$$:  311-block  2
        1:  312:}
        1:  312-block  0
        -:  313:
        1:  314:void Tests::writeMoviesToFile_AnyMovie_AddSucessful()
        1:  314-block  0
        -:  315:{
        1:  316:	Repository repositoryUsed{"TestFileJops.txt"};
        1:  316-block  0
    $$$$$:  316-block  1
    $$$$$:  316-block  2
        1:  317:	Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  317-block  0
        1:  317-block  1
        1:  317-block  2
        1:  317-block  3
    $$$$$:  317-block  4
    $$$$$:  317-block  5
    $$$$$:  317-block  6
        1:  318:	repositoryUsed.addMovie(movieUsed);
        1:  318-block  0
        1:  319:	repositoryUsed.writeMoviesToFile();
        1:  319-block  0
        1:  320:    repositoryUsed.loadMoviesFromFile();
        1:  320-block  0
        1:  321:    assert(repositoryUsed.getNumberOfMovies() == 1);
        1:  321-block  0
        1:  321-block  1
    $$$$$:  321-block  2
    $$$$$:  321-block  3
    $$$$$:  321-block  4
        1:  321-block  5
        1:  322:}
    $$$$$:  322-block  0
    $$$$$:  322-block  1
    $$$$$:  322-block  2
    $$$$$:  322-block  3
        1:  322-block  4
    $$$$$:  322-block  5
        -:  323:
        1:  324:void Tests::loadMoviesFromFile_AnyMovie_LoadSucessful()
        1:  324-block  0
        -:  325:{
        1:  326:	Repository repositoryUsed{"TestFileJops.txt"};
        1:  326-block  0
    $$$$$:  326-block  1
    $$$$$:  326-block  2
        1:  327:	repositoryUsed.loadMoviesFromFile();
        1:  327-block  0
        1:  328:	assert(repositoryUsed.getNumberOfMovies() == 1);
        1:  328-block  0
        1:  328-block  1
    $$$$$:  328-block  2
    $$$$$:  328-block  3
    $$$$$:  328-block  4
        1:  328-block  5
        1:  329:}
    $$$$$:  329-block  0
        1:  329-block  1
        -:  330:
        -:  331:
        1:  332:void Tests::addMovie_MovieNotInTheList_ReturnsOne()
        1:  332-block  0
        -:  333:{
        1:  334:	Repository* repositoryUsed = new Repository();
        1:  334-block  0
        1:  334-block  1
    $$$$$:  334-block  2
    $$$$$:  334-block  3
    $$$$$:  334-block  4
    $$$$$:  334-block  5
    $$$$$:  334-block  6
    $$$$$:  334-block  7
        1:  335:	Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  335-block  0
        1:  335-block  1
        1:  335-block  2
    $$$$$:  335-block  3
    $$$$$:  335-block  4
    $$$$$:  335-block  5
        1:  336:	assert(repositoryUsed->addMovie(movieUsed) == 1);
        1:  336-block  0
        1:  336-block  1
    $$$$$:  336-block  2
    $$$$$:  336-block  3
    $$$$$:  336-block  4
        1:  336-block  5
        1:  337:}
    $$$$$:  337-block  0
    $$$$$:  337-block  1
    $$$$$:  337-block  2
        1:  337-block  3
        -:  338:
        1:  339:void Tests::addMovie_MovieInTheList_ReturnsMinusOne()
        1:  339-block  0
        -:  340:{
        1:  341:	Repository* repositoryUsed = new Repository();
        1:  341-block  0
        1:  341-block  1
    $$$$$:  341-block  2
    $$$$$:  341-block  3
    $$$$$:  341-block  4
    $$$$$:  341-block  5
    $$$$$:  341-block  6
    $$$$$:  341-block  7
        1:  342:	Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  342-block  0
        1:  342-block  1
        1:  342-block  2
    $$$$$:  342-block  3
    $$$$$:  342-block  4
    $$$$$:  342-block  5
        1:  343:	repositoryUsed->addMovie(movieUsed);
        1:  343-block  0
        1:  344:	assert(repositoryUsed->addMovie(movieUsed) == -1);
        1:  344-block  0
        1:  344-block  1
    $$$$$:  344-block  2
    $$$$$:  344-block  3
    $$$$$:  344-block  4
        1:  344-block  5
        1:  345:}
    $$$$$:  345-block  0
    $$$$$:  345-block  1
    $$$$$:  345-block  2
        1:  345-block  3
        -:  346:
        1:  347:void Tests::deleteMovie_MovieInTheList_ReturnsOne()
        1:  347-block  0
        -:  348:{
        1:  349:	Repository* repositoryUsed = new Repository();
        1:  349-block  0
        1:  349-block  1
    $$$$$:  349-block  2
    $$$$$:  349-block  3
    $$$$$:  349-block  4
    $$$$$:  349-block  5
    $$$$$:  349-block  6
    $$$$$:  349-block  7
        1:  350:	Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  350-block  0
        1:  350-block  1
        1:  350-block  2
    $$$$$:  350-block  3
    $$$$$:  350-block  4
    $$$$$:  350-block  5
        1:  351:	repositoryUsed->addMovie(movieUsed);
        1:  351-block  0
        1:  352:	assert(repositoryUsed->deleteMovie(movieUsed) == 1);
        1:  352-block  0
        1:  352-block  1
    $$$$$:  352-block  2
    $$$$$:  352-block  3
    $$$$$:  352-block  4
        1:  352-block  5
        1:  353:}
    $$$$$:  353-block  0
    $$$$$:  353-block  1
    $$$$$:  353-block  2
        1:  353-block  3
        -:  354:
        1:  355:void Tests::deleteMovie_MovieNotInTheList_ReturnsMinusOne()
        1:  355-block  0
        -:  356:{
        1:  357:	Repository* repositoryUsed = new Repository();
        1:  357-block  0
        1:  357-block  1
    $$$$$:  357-block  2
    $$$$$:  357-block  3
    $$$$$:  357-block  4
    $$$$$:  357-block  5
    $$$$$:  357-block  6
    $$$$$:  357-block  7
        1:  358:	Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  358-block  0
        1:  358-block  1
        1:  358-block  2
    $$$$$:  358-block  3
    $$$$$:  358-block  4
    $$$$$:  358-block  5
        1:  359:	assert(repositoryUsed->deleteMovie(movieUsed) == -1);
        1:  359-block  0
        1:  359-block  1
    $$$$$:  359-block  2
    $$$$$:  359-block  3
    $$$$$:  359-block  4
        1:  359-block  5
        1:  360:}
    $$$$$:  360-block  0
    $$$$$:  360-block  1
    $$$$$:  360-block  2
        1:  360-block  3
        -:  361:
        1:  362:void Tests::update_MovieInTheList_ReturnsOne()
        1:  362-block  0
        -:  363:{
        1:  364:	Repository* repositoryUsed = new Repository();
        1:  364-block  0
        1:  364-block  1
    $$$$$:  364-block  2
    $$$$$:  364-block  3
    $$$$$:  364-block  4
    $$$$$:  364-block  5
    $$$$$:  364-block  6
    $$$$$:  364-block  7
        1:  365:	Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  365-block  0
        1:  365-block  1
        1:  365-block  2
    $$$$$:  365-block  3
    $$$$$:  365-block  4
    $$$$$:  365-block  5
        1:  366:	repositoryUsed->addMovie(movieUsed);
        1:  366-block  0
        1:  367:	assert(repositoryUsed->updateMovie(movieUsed) == 1);
        1:  367-block  0
        1:  367-block  1
    $$$$$:  367-block  2
    $$$$$:  367-block  3
    $$$$$:  367-block  4
        1:  367-block  5
        1:  368:}
    $$$$$:  368-block  0
    $$$$$:  368-block  1
    $$$$$:  368-block  2
        1:  368-block  3
        -:  369:
        1:  370:void Tests::update_MovieNotInTheList_ReturnsMinusOne()
        1:  370-block  0
        -:  371:{
        1:  372:	Repository* repositoryUsed = new Repository();
        1:  372-block  0
        1:  372-block  1
    $$$$$:  372-block  2
    $$$$$:  372-block  3
    $$$$$:  372-block  4
    $$$$$:  372-block  5
    $$$$$:  372-block  6
    $$$$$:  372-block  7
        1:  373:	Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  373-block  0
        1:  373-block  1
        1:  373-block  2
    $$$$$:  373-block  3
    $$$$$:  373-block  4
    $$$$$:  373-block  5
        1:  374:	assert(repositoryUsed->updateMovie(movieUsed) == -1);
        1:  374-block  0
        1:  374-block  1
    $$$$$:  374-block  2
    $$$$$:  374-block  3
    $$$$$:  374-block  4
        1:  374-block  5
        1:  375:}
    $$$$$:  375-block  0
    $$$$$:  375-block  1
    $$$$$:  375-block  2
        1:  375-block  3
        -:  376:
        1:  377:void Tests::getMovieAtPosition_ValidPosition_ReturnsMovie()
        1:  377-block  0
        -:  378:{
        1:  379:	Repository* repositoryUsed = new Repository();
        1:  379-block  0
        1:  379-block  1
    $$$$$:  379-block  2
    $$$$$:  379-block  3
    $$$$$:  379-block  4
    $$$$$:  379-block  5
    $$$$$:  379-block  6
    $$$$$:  379-block  7
        1:  380:	Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  380-block  0
        1:  380-block  1
        1:  380-block  2
    $$$$$:  380-block  3
    $$$$$:  380-block  4
    $$$$$:  380-block  5
        1:  381:	repositoryUsed->addMovie(movieUsed);
        1:  381-block  0
        1:  382:	assert(repositoryUsed->getMovieAtPosition(0) == movieUsed);
        1:  382-block  0
        1:  382-block  1
        1:  382-block  2
    $$$$$:  382-block  3
    $$$$$:  382-block  4
    $$$$$:  382-block  5
    $$$$$:  382-block  6
        1:  382-block  7
        1:  383:}
    $$$$$:  383-block  0
    $$$$$:  383-block  1
    $$$$$:  383-block  2
        1:  383-block  3
    $$$$$:  383-block  4
        -:  384:
        1:  385:void Tests::getMovieAtPosition_InValidPosition_ReturnsException()
        1:  385-block  0
        -:  386:{
        1:  387:	Repository* repositoryUsed = new Repository();
        1:  387-block  0
        1:  387-block  1
    $$$$$:  387-block  2
    $$$$$:  387-block  3
    $$$$$:  387-block  4
    $$$$$:  387-block  5
    $$$$$:  387-block  6
    $$$$$:  387-block  7
        1:  388:	Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  388-block  0
        1:  388-block  1
        1:  388-block  2
    $$$$$:  388-block  3
    $$$$$:  388-block  4
    $$$$$:  388-block  5
        1:  389:	repositoryUsed->addMovie(movieUsed);
        1:  389-block  0
        -:  390:	try {
        1:  391:		Movie movieUsed = repositoryUsed->getMovieAtPosition(-1);
        1:  391-block  0
        1:  392:	}
    $$$$$:  392-block  0
        1:  392-block  1
        1:  393:	catch (std::exception Exception) {
        -:  394:		assert(true);
        1:  395:	}
        1:  395-block  0
        1:  395-block  1
        2:  396:}
    $$$$$:  396-block  0
    $$$$$:  396-block  1
    $$$$$:  396-block  2
        1:  396-block  3
        1:  396-block  4
    $$$$$:  396-block  5
        -:  397:
        1:  398:void Tests::getNumberOfMovies_AnyRepository_CorrectNumberOfMovies()
        1:  398-block  0
        -:  399:{
        1:  400:	Repository* repositoryUsed = new Repository();
        1:  400-block  0
        1:  400-block  1
    $$$$$:  400-block  2
    $$$$$:  400-block  3
    $$$$$:  400-block  4
    $$$$$:  400-block  5
    $$$$$:  400-block  6
    $$$$$:  400-block  7
        1:  401:	Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  401-block  0
        1:  401-block  1
        1:  401-block  2
    $$$$$:  401-block  3
    $$$$$:  401-block  4
    $$$$$:  401-block  5
        1:  402:	repositoryUsed->addMovie(movieUsed);
        1:  402-block  0
        1:  403:	assert(repositoryUsed->getNumberOfMovies() == 1);
        1:  403-block  0
        1:  403-block  1
    $$$$$:  403-block  2
    $$$$$:  403-block  3
    $$$$$:  403-block  4
        1:  403-block  5
        1:  404:}
    $$$$$:  404-block  0
    $$$$$:  404-block  1
    $$$$$:  404-block  2
        1:  404-block  3
        -:  405:
        1:  406:void Tests::AdminService_AnyAdminService_AdminServiceCreated(){
        1:  406-block  0
        1:  407:    FileRepository repositoryUsed{"inputFile.in"};
        1:  407-block  0
    $$$$$:  407-block  1
    $$$$$:  407-block  2
        1:  408:    AdminService adminServiceUsed{ repositoryUsed };
        1:  408-block  0
        1:  409:}
        1:  409-block  0
    $$$$$:  409-block  1
        -:  410:
        1:  411:void Tests::adminAddMovie_MovieNotInTheList_ReturnsOne()
        1:  411-block  0
        -:  412:{
        1:  413:    FileRepository repositoryUsed{"inputFile.in"};
        1:  413-block  0
    $$$$$:  413-block  1
    $$$$$:  413-block  2
        1:  414:    AdminService adminServiceUsed{ repositoryUsed };
        1:  414-block  0
        1:  415:	assert(adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest") == 1);
        1:  415-block  0
        1:  415-block  1
        1:  415-block  2
        1:  415-block  3
        1:  415-block  4
    $$$$$:  415-block  5
    $$$$$:  415-block  6
    $$$$$:  415-block  7
    $$$$$:  415-block  8
        1:  415-block  9
    $$$$$:  415-block 10
    $$$$$:  415-block 11
        1:  416:    adminServiceUsed.adminDeleteMovie("Test");
        1:  416-block  0
        1:  416-block  1
    $$$$$:  416-block  2
        1:  417:}
    $$$$$:  417-block  0
    $$$$$:  417-block  1
    $$$$$:  417-block  2
        1:  417-block  3
    $$$$$:  417-block  4
        -:  418:
        1:  419:void Tests::adminAddMovie_MovieInTheList_ReturnsMinusOne()
        1:  419-block  0
        -:  420:{
        1:  421:    FileRepository repositoryUsed{"inputFile.in"};
        1:  421-block  0
    $$$$$:  421-block  1
    $$$$$:  421-block  2
        1:  422:    AdminService adminServiceUsed{ repositoryUsed };
        1:  422-block  0
        1:  423:	adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  423-block  0
        1:  423-block  1
        1:  423-block  2
        1:  423-block  3
    $$$$$:  423-block  4
    $$$$$:  423-block  5
    $$$$$:  423-block  6
        1:  424:	assert(adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest") == -1);
        1:  424-block  0
        1:  424-block  1
        1:  424-block  2
        1:  424-block  3
        1:  424-block  4
    $$$$$:  424-block  5
    $$$$$:  424-block  6
    $$$$$:  424-block  7
    $$$$$:  424-block  8
        1:  424-block  9
    $$$$$:  424-block 10
    $$$$$:  424-block 11
        1:  425:	adminServiceUsed.adminDeleteMovie("Test");
        1:  425-block  0
        1:  425-block  1
    $$$$$:  425-block  2
        1:  426:}
    $$$$$:  426-block  0
    $$$$$:  426-block  1
    $$$$$:  426-block  2
    $$$$$:  426-block  3
    $$$$$:  426-block  4
        1:  426-block  5
    $$$$$:  426-block  6
        -:  427:
        1:  428:void Tests::explode_AnyString_TokenizedString()
        1:  428-block  0
        -:  429:{
        1:  430:    FileRepository repositoryUsed{"inputFile.in"};
        1:  430-block  0
    $$$$$:  430-block  1
    $$$$$:  430-block  2
        1:  431:    AdminService adminServiceUsed{ repositoryUsed };
        1:  431-block  0
        1:  432:    std::string stringUsed = "we,separate,string";
        1:  432-block  0
        1:  433:    std::vector<std::string> tokenizedString = adminServiceUsed.explode(stringUsed, ',');
        1:  433-block  0
        1:  434:    assert(tokenizedString.size() == 3);
        1:  434-block  0
    $$$$$:  434-block  1
    $$$$$:  434-block  2
    $$$$$:  434-block  3
        1:  434-block  4
        1:  435:    assert(tokenizedString[0] == "we");
        1:  435-block  0
    $$$$$:  435-block  1
    $$$$$:  435-block  2
    $$$$$:  435-block  3
        1:  435-block  4
        1:  436:}
    $$$$$:  436-block  0
    $$$$$:  436-block  1
    $$$$$:  436-block  2
        1:  436-block  3
    $$$$$:  436-block  4
    $$$$$:  436-block  5
        -:  437:
        1:  438:void Tests::changeRepositoryFileName_AnyFileName_FileNameChanged()
        1:  438-block  0
        -:  439:{
        1:  440:    FileRepository repositoryUsed{"inputFile.in"};
        1:  440-block  0
    $$$$$:  440-block  1
    $$$$$:  440-block  2
        1:  441:    AdminService adminServiceUsed{ repositoryUsed };
        1:  441-block  0
        1:  442:    assert(adminServiceUsed.changeRepositoryFileName("newTextFile.txt") == 1);
        1:  442-block  0
        1:  442-block  1
        1:  442-block  2
    $$$$$:  442-block  3
    $$$$$:  442-block  4
    $$$$$:  442-block  5
    $$$$$:  442-block  6
        1:  442-block  7
        1:  443:}
    $$$$$:  443-block  0
        1:  443-block  1
    $$$$$:  443-block  2
        -:  444:
        1:  445:void Tests::adminDeleteMovie_MovieInTheList_ReturnsOne()
        1:  445-block  0
        -:  446:{
        1:  447:    FileRepository repositoryUsed{"inputFile.in"};
        1:  447-block  0
    $$$$$:  447-block  1
    $$$$$:  447-block  2
        1:  448:    AdminService adminServiceUsed{ repositoryUsed };
        1:  448-block  0
        1:  449:	adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  449-block  0
        1:  449-block  1
        1:  449-block  2
        1:  449-block  3
    $$$$$:  449-block  4
    $$$$$:  449-block  5
    $$$$$:  449-block  6
        1:  450:	assert(adminServiceUsed.adminDeleteMovie("Test") == 1);
        1:  450-block  0
        1:  450-block  1
        1:  450-block  2
    $$$$$:  450-block  3
    $$$$$:  450-block  4
    $$$$$:  450-block  5
    $$$$$:  450-block  6
        1:  450-block  7
        1:  451:}
    $$$$$:  451-block  0
    $$$$$:  451-block  1
    $$$$$:  451-block  2
        1:  451-block  3
    $$$$$:  451-block  4
        -:  452:
        1:  453:void Tests::adminDeleteMovie_MovieNotInTheList_ReturnsMinusOne()
        1:  453-block  0
        -:  454:{
        1:  455:    FileRepository repositoryUsed{"inputFile.in"};
        1:  455-block  0
    $$$$$:  455-block  1
    $$$$$:  455-block  2
        1:  456:    AdminService adminServiceUsed{ repositoryUsed };
        1:  456-block  0
        1:  457:	assert(adminServiceUsed.adminDeleteMovie("Test") == -1);
        1:  457-block  0
        1:  457-block  1
        1:  457-block  2
    $$$$$:  457-block  3
    $$$$$:  457-block  4
    $$$$$:  457-block  5
    $$$$$:  457-block  6
        1:  457-block  7
        1:  458:}
    $$$$$:  458-block  0
        1:  458-block  1
    $$$$$:  458-block  2
        -:  459:
        1:  460:void Tests::adminUpdate_MovieInTheList_ReturnsOne()
        1:  460-block  0
        -:  461:{
        1:  462:    FileRepository repositoryUsed{"inputFile.in"};
        1:  462-block  0
    $$$$$:  462-block  1
    $$$$$:  462-block  2
        1:  463:    AdminService adminServiceUsed{ repositoryUsed };
        1:  463-block  0
        1:  464:	adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  464-block  0
        1:  464-block  1
        1:  464-block  2
        1:  464-block  3
    $$$$$:  464-block  4
    $$$$$:  464-block  5
    $$$$$:  464-block  6
        1:  465:	assert(adminServiceUsed.adminUpdateMovie("Test", "CategoryTest", 123, 456, "TrailerTest") == 1);
        1:  465-block  0
        1:  465-block  1
        1:  465-block  2
        1:  465-block  3
        1:  465-block  4
    $$$$$:  465-block  5
    $$$$$:  465-block  6
    $$$$$:  465-block  7
    $$$$$:  465-block  8
        1:  465-block  9
    $$$$$:  465-block 10
    $$$$$:  465-block 11
        1:  466:    adminServiceUsed.adminDeleteMovie("Test");
        1:  466-block  0
        1:  466-block  1
    $$$$$:  466-block  2
        -:  467:
        1:  468:}
    $$$$$:  468-block  0
    $$$$$:  468-block  1
    $$$$$:  468-block  2
    $$$$$:  468-block  3
    $$$$$:  468-block  4
        1:  468-block  5
    $$$$$:  468-block  6
        -:  469:
        1:  470:void Tests::adminUpdate_MovieNotInTheList_ReturnsMinusOne()
        1:  470-block  0
        -:  471:{
        1:  472:    FileRepository repositoryUsed{"inputFile.in"};
        1:  472-block  0
    $$$$$:  472-block  1
    $$$$$:  472-block  2
        1:  473:    AdminService adminServiceUsed{ repositoryUsed };
        1:  473-block  0
        1:  474:	assert(adminServiceUsed.adminUpdateMovie("Test", "CategoryTest", 123, 456, "TrailerTest") == -1);
        1:  474-block  0
        1:  474-block  1
        1:  474-block  2
        1:  474-block  3
        1:  474-block  4
    $$$$$:  474-block  5
    $$$$$:  474-block  6
    $$$$$:  474-block  7
    $$$$$:  474-block  8
        1:  474-block  9
    $$$$$:  474-block 10
    $$$$$:  474-block 11
        1:  475:}
    $$$$$:  475-block  0
    $$$$$:  475-block  1
    $$$$$:  475-block  2
        1:  475-block  3
    $$$$$:  475-block  4
        -:  476:
        1:  477:void Tests::adminGetMovieList_AnyAdminService_CorrectMovies()
        1:  477-block  0
        -:  478:{
        1:  479:    FileRepository repositoryUsed{"inputFile.in"};
        1:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
        1:  480:    AdminService adminServiceUsed{ repositoryUsed };
        1:  480-block  0
        1:  481:	adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  481-block  0
        1:  481-block  1
        1:  481-block  2
        1:  481-block  3
    $$$$$:  481-block  4
    $$$$$:  481-block  5
    $$$$$:  481-block  6
        1:  482:	std::vector<Movie>listOfMovies = adminServiceUsed.adminGetMovieList();
        1:  482-block  0
        1:  483:	assert(listOfMovies.size() == 1);
        1:  483-block  0
    $$$$$:  483-block  1
    $$$$$:  483-block  2
    $$$$$:  483-block  3
        1:  483-block  4
        1:  484:    adminServiceUsed.adminDeleteMovie("Test");
        1:  484-block  0
        1:  484-block  1
    $$$$$:  484-block  2
        1:  485:}
    $$$$$:  485-block  0
    $$$$$:  485-block  1
    $$$$$:  485-block  2
    $$$$$:  485-block  3
        1:  485-block  4
    $$$$$:  485-block  5
    $$$$$:  485-block  6
        -:  486:
        1:  487:void Tests::UserService_AnyUserService_UserServiceCreated()
        1:  487-block  0
        -:  488:{
        1:  489:    FileRepository repositoryUsed{"inputFile.in"};
        1:  489-block  0
    $$$$$:  489-block  1
    $$$$$:  489-block  2
        1:  490:    UserService userServiceUsed {repositoryUsed };
        1:  490-block  0
        1:  491:}
        1:  491-block  0
    $$$$$:  491-block  1
        -:  492:
        1:  493:void Tests::userGetMovieList_AnyUserService_CorrectMovies()
        1:  493-block  0
        -:  494:{
        1:  495:    FileRepository repositoryUsed{"inputFile.in"};
        1:  495-block  0
    $$$$$:  495-block  1
    $$$$$:  495-block  2
        1:  496:	UserService userServiceUsed {repositoryUsed };
        1:  496-block  0
        1:  497:    AdminService adminServiceUsed{ repositoryUsed };
        1:  497-block  0
        1:  498:    adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  498-block  0
        1:  498-block  1
        1:  498-block  2
        1:  498-block  3
    $$$$$:  498-block  4
    $$$$$:  498-block  5
    $$$$$:  498-block  6
        1:  499:	std::vector<Movie>listOfMovies = userServiceUsed.userGetMovieList();
        1:  499-block  0
        1:  500:	assert(listOfMovies.size() == 1);
        1:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
    $$$$$:  500-block  3
        1:  500-block  4
        1:  501:    adminServiceUsed.adminDeleteMovie("Test");
        1:  501-block  0
        1:  501-block  1
    $$$$$:  501-block  2
        1:  502:}
    $$$$$:  502-block  0
    $$$$$:  502-block  1
    $$$$$:  502-block  2
    $$$$$:  502-block  3
    $$$$$:  502-block  4
        1:  502-block  5
    $$$$$:  502-block  6
    $$$$$:  502-block  7
    $$$$$:  502-block  8
        -:  503:
        1:  504:void Tests::userGetWatchList_AnyUserService_CorrectWatchList()
        1:  504-block  0
        -:  505:{
        1:  506:    FileRepository repositoryUsed{"inputFile.in"};
        1:  506-block  0
    $$$$$:  506-block  1
    $$$$$:  506-block  2
        1:  507:    UserService userServiceUsed {repositoryUsed };
        1:  507-block  0
        1:  508:	AdminService adminServiceUsed { repositoryUsed };
        1:  508-block  0
        1:  509:	adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  509-block  0
        1:  509-block  1
        1:  509-block  2
        1:  509-block  3
    $$$$$:  509-block  4
    $$$$$:  509-block  5
    $$$$$:  509-block  6
        1:  510:	userServiceUsed.listMoviesByGenre("");
        1:  510-block  0
        1:  510-block  1
    $$$$$:  510-block  2
        1:  511:	userServiceUsed.addMovieToWatchList();
        1:  511-block  0
        1:  512:	std::vector<Movie>listOfMovies = userServiceUsed.userGetWatchList();
        1:  512-block  0
        1:  513:	assert(listOfMovies.size() == 1);
        1:  513-block  0
    $$$$$:  513-block  1
    $$$$$:  513-block  2
    $$$$$:  513-block  3
        1:  513-block  4
        1:  514:    adminServiceUsed.adminDeleteMovie("Test");
        1:  514-block  0
        1:  514-block  1
    $$$$$:  514-block  2
        -:  515:
        1:  516:}
    $$$$$:  516-block  0
    $$$$$:  516-block  1
    $$$$$:  516-block  2
    $$$$$:  516-block  3
    $$$$$:  516-block  4
        1:  516-block  5
    $$$$$:  516-block  6
    $$$$$:  516-block  7
    $$$$$:  516-block  8
        -:  517:
        1:  518:void Tests::listMoviesByGenre_NoMovieWithGenre_ReturnsMinusOne()
        1:  518-block  0
        -:  519:{
        1:  520:    FileRepository repositoryUsed{"inputFile.in"};
        1:  520-block  0
    $$$$$:  520-block  1
    $$$$$:  520-block  2
        1:  521:    UserService userServiceUsed {repositoryUsed };
        1:  521-block  0
        1:  522:    AdminService adminServiceUsed { repositoryUsed };
        1:  522-block  0
        1:  523:	adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  523-block  0
        1:  523-block  1
        1:  523-block  2
        1:  523-block  3
    $$$$$:  523-block  4
    $$$$$:  523-block  5
    $$$$$:  523-block  6
        1:  524:	assert(userServiceUsed.listMoviesByGenre("Comedy") == -1);
        1:  524-block  0
        1:  524-block  1
        1:  524-block  2
    $$$$$:  524-block  3
    $$$$$:  524-block  4
    $$$$$:  524-block  5
    $$$$$:  524-block  6
        1:  524-block  7
        1:  525:    adminServiceUsed.adminDeleteMovie("Test");
        1:  525-block  0
        1:  525-block  1
    $$$$$:  525-block  2
        -:  526:
        1:  527:}
    $$$$$:  527-block  0
    $$$$$:  527-block  1
    $$$$$:  527-block  2
    $$$$$:  527-block  3
        1:  527-block  4
    $$$$$:  527-block  5
    $$$$$:  527-block  6
        -:  528:
        1:  529:void Tests::listMoviesByGenre_ExistsMovieWithGenre_ReturnsOne()
        1:  529-block  0
        -:  530:{
        1:  531:    FileRepository repositoryUsed{"inputFile.in"};
        1:  531-block  0
    $$$$$:  531-block  1
    $$$$$:  531-block  2
        1:  532:    UserService userServiceUsed {repositoryUsed };
        1:  532-block  0
        1:  533:    AdminService adminServiceUsed { repositoryUsed };
        1:  533-block  0
        1:  534:	adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  534-block  0
        1:  534-block  1
        1:  534-block  2
        1:  534-block  3
    $$$$$:  534-block  4
    $$$$$:  534-block  5
    $$$$$:  534-block  6
        1:  535:	assert(userServiceUsed.listMoviesByGenre("CategoryTest") == 1);
        1:  535-block  0
        1:  535-block  1
        1:  535-block  2
    $$$$$:  535-block  3
    $$$$$:  535-block  4
    $$$$$:  535-block  5
    $$$$$:  535-block  6
        1:  535-block  7
        1:  536:    adminServiceUsed.adminDeleteMovie("Test");
        1:  536-block  0
        1:  536-block  1
    $$$$$:  536-block  2
        -:  537:
        -:  538:
        1:  539:}
    $$$$$:  539-block  0
    $$$$$:  539-block  1
    $$$$$:  539-block  2
    $$$$$:  539-block  3
        1:  539-block  4
    $$$$$:  539-block  5
    $$$$$:  539-block  6
        -:  540:
        1:  541:void Tests::addMovieToWatchList_ExistsMovieInWatchLists_ReturnsMinusOne()
        1:  541-block  0
        -:  542:{
        1:  543:    FileRepository repositoryUsed{"inputFile.in"};
        1:  543-block  0
    $$$$$:  543-block  1
    $$$$$:  543-block  2
        1:  544:    UserService userServiceUsed {repositoryUsed };
        1:  544-block  0
        1:  545:    AdminService adminServiceUsed { repositoryUsed };
        1:  545-block  0
        1:  546:	adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  546-block  0
        1:  546-block  1
        1:  546-block  2
        1:  546-block  3
    $$$$$:  546-block  4
    $$$$$:  546-block  5
    $$$$$:  546-block  6
        1:  547:	userServiceUsed.listMoviesByGenre("CategoryTest");
        1:  547-block  0
        1:  547-block  1
    $$$$$:  547-block  2
        1:  548:	userServiceUsed.addMovieToWatchList();
        1:  548-block  0
        1:  549:	assert(userServiceUsed.addMovieToWatchList() == -1);
        1:  549-block  0
        1:  549-block  1
    $$$$$:  549-block  2
    $$$$$:  549-block  3
    $$$$$:  549-block  4
        1:  549-block  5
        1:  550:    adminServiceUsed.adminDeleteMovie("Test");
        1:  550-block  0
        1:  550-block  1
    $$$$$:  550-block  2
        -:  551:
        1:  552:}
    $$$$$:  552-block  0
    $$$$$:  552-block  1
    $$$$$:  552-block  2
    $$$$$:  552-block  3
        1:  552-block  4
    $$$$$:  552-block  5
    $$$$$:  552-block  6
        -:  553:
        1:  554:void Tests::addMovieToWatchList_MovieNotInWatchLists_ReturnsOne()
        1:  554-block  0
        -:  555:{
        1:  556:    FileRepository repositoryUsed{"inputFile.in"};
        1:  556-block  0
    $$$$$:  556-block  1
    $$$$$:  556-block  2
        1:  557:    UserService userServiceUsed {repositoryUsed };
        1:  557-block  0
        1:  558:    AdminService adminServiceUsed { repositoryUsed };
        1:  558-block  0
        1:  559:	adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  559-block  0
        1:  559-block  1
        1:  559-block  2
        1:  559-block  3
    $$$$$:  559-block  4
    $$$$$:  559-block  5
    $$$$$:  559-block  6
        1:  560:	userServiceUsed.listMoviesByGenre("CategoryTest");
        1:  560-block  0
        1:  560-block  1
    $$$$$:  560-block  2
        1:  561:	assert(userServiceUsed.addMovieToWatchList() == 1);
        1:  561-block  0
        1:  561-block  1
    $$$$$:  561-block  2
    $$$$$:  561-block  3
    $$$$$:  561-block  4
        1:  561-block  5
        1:  562:    adminServiceUsed.adminDeleteMovie("Test");
        1:  562-block  0
        1:  562-block  1
    $$$$$:  562-block  2
        -:  563:
        1:  564:}
    $$$$$:  564-block  0
    $$$$$:  564-block  1
    $$$$$:  564-block  2
    $$$$$:  564-block  3
        1:  564-block  4
    $$$$$:  564-block  5
    $$$$$:  564-block  6
        -:  565:
        1:  566:void Tests::addMovieToWatchListByTitle_NoMovieInMovieLists_ReturnsMinusOne()
        1:  566-block  0
        -:  567:{
        1:  568:    FileRepository repositoryUsed{"inputFile.in"};
        1:  568-block  0
    $$$$$:  568-block  1
    $$$$$:  568-block  2
        1:  569:    UserService userServiceUsed {repositoryUsed };
        1:  569-block  0
        1:  570:    AdminService adminServiceUsed { repositoryUsed };
        1:  570-block  0
        1:  571:	adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  571-block  0
        1:  571-block  1
        1:  571-block  2
        1:  571-block  3
    $$$$$:  571-block  4
    $$$$$:  571-block  5
    $$$$$:  571-block  6
        1:  572:	assert(userServiceUsed.addMovieToWatchListByTitle("Hangover") == -1);
        1:  572-block  0
        1:  572-block  1
        1:  572-block  2
    $$$$$:  572-block  3
    $$$$$:  572-block  4
    $$$$$:  572-block  5
    $$$$$:  572-block  6
        1:  572-block  7
        1:  573:    adminServiceUsed.adminDeleteMovie("Test");
        1:  573-block  0
        1:  573-block  1
    $$$$$:  573-block  2
        -:  574:
        1:  575:}
    $$$$$:  575-block  0
    $$$$$:  575-block  1
    $$$$$:  575-block  2
    $$$$$:  575-block  3
        1:  575-block  4
    $$$$$:  575-block  5
    $$$$$:  575-block  6
        -:  576:
        1:  577:void Tests::addMovieToWatchListByTitle_MovieInMovieLists_ReturnsOne()
        1:  577-block  0
        -:  578:{
        1:  579:    FileRepository repositoryUsed{"inputFile.in"};
        1:  579-block  0
    $$$$$:  579-block  1
    $$$$$:  579-block  2
        1:  580:    UserService userServiceUsed {repositoryUsed };
        1:  580-block  0
        1:  581:    AdminService adminServiceUsed { repositoryUsed };
        1:  581-block  0
        1:  582:	adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  582-block  0
        1:  582-block  1
        1:  582-block  2
        1:  582-block  3
    $$$$$:  582-block  4
    $$$$$:  582-block  5
    $$$$$:  582-block  6
        1:  583:	assert(userServiceUsed.addMovieToWatchListByTitle("Test") == 1);
        1:  583-block  0
        1:  583-block  1
        1:  583-block  2
    $$$$$:  583-block  3
    $$$$$:  583-block  4
    $$$$$:  583-block  5
    $$$$$:  583-block  6
        1:  583-block  7
        1:  584:    adminServiceUsed.adminDeleteMovie("Test");
        1:  584-block  0
        1:  584-block  1
    $$$$$:  584-block  2
        -:  585:
        1:  586:}
    $$$$$:  586-block  0
    $$$$$:  586-block  1
    $$$$$:  586-block  2
    $$$$$:  586-block  3
        1:  586-block  4
    $$$$$:  586-block  5
    $$$$$:  586-block  6
        -:  587:
        1:  588:void Tests::getWatchListLength_AnyUserService_CorrectLength()
        1:  588-block  0
        -:  589:{
        1:  590:    FileRepository repositoryUsed{"inputFile.in"};
        1:  590-block  0
    $$$$$:  590-block  1
    $$$$$:  590-block  2
        1:  591:    UserService userServiceUsed {repositoryUsed };
        1:  591-block  0
        1:  592:    AdminService adminServiceUsed { repositoryUsed };
        1:  592-block  0
        1:  593:	adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  593-block  0
        1:  593-block  1
        1:  593-block  2
        1:  593-block  3
    $$$$$:  593-block  4
    $$$$$:  593-block  5
    $$$$$:  593-block  6
        1:  594:	userServiceUsed.addMovieToWatchListByTitle("Test");
        1:  594-block  0
        1:  594-block  1
    $$$$$:  594-block  2
        1:  595:	assert(userServiceUsed.getWatchListLength() == 1);
        1:  595-block  0
        1:  595-block  1
    $$$$$:  595-block  2
    $$$$$:  595-block  3
    $$$$$:  595-block  4
        1:  595-block  5
        1:  596:    adminServiceUsed.adminDeleteMovie("Test");
        1:  596-block  0
        1:  596-block  1
    $$$$$:  596-block  2
        -:  597:
        1:  598:}
    $$$$$:  598-block  0
    $$$$$:  598-block  1
    $$$$$:  598-block  2
    $$$$$:  598-block  3
        1:  598-block  4
    $$$$$:  598-block  5
    $$$$$:  598-block  6
        -:  599:
        1:  600:void Tests::goToNextMovieByGenre_AnyUserService_CorrectPosition(){
        1:  600-block  0
        1:  601:    FileRepository repositoryUsed{"inputFile.in"};
        1:  601-block  0
    $$$$$:  601-block  1
    $$$$$:  601-block  2
        1:  602:    UserService userServiceUsed {repositoryUsed };
        1:  602-block  0
        1:  603:    AdminService adminServiceUsed { repositoryUsed };
        1:  603-block  0
        1:  604:    adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  604-block  0
        1:  604-block  1
        1:  604-block  2
        1:  604-block  3
    $$$$$:  604-block  4
    $$$$$:  604-block  5
    $$$$$:  604-block  6
        1:  605:    adminServiceUsed.adminAddMovie("Test2", "CategoryTest", 123, 456, "TrailerTest");
        1:  605-block  0
        1:  605-block  1
        1:  605-block  2
        1:  605-block  3
    $$$$$:  605-block  4
    $$$$$:  605-block  5
    $$$$$:  605-block  6
        1:  606:    adminServiceUsed.adminAddMovie("Test3", "CategoryTest", 123, 456, "TrailerTest");
        1:  606-block  0
        1:  606-block  1
        1:  606-block  2
        1:  606-block  3
    $$$$$:  606-block  4
    $$$$$:  606-block  5
    $$$$$:  606-block  6
        1:  607:    userServiceUsed.listMoviesByGenre("CategoryTest");
        1:  607-block  0
        1:  607-block  1
    $$$$$:  607-block  2
        1:  608:    userServiceUsed.goToNextMovieByGenre();
        1:  608-block  0
        1:  609:    Movie movieUsed = userServiceUsed.getCurrentMovie();
        1:  609-block  0
        1:  610:    assert(movieUsed.getTitle() == "Test2");
        1:  610-block  0
        1:  610-block  1
    $$$$$:  610-block  2
    $$$$$:  610-block  3
    $$$$$:  610-block  4
        1:  610-block  5
        1:  611:    adminServiceUsed.adminDeleteMovie("Test2");
        1:  611-block  0
        1:  611-block  1
    $$$$$:  611-block  2
        1:  612:    adminServiceUsed.adminDeleteMovie("Test3");
        1:  612-block  0
        1:  612-block  1
    $$$$$:  612-block  2
        1:  613:    adminServiceUsed.adminDeleteMovie("Test4");
        1:  613-block  0
        1:  613-block  1
    $$$$$:  613-block  2
        -:  614:
        1:  615:}
    $$$$$:  615-block  0
    $$$$$:  615-block  1
    $$$$$:  615-block  2
    $$$$$:  615-block  3
    $$$$$:  615-block  4
    $$$$$:  615-block  5
    $$$$$:  615-block  6
    $$$$$:  615-block  7
    $$$$$:  615-block  8
        1:  615-block  9
    $$$$$:  615-block 10
    $$$$$:  615-block 11
    $$$$$:  615-block 12
        -:  616:
        1:  617:void Tests::goToNextMovieByGenre_AnyUserService_FirstPosition(){
        1:  617-block  0
        1:  618:    FileRepository repositoryUsed{"inputFile.in"};
        1:  618-block  0
    $$$$$:  618-block  1
    $$$$$:  618-block  2
        1:  619:    UserService userServiceUsed {repositoryUsed };
        1:  619-block  0
        1:  620:    AdminService adminServiceUsed { repositoryUsed };
        1:  620-block  0
        1:  621:    adminServiceUsed.adminAddMovie("Test", "CategoryTest", 123, 456, "TrailerTest");
        1:  621-block  0
        1:  621-block  1
        1:  621-block  2
        1:  621-block  3
    $$$$$:  621-block  4
    $$$$$:  621-block  5
    $$$$$:  621-block  6
        1:  622:    adminServiceUsed.adminAddMovie("Test2", "CategoryTest", 123, 456, "TrailerTest");
        1:  622-block  0
        1:  622-block  1
        1:  622-block  2
        1:  622-block  3
    $$$$$:  622-block  4
    $$$$$:  622-block  5
    $$$$$:  622-block  6
        1:  623:    adminServiceUsed.adminAddMovie("Test3", "CategoryTest", 123, 456, "TrailerTest");
        1:  623-block  0
        1:  623-block  1
        1:  623-block  2
        1:  623-block  3
    $$$$$:  623-block  4
    $$$$$:  623-block  5
    $$$$$:  623-block  6
        1:  624:    userServiceUsed.listMoviesByGenre("CategoryTest");
        1:  624-block  0
        1:  624-block  1
    $$$$$:  624-block  2
        1:  625:    userServiceUsed.goToNextMovieByGenre();
        1:  625-block  0
        1:  626:    userServiceUsed.goToNextMovieByGenre();
        1:  626-block  0
        1:  627:    userServiceUsed.goToNextMovieByGenre();
        1:  627-block  0
        1:  628:    Movie movieUsed = userServiceUsed.getCurrentMovie();
        1:  628-block  0
        1:  629:    assert(movieUsed.getTitle() == "Test");
        1:  629-block  0
        1:  629-block  1
    $$$$$:  629-block  2
    $$$$$:  629-block  3
    $$$$$:  629-block  4
        1:  629-block  5
        1:  630:    adminServiceUsed.adminDeleteMovie("Test2");
        1:  630-block  0
        1:  630-block  1
    $$$$$:  630-block  2
        1:  631:    adminServiceUsed.adminDeleteMovie("Test3");
        1:  631-block  0
        1:  631-block  1
    $$$$$:  631-block  2
        1:  632:    adminServiceUsed.adminDeleteMovie("Test4");
        1:  632-block  0
        1:  632-block  1
    $$$$$:  632-block  2
        1:  633:}
    $$$$$:  633-block  0
    $$$$$:  633-block  1
    $$$$$:  633-block  2
    $$$$$:  633-block  3
    $$$$$:  633-block  4
    $$$$$:  633-block  5
    $$$$$:  633-block  6
    $$$$$:  633-block  7
    $$$$$:  633-block  8
        1:  633-block  9
    $$$$$:  633-block 10
    $$$$$:  633-block 11
    $$$$$:  633-block 12
        -:  634:
        -:  635:
        1:  636:void Tests::FileRepository_AnyRepository_FileRepositoryCreated()
        1:  636-block  0
        -:  637:{
        1:  638:    FileRepository repositoryUsed{"inputFile.in"};
        1:  638-block  0
    $$$$$:  638-block  1
    $$$$$:  638-block  2
        1:  639:}
        1:  639-block  0
        -:  640:
        1:  641:void Tests::writeMoviesToFile_AnyMovie_AddSucessfulFileRepository()
        1:  641-block  0
        -:  642:{
        1:  643:    FileRepository repositoryUsed{"inputFile.in"};
        1:  643-block  0
    $$$$$:  643-block  1
    $$$$$:  643-block  2
        1:  644:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  644-block  0
        1:  644-block  1
        1:  644-block  2
        1:  644-block  3
    $$$$$:  644-block  4
    $$$$$:  644-block  5
    $$$$$:  644-block  6
        1:  645:    std::vector<Movie> movieList;
        1:  646:    movieList.push_back(movieUsed);
        1:  646-block  0
        1:  647:    repositoryUsed.writeMoviesToFile(movieList);
        1:  647-block  0
        1:  647-block  1
    $$$$$:  647-block  2
        1:  648:    assert(repositoryUsed.getNumberOfMovies() == 1);
        1:  648-block  0
        1:  648-block  1
    $$$$$:  648-block  2
    $$$$$:  648-block  3
    $$$$$:  648-block  4
        1:  648-block  5
        1:  649:}
    $$$$$:  649-block  0
    $$$$$:  649-block  1
    $$$$$:  649-block  2
    $$$$$:  649-block  3
        1:  649-block  4
    $$$$$:  649-block  5
    $$$$$:  649-block  6
        -:  650:
        1:  651:void Tests::loadMoviesFromFile_AnyMovie_LoadSucessfulFileRepository()
        1:  651-block  0
        -:  652:{
        1:  653:    FileRepository repositoryUsed{"inputFile.in"};
        1:  653-block  0
    $$$$$:  653-block  1
    $$$$$:  653-block  2
        1:  654:    std::vector<Movie> movieList = repositoryUsed.loadMoviesFromFile();
        1:  654-block  0
        1:  655:    assert(movieList.size() == 1);
        1:  655-block  0
    $$$$$:  655-block  1
    $$$$$:  655-block  2
    $$$$$:  655-block  3
        1:  655-block  4
        1:  656:	Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  656-block  0
        1:  656-block  1
        1:  656-block  2
        1:  656-block  3
    $$$$$:  656-block  4
    $$$$$:  656-block  5
    $$$$$:  656-block  6
        1:  657:	repositoryUsed.deleteMovie(movieUsed);
        1:  657-block  0
        1:  658:}
    $$$$$:  658-block  0
    $$$$$:  658-block  1
        1:  658-block  2
    $$$$$:  658-block  3
    $$$$$:  658-block  4
    $$$$$:  658-block  5
    $$$$$:  658-block  6
    $$$$$:  658-block  7
        -:  659:
        -:  660:
        1:  661:void Tests::addMovie_MovieNotInTheList_ReturnsOneFileRepository()
        1:  661-block  0
        -:  662:{
        1:  663:    FileRepository repositoryUsed{"inputFile.txt"};
        1:  663-block  0
    $$$$$:  663-block  1
    $$$$$:  663-block  2
        1:  664:    repositoryUsed.changeFileName("testFile.txt");
        1:  664-block  0
        1:  664-block  1
    $$$$$:  664-block  2
        1:  665:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  665-block  0
        1:  665-block  1
        1:  665-block  2
        1:  665-block  3
    $$$$$:  665-block  4
    $$$$$:  665-block  5
    $$$$$:  665-block  6
        1:  666:    assert(repositoryUsed.addMovie(movieUsed) == 1);
        1:  666-block  0
        1:  666-block  1
    $$$$$:  666-block  2
    $$$$$:  666-block  3
    $$$$$:  666-block  4
        1:  666-block  5
        1:  667:	repositoryUsed.deleteMovie(movieUsed);
        1:  667-block  0
        1:  668:}
    $$$$$:  668-block  0
    $$$$$:  668-block  1
    $$$$$:  668-block  2
    $$$$$:  668-block  3
        1:  668-block  4
    $$$$$:  668-block  5
        -:  669:
        1:  670:void Tests::addMovie_MovieInTheList_ReturnsMinusOneFileRepository()
        1:  670-block  0
        -:  671:{
        1:  672:    FileRepository repositoryUsed{"inputFile.in"};
        1:  672-block  0
    $$$$$:  672-block  1
    $$$$$:  672-block  2
        1:  673:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  673-block  0
        1:  673-block  1
        1:  673-block  2
        1:  673-block  3
    $$$$$:  673-block  4
    $$$$$:  673-block  5
    $$$$$:  673-block  6
        1:  674:	repositoryUsed.addMovie(movieUsed);
        1:  674-block  0
        1:  675:    assert(repositoryUsed.addMovie(movieUsed) == -1);
        1:  675-block  0
        1:  675-block  1
    $$$$$:  675-block  2
    $$$$$:  675-block  3
    $$$$$:  675-block  4
        1:  675-block  5
        1:  676:	repositoryUsed.deleteMovie(movieUsed);
        1:  676-block  0
        1:  677:}
    $$$$$:  677-block  0
    $$$$$:  677-block  1
    $$$$$:  677-block  2
    $$$$$:  677-block  3
        1:  677-block  4
    $$$$$:  677-block  5
        -:  678:
        1:  679:void Tests::deleteMovie_MovieInTheList_ReturnsOneFileRepository()
        1:  679-block  0
        -:  680:{
        1:  681:    FileRepository repositoryUsed{"inputFile.in"};
        1:  681-block  0
    $$$$$:  681-block  1
    $$$$$:  681-block  2
        1:  682:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  682-block  0
        1:  682-block  1
        1:  682-block  2
        1:  682-block  3
    $$$$$:  682-block  4
    $$$$$:  682-block  5
    $$$$$:  682-block  6
        1:  683:    repositoryUsed.addMovie(movieUsed);
        1:  683-block  0
        1:  684:    assert(repositoryUsed.deleteMovie(movieUsed) == 1);
        1:  684-block  0
        1:  684-block  1
    $$$$$:  684-block  2
    $$$$$:  684-block  3
    $$$$$:  684-block  4
        1:  684-block  5
        1:  685:}
    $$$$$:  685-block  0
    $$$$$:  685-block  1
    $$$$$:  685-block  2
    $$$$$:  685-block  3
        1:  685-block  4
    $$$$$:  685-block  5
        -:  686:
        1:  687:void Tests::deleteMovie_MovieNotInTheList_ReturnsMinusOneFileRepository()
        1:  687-block  0
        -:  688:{
        1:  689:    FileRepository repositoryUsed{"inputFile.in"};
        1:  689-block  0
    $$$$$:  689-block  1
    $$$$$:  689-block  2
        1:  690:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  690-block  0
        1:  690-block  1
        1:  690-block  2
        1:  690-block  3
    $$$$$:  690-block  4
    $$$$$:  690-block  5
    $$$$$:  690-block  6
        1:  691:    assert(repositoryUsed.deleteMovie(movieUsed) == -1);
        1:  691-block  0
        1:  691-block  1
    $$$$$:  691-block  2
    $$$$$:  691-block  3
    $$$$$:  691-block  4
        1:  691-block  5
        1:  692:}
    $$$$$:  692-block  0
    $$$$$:  692-block  1
    $$$$$:  692-block  2
    $$$$$:  692-block  3
        1:  692-block  4
    $$$$$:  692-block  5
        -:  693:
        1:  694:void Tests::update_MovieInTheList_ReturnsOneFileRepository()
        1:  694-block  0
        -:  695:{
        1:  696:    FileRepository repositoryUsed{"inputFile.in"};
        1:  696-block  0
    $$$$$:  696-block  1
    $$$$$:  696-block  2
        1:  697:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  697-block  0
        1:  697-block  1
        1:  697-block  2
        1:  697-block  3
    $$$$$:  697-block  4
    $$$$$:  697-block  5
    $$$$$:  697-block  6
        1:  698:    repositoryUsed.addMovie(movieUsed);
        1:  698-block  0
        1:  699:    assert(repositoryUsed.updateMovie(movieUsed) == 1);
        1:  699-block  0
        1:  699-block  1
    $$$$$:  699-block  2
    $$$$$:  699-block  3
    $$$$$:  699-block  4
        1:  699-block  5
        1:  700:	repositoryUsed.deleteMovie(movieUsed);
        1:  700-block  0
        1:  701:}
    $$$$$:  701-block  0
    $$$$$:  701-block  1
    $$$$$:  701-block  2
    $$$$$:  701-block  3
        1:  701-block  4
    $$$$$:  701-block  5
        -:  702:
        1:  703:void Tests::update_MovieNotInTheList_ReturnsMinusOneFileRepository()
        1:  703-block  0
        -:  704:{
        1:  705:    FileRepository repositoryUsed{"inputFile.in"};
        1:  705-block  0
    $$$$$:  705-block  1
    $$$$$:  705-block  2
        1:  706:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  706-block  0
        1:  706-block  1
        1:  706-block  2
        1:  706-block  3
    $$$$$:  706-block  4
    $$$$$:  706-block  5
    $$$$$:  706-block  6
        1:  707:    assert(repositoryUsed.updateMovie(movieUsed) == -1);
        1:  707-block  0
        1:  707-block  1
    $$$$$:  707-block  2
    $$$$$:  707-block  3
    $$$$$:  707-block  4
        1:  707-block  5
        1:  708:}
    $$$$$:  708-block  0
    $$$$$:  708-block  1
    $$$$$:  708-block  2
    $$$$$:  708-block  3
        1:  708-block  4
    $$$$$:  708-block  5
        -:  709:
        2:  710:void Tests::getMovieAtPosition_ValidPosition_ReturnsMovieFileRepository()
        2:  710-block  0
        -:  711:{
        2:  712:    FileRepository repositoryUsed{"inputFile.in"};
        2:  712-block  0
    $$$$$:  712-block  1
    $$$$$:  712-block  2
        2:  713:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        2:  713-block  0
        2:  713-block  1
        2:  713-block  2
        2:  713-block  3
    $$$$$:  713-block  4
    $$$$$:  713-block  5
    $$$$$:  713-block  6
        2:  714:    repositoryUsed.addMovie(movieUsed);
        2:  714-block  0
        2:  715:    assert(repositoryUsed.getMovieAtPosition(0) == movieUsed);
        2:  715-block  0
        2:  715-block  1
        2:  715-block  2
    $$$$$:  715-block  3
    $$$$$:  715-block  4
    $$$$$:  715-block  5
    $$$$$:  715-block  6
        2:  715-block  7
        2:  716:}
    $$$$$:  716-block  0
    $$$$$:  716-block  1
    $$$$$:  716-block  2
    $$$$$:  716-block  3
        2:  716-block  4
    $$$$$:  716-block  5
    $$$$$:  716-block  6
        -:  717:
    #####:  718:void Tests::getMovieAtPosition_InValidPosition_ReturnsExceptionFileRepository()
    $$$$$:  718-block  0
        -:  719:{
    #####:  720:    FileRepository repositoryUsed{"inputFile.in"};
    $$$$$:  720-block  0
    $$$$$:  720-block  1
    $$$$$:  720-block  2
    #####:  721:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
    $$$$$:  721-block  0
    $$$$$:  721-block  1
    $$$$$:  721-block  2
    $$$$$:  721-block  3
    $$$$$:  721-block  4
    $$$$$:  721-block  5
    $$$$$:  721-block  6
    #####:  722:    repositoryUsed.addMovie(movieUsed);
    $$$$$:  722-block  0
        -:  723:    try {
    #####:  724:        Movie movieUsed = repositoryUsed.getMovieAtPosition(-1);
    $$$$$:  724-block  0
    #####:  725:    }
    $$$$$:  725-block  0
    $$$$$:  725-block  1
    #####:  726:    catch (std::exception Exception) {
        -:  727:        assert(true);
    #####:  728:    }
    $$$$$:  728-block  0
    $$$$$:  728-block  1
    #####:  729:}
    $$$$$:  729-block  0
    $$$$$:  729-block  1
    $$$$$:  729-block  2
    $$$$$:  729-block  3
    $$$$$:  729-block  4
    $$$$$:  729-block  5
    $$$$$:  729-block  6
    $$$$$:  729-block  7
        -:  730:
        1:  731:void Tests::getNumberOfMovies_AnyRepository_CorrectNumberOfMoviesFileRepository()
        1:  731-block  0
        -:  732:{
        1:  733:    FileRepository repositoryUsed{"inputFile.in"};
        1:  733-block  0
    $$$$$:  733-block  1
    $$$$$:  733-block  2
        1:  734:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  734-block  0
        1:  734-block  1
        1:  734-block  2
        1:  734-block  3
    $$$$$:  734-block  4
    $$$$$:  734-block  5
    $$$$$:  734-block  6
        1:  735:    repositoryUsed.addMovie(movieUsed);
        1:  735-block  0
        1:  736:    assert(repositoryUsed.getNumberOfMovies() == 1);
        1:  736-block  0
        1:  736-block  1
    $$$$$:  736-block  2
    $$$$$:  736-block  3
    $$$$$:  736-block  4
        1:  736-block  5
        1:  737:    repositoryUsed.deleteMovie(movieUsed);
        1:  737-block  0
        1:  738:}
    $$$$$:  738-block  0
    $$$$$:  738-block  1
    $$$$$:  738-block  2
    $$$$$:  738-block  3
        1:  738-block  4
    $$$$$:  738-block  5
        1:  739:void Tests::getMoviesByGenre_ValidGenre_ReturnsListOfMovies(){
        1:  739-block  0
        1:  740:    FileRepository repositoryUsed{"inputFile.in"};
        1:  740-block  0
    $$$$$:  740-block  1
    $$$$$:  740-block  2
        1:  741:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  741-block  0
        1:  741-block  1
        1:  741-block  2
        1:  741-block  3
    $$$$$:  741-block  4
    $$$$$:  741-block  5
    $$$$$:  741-block  6
        1:  742:    repositoryUsed.addMovie(movieUsed);
        1:  742-block  0
        1:  743:    std::vector<Movie> movieList = repositoryUsed.getMoviesByGenre("CategoryTest");
        1:  743-block  0
        1:  743-block  1
    $$$$$:  743-block  2
        1:  744:    assert(movieList.size() == 1);
        1:  744-block  0
    $$$$$:  744-block  1
    $$$$$:  744-block  2
    $$$$$:  744-block  3
        1:  744-block  4
        1:  745:    repositoryUsed.deleteMovie(movieUsed);
        1:  745-block  0
        -:  746:
        1:  747:}
    $$$$$:  747-block  0
    $$$$$:  747-block  1
    $$$$$:  747-block  2
    $$$$$:  747-block  3
    $$$$$:  747-block  4
        1:  747-block  5
    $$$$$:  747-block  6
    $$$$$:  747-block  7
        1:  748:void Tests::getMoviesByGenre_InvalidGenre_ReturnsEmptyList(){
        1:  748-block  0
        1:  749:    FileRepository repositoryUsed{"inputFile.in"};
        1:  749-block  0
    $$$$$:  749-block  1
    $$$$$:  749-block  2
        1:  750:    Movie movieUsed = { "Test", "CategoryTest", 123, 456, "TrailerTest" };
        1:  750-block  0
        1:  750-block  1
        1:  750-block  2
        1:  750-block  3
    $$$$$:  750-block  4
    $$$$$:  750-block  5
    $$$$$:  750-block  6
        1:  751:    repositoryUsed.addMovie(movieUsed);
        1:  751-block  0
        1:  752:    std::vector<Movie> movieList = repositoryUsed.getMoviesByGenre("Test");
        1:  752-block  0
        1:  752-block  1
    $$$$$:  752-block  2
        1:  753:    assert(movieList.size() == 0);
        1:  753-block  0
    $$$$$:  753-block  1
    $$$$$:  753-block  2
    $$$$$:  753-block  3
        1:  753-block  4
        1:  754:    repositoryUsed.deleteMovie(movieUsed);
        1:  754-block  0
        1:  755:}
    $$$$$:  755-block  0
    $$$$$:  755-block  1
    $$$$$:  755-block  2
    $$$$$:  755-block  3
    $$$$$:  755-block  4
        1:  755-block  5
    $$$$$:  755-block  6
    $$$$$:  755-block  7
