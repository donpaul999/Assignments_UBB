        -:    0:Source:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/AdminService.cpp
        -:    0:Graph:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/AdminService.gcno
        -:    0:Data:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/AdminService.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "AdminService.h"
        -:    2:
        -:    3://AdminService constructor
        -:    4://AdminService::AdminService(Repository& repository) :repository{ repository } {}
       42:    5:AdminService::AdminService(FileRepository& repository) : repository{ repository } {}
       21:    5-block  0
       21:    5-block  1
       21:    5-block  2
       21:    5-block  3
        -:    6:
        -:    7:
        -:    8:/*
        -:    9:	Explode a string after certain separators - stringToExplode - string to be separated
        -:   10:											separatorUsed - character used to divide the string
        -:   11:*/
        1:   12:const std::vector<std::string> AdminService::explode(const std::string& stringToExplode, const char& separatorUsed)
        1:   12-block  0
        -:   13:{
        1:   14:	std::string partialStringObtained{ "" };
        1:   15:	std::vector<std::string> explodedString;
        -:   16:
       19:   17:	for (auto iterator : stringToExplode)
        1:   17-block  0
       19:   17-block  1
       18:   17-block  2
       18:   17-block  3
        -:   18:	{
       18:   19:		if (iterator != separatorUsed) 
       18:   19-block  0
       16:   20:			partialStringObtained += iterator;
       16:   20-block  0
       16:   20-block  1
        -:   21:		else
        2:   22:			if (iterator == separatorUsed && partialStringObtained != ""){ 
        2:   22-block  0
        2:   22-block  1
        2:   23:				explodedString.push_back(partialStringObtained);
        2:   23-block  0
        2:   24:			    partialStringObtained = "";
        2:   24-block  0
        2:   25:			}
        2:   25-block  0
        -:   26:	}
        1:   27:	if (partialStringObtained != "") 
        1:   27-block  0
        1:   28:		explodedString.push_back(partialStringObtained);
        1:   28-block  0
        1:   28-block  1
        1:   29:	return explodedString;
        1:   30:}
    $$$$$:   30-block  0
        1:   30-block  1
    $$$$$:   30-block  2
        1:   30-block  3
    $$$$$:   30-block  4
        -:   31:
        -:   32:/*
        -:   33:	Add a movie in the list - title - title of the movie
        -:   34:							genre - genre of the movie
        -:   35:							yearOfRelease - the year when the movie was released
        -:   36:							numberOfLikes - trailer's number of likes
        -:   37:							trailer - link to the movie's trailer
        -:   38:*/
       21:   39:int AdminService::adminAddMovie(const std::string& title, const std::string& genre, int yearOfRelease, int numberOfLikes, const std::string& trailer)
       21:   39-block  0
        -:   40:{
       21:   41:	Movie movieUsed{ title, genre, yearOfRelease, numberOfLikes, trailer };
       21:   42:	return repository.addMovie(movieUsed);
       21:   42-block  0
       21:   43:}
       21:   43-block  0
    $$$$$:   43-block  1
    $$$$$:   43-block  2
        -:   44:
        -:   45:
        -:   46:/*
        -:   47:	Delete a movie from the list, by its title
        -:   48:*/
       21:   49:int AdminService::adminDeleteMovie(const std::string& title)
       21:   49-block  0
        -:   50:{
       21:   51:	Movie movieUsed{ title, "fillGenre", 2020, 0, "No trailer" };
       21:   51-block  0
       21:   51-block  1
    $$$$$:   51-block  2
    $$$$$:   51-block  3
    $$$$$:   51-block  4
       21:   52:	return repository.deleteMovie(movieUsed);
       21:   52-block  0
       21:   53:}
       21:   53-block  0
    $$$$$:   53-block  1
    $$$$$:   53-block  2
        -:   54:
        -:   55:/*
        -:   56:	Add a movie in the list - title - title of the movie to be updated
        -:   57:							genre - genre of the movie to update with
        -:   58:							yearOfRelease - the year when the movie was released to update with
        -:   59:							numberOfLikes - trailer's number of likes to update with
        -:   60:							trailer - link to the movie's trailer to update with
        -:   61:*/
        2:   62:int AdminService::adminUpdateMovie(const std::string& title, const std::string& genre, int yearOfRelease, int numberOfLikes, const std::string& trailer)
        2:   62-block  0
        -:   63:{
        2:   64:	Movie movieUsed{ title, genre, yearOfRelease, numberOfLikes, trailer };
        2:   65:	return repository.updateMovie(movieUsed);
        2:   65-block  0
        2:   66:}
        2:   66-block  0
    $$$$$:   66-block  1
    $$$$$:   66-block  2
        -:   67:
        -:   68://Return the list of movies
        1:   69:std::vector<Movie> AdminService::adminGetMovieList()
        1:   69-block  0
        -:   70:{
        1:   71:	return repository.getAllMovies();
        1:   71-block  0
        -:   72:}
        -:   73:
        -:   74://Change the file name used by repository
        1:   75:int AdminService::changeRepositoryFileName(const std::string& nameOfTheFileUsed)
        1:   75-block  0
        -:   76:{
        1:   77:	repository.changeFileName(nameOfTheFileUsed);
        1:   78:	return 1;
        1:   78-block  0
        -:   79:}
