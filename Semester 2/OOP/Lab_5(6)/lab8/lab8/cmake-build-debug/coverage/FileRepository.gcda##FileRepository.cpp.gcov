        -:    0:Source:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/FileRepository.cpp
        -:    0:Graph:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/FileRepository.gcno
        -:    0:Data:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/FileRepository.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "FileRepository.h"
        -:    2:#include <iostream>
        -:    3:#include <fstream>
        -:    4:
        -:    5:
        -:    6:
        -:    7://Load movies from given file
      102:    8:std::vector<Movie> FileRepository::loadMoviesFromFile()
      102:    8-block  0
        -:    9:{
      102:   10:    std::vector<Movie> movieList = {};
      102:   11:    Movie movieLoadedFromFile;
      102:   11-block  0
      102:   11-block  1
      102:   11-block  2
      102:   11-block  3
    $$$$$:   11-block  4
    $$$$$:   11-block  5
    $$$$$:   11-block  6
    $$$$$:   11-block  7
    $$$$$:   11-block  8
    $$$$$:   11-block  9
      102:   12:    std::ifstream fin(movieFileName);
      102:   12-block  0
      177:   13:    while (fin >> movieLoadedFromFile) {
      102:   13-block  0
      177:   13-block  1
      177:   13-block  2
      177:   13-block  3
       75:   13-block  4
       75:   14:        if(std::find(movieList.begin(), movieList.end(), movieLoadedFromFile) == movieList.end())
       75:   14-block  0
       75:   14-block  1
       75:   15:            movieList.push_back(movieLoadedFromFile);
       75:   15-block  0
       75:   15-block  1
        -:   16:    }
      102:   17:    fin.close();
      102:   17-block  0
      102:   18:    return movieList;
      102:   19:}
    $$$$$:   19-block  0
    $$$$$:   19-block  1
      102:   19-block  2
    $$$$$:   19-block  3
    $$$$$:   19-block  4
      102:   19-block  5
    $$$$$:   19-block  6
    $$$$$:   19-block  7
        -:   20:
        -:   21:
        -:   22://Write movies to given file
       57:   23:void FileRepository::writeMoviesToFile(std::vector<Movie> movieList)
       57:   23-block  0
        -:   24:{
       57:   25:    std::ofstream fout(movieFileName);
       98:   26:    for (const Movie& movieToWrite : movieList) {
       57:   26-block  0
       98:   26-block  1
       41:   26-block  2
       41:   26-block  3
       41:   27:        fout << movieToWrite << '\n';
       41:   27-block  0
       41:   27-block  1
        -:   28:    }
       57:   29:    fout.close();
       57:   29-block  0
       57:   30:}
    $$$$$:   30-block  0
       57:   30-block  1
    $$$$$:   30-block  2
        -:   31:
        -:   32://Repository constructor
       72:   33:FileRepository::FileRepository(const std::string& nameOfTheFileUsed)
       36:   33-block  0
       36:   33-block  1
       36:   34:{
       36:   35:    movieFileName = nameOfTheFileUsed;
       36:   35-block  0
        -:   36:
       72:   37:}
       36:   37-block  0
    $$$$$:   37-block  1
    $$$$$:   37-block  2
       36:   37-block  3
        -:   38:
        -:   39://Repository destructor
       72:   40:FileRepository::~FileRepository()
       36:   40-block  0
       36:   40-block  1
       36:   41:{
       72:   42:}
       36:   42-block  0
       36:   42-block  1
        -:   43:
        -:   44:
        -:   45://Add given movie to list
       31:   46:int FileRepository::addMovie(const Movie& movieToAdd)
       31:   46-block  0
        -:   47:{
       31:   48:    std::vector<Movie> movieList = loadMoviesFromFile();
       31:   49:    auto iteratorWhereMovieIsFound = std::find(movieList.begin(), movieList.end(),  movieToAdd);
       31:   49-block  0
       31:   50:    if (iteratorWhereMovieIsFound !=  movieList.end() && movieList.size() != 0)
       31:   50-block  0
        5:   50-block  1
       31:   50-block  2
        5:   51:        return -1;
        5:   51-block  0
       26:   52:    movieList.push_back(movieToAdd);
       26:   52-block  0
       26:   53:    writeMoviesToFile(movieList);
       26:   53-block  0
       26:   53-block  1
    $$$$$:   53-block  2
       26:   54:    return 1;
       26:   54-block  0
       31:   55:}
    $$$$$:   55-block  0
       31:   55-block  1
    $$$$$:   55-block  2
    $$$$$:   55-block  3
        -:   56:
        -:   57:
        -:   58:
        -:   59://Delete a movie from the movieList
       30:   60:int FileRepository::deleteMovie(const Movie& movieToDelete)
       30:   60-block  0
        -:   61:{
       30:   62:    std::vector<Movie> movieList = loadMoviesFromFile();
       30:   63:    auto iteratorWhereMovieIsFound = std::find(movieList.begin(), movieList.end(),  movieToDelete);
       30:   63-block  0
       30:   64:    if (iteratorWhereMovieIsFound == movieList.end())
       30:   64-block  0
        4:   65:        return -1;
        4:   65-block  0
       26:   66:    movieList.erase(iteratorWhereMovieIsFound);
       26:   66-block  0
       26:   67:    writeMoviesToFile(movieList);
       26:   67-block  0
       26:   67-block  1
    $$$$$:   67-block  2
       26:   68:    return 1;
       26:   68-block  0
       30:   69:}
    $$$$$:   69-block  0
       30:   69-block  1
    $$$$$:   69-block  2
    $$$$$:   69-block  3
        -:   70:
        -:   71:
        -:   72://Update a movie from the movieList
        4:   73:int FileRepository::updateMovie(const Movie& movieToUpdateWith)
        4:   73-block  0
        -:   74:{
        4:   75:    std::vector<Movie> movieList = loadMoviesFromFile();
        4:   76:    auto iteratorWhereMovieIsFound = std::find(movieList.begin(), movieList.end(),  movieToUpdateWith);
        4:   76-block  0
        4:   77:    if (iteratorWhereMovieIsFound == movieList.end())
        4:   77-block  0
        2:   78:        return -1;
        2:   78-block  0
        2:   79:    *iteratorWhereMovieIsFound = movieToUpdateWith;
        2:   79-block  0
        2:   80:    writeMoviesToFile(movieList);
        2:   80-block  0
        2:   80-block  1
    $$$$$:   80-block  2
        2:   81:    return 1;
        2:   81-block  0
        4:   82:}
    $$$$$:   82-block  0
        4:   82-block  1
    $$$$$:   82-block  2
    $$$$$:   82-block  3
        -:   83:
        -:   84://Change the file name of the repository
        2:   85:void FileRepository::changeFileName(const std::string& nameOfTheFileUsed)
        2:   85-block  0
        -:   86:{
        2:   87:    std::vector<Movie> movieList = loadMoviesFromFile();
        2:   88:    movieFileName = nameOfTheFileUsed;
        2:   88-block  0
        2:   89:    writeMoviesToFile(movieList);
        2:   89-block  0
        2:   89-block  1
    $$$$$:   89-block  2
        2:   90:}
        2:   90-block  0
    $$$$$:   90-block  1
    $$$$$:   90-block  2
    $$$$$:   90-block  3
        -:   91:
        -:   92:
        -:   93://Get the movie at a certain position
        2:   94:Movie FileRepository::getMovieAtPosition(int positionOfMovie)
        2:   94-block  0
        -:   95:{
        2:   96:    std::vector<Movie> movieList = loadMoviesFromFile();
        2:   97:    if (positionOfMovie < 0 || positionOfMovie >= movieList.size())
        2:   97-block  0
        2:   97-block  1
    #####:   98:        throw std::runtime_error("Invalid position");
    $$$$$:   98-block  0
    $$$$$:   98-block  1
    $$$$$:   98-block  2
        2:   99:    return movieList[positionOfMovie];}
    $$$$$:   99-block  0
        2:   99-block  1
        2:   99-block  2
    $$$$$:   99-block  3
    $$$$$:   99-block  4
        -:  100:
        -:  101://Get the number of movies in the list
        -:  102:
        2:  103:int FileRepository::getNumberOfMovies()
        2:  103-block  0
        -:  104:{
        2:  105:    std::vector<Movie> movieList = loadMoviesFromFile();
        2:  106:    return movieList.size();
        2:  107:}
        2:  107-block  0
        -:  108:
        -:  109://Get all the movies with a given genre
        9:  110:std::vector<Movie> FileRepository::getMoviesByGenre(const std::string& genreGiven)
        9:  110-block  0
        -:  111:{
        9:  112:    std::vector<Movie> movieList = loadMoviesFromFile();
        9:  113:    std::vector<Movie> moviesWithGenre = {};
        9:  114:    if (genreGiven == "")
        9:  114-block  0
        1:  115:        return movieList;
        1:  115-block  0
       20:  116:    std::copy_if(movieList.begin(), movieList.end(), std::back_inserter(moviesWithGenre), [&genreGiven](const Movie& movie) {return movie.getGenre() == genreGiven; });
        8:  116-block  0
        8:  116-block  1
       12:  116-block  2
       12:  116-block  3
        8:  117:    return moviesWithGenre;
        8:  117-block  0
        9:  118:}
    $$$$$:  118-block  0
        9:  118-block  1
    $$$$$:  118-block  2
        -:  119:
        -:  120://Get all the movies
       14:  121:std::vector<Movie> FileRepository::getAllMovies()
       14:  121-block  0
        -:  122:{
       14:  123:    std::vector<Movie> movieList = loadMoviesFromFile();
       14:  124:    return movieList;
       14:  125:}
       14:  125-block  0
    $$$$$:  125-block  1
       14:  125-block  2
        -:  126:
        -:  127:
        -:  128://Get all the movies in the watch list
        1:  129:std::vector<Movie> FileRepository::getAllWatchListMovies()
        1:  129-block  0
        -:  130:{
        1:  131:    return userWatchList;
        1:  131-block  0
        -:  132:}
        -:  133:
        -:  134:
        -:  135://Add a certain movie to the watch list
        4:  136:int FileRepository::addMovieToWatchlist(const Movie& movieToAdd)
        4:  136-block  0
        -:  137:{
        4:  138:    std::vector<Movie> movieList = loadMoviesFromFile();
        4:  139:    auto iteratorWhereMovieIsFound = std::find(userWatchList.begin(), userWatchList.end(), movieToAdd);
        4:  139-block  0
        4:  140:    if (iteratorWhereMovieIsFound != userWatchList.end())
        4:  140-block  0
        1:  141:        return -1;
        1:  141-block  0
        3:  142:    userWatchList.push_back(movieToAdd);
        3:  142-block  0
        3:  143:    return 1;
        3:  143-block  0
        4:  144:}
    $$$$$:  144-block  0
        4:  144-block  1
    $$$$$:  144-block  2
        -:  145:
        -:  146:
        -:  147://Add a certain movie to the watch list by the title
        3:  148:int FileRepository::addMovieToWatchListByTitle(const std::string& titleOfTheMovieToAdd)
        3:  148-block  0
        -:  149:{
        3:  150:    std::vector<Movie> movieList = loadMoviesFromFile();
        6:  151:    auto iteratorWhereMovieFound = std::find_if(movieList.begin(), movieList.end(), [&titleOfTheMovieToAdd](const Movie& movie) {return movie.getTitle() == titleOfTheMovieToAdd; });
        3:  151-block  0
        3:  151-block  1
        3:  151-block  2
        3:  152:    if (iteratorWhereMovieFound == movieList.end())
        3:  152-block  0
        1:  153:        return -1;
        1:  153-block  0
        2:  154:    userWatchList.push_back(*iteratorWhereMovieFound);
        2:  154-block  0
        2:  155:    return 1;
        2:  155-block  0
        3:  156:}
    $$$$$:  156-block  0
        3:  156-block  1
    $$$$$:  156-block  2
        -:  157:
        -:  158://Get the number of movies in the watch list
        1:  159:int FileRepository::getNumberOfMoviesWatchList()
        1:  159-block  0
        -:  160:{
        1:  161:    return userWatchList.size();
        1:  161-block  0
        -:  162:}
