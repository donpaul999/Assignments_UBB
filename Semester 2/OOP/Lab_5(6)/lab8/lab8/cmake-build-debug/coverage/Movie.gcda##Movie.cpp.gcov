        -:    0:Source:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/Movie.cpp
        -:    0:Graph:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/Movie.gcno
        -:    0:Data:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/Movie.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "Movie.h"
        -:    2:#include <iostream>
        -:    3:
        -:    4://Movie constructors
        -:    5:
      372:    6:Movie::Movie(const std::string& title, const std::string& genre, int yearOfRelease, int numberOfLikes, const std::string& trailer): title(title),
      186:    6-block  0
      186:    6-block  1
      186:    7:																																	genre(genre), 
      186:    7-block  0
      186:    8:																																	yearOfRelease(yearOfRelease),
      186:    9:																																	numberOfLikes(numberOfLikes),
      558:   10:																																	trailer(trailer) {}
      186:   10-block  0
      186:   10-block  1
    $$$$$:   10-block  2
    $$$$$:   10-block  3
    $$$$$:   10-block  4
    $$$$$:   10-block  5
      186:   10-block  6
        -:   11:
        -:   12:
      404:   13:Movie::Movie(const Movie& movieToUse):title{movieToUse.title},
      202:   13-block  0
      202:   13-block  1
      202:   14:                                       genre{movieToUse.genre},
      202:   14-block  0
      202:   15:                                       yearOfRelease{movieToUse.yearOfRelease},
      202:   16:                                       numberOfLikes{movieToUse.numberOfLikes},
      202:   17:                                       trailer{movieToUse.trailer}
      202:   17-block  0
      404:   18:                                       {}
      202:   18-block  0
    $$$$$:   18-block  1
    $$$$$:   18-block  2
    $$$$$:   18-block  3
    $$$$$:   18-block  4
      202:   18-block  5
        -:   19://End of Movie constructors
        -:   20:
        -:   21:
        -:   22:
        1:   23:void Movie::setTitle(const std::string& title)
        1:   23-block  0
        -:   24:{
        1:   25:	Movie::title = title;
        -:   26:
        1:   27:}
        1:   27-block  0
        -:   28:
        1:   29:void Movie::setGenre(const std::string& genre)
        1:   29-block  0
        -:   30:{
        1:   31:	Movie::genre = genre;
        1:   32:}
        1:   32-block  0
        -:   33:
        1:   34:void Movie::setYearOfRelease(int yearOfRelease)
        1:   34-block  0
        -:   35:{
        1:   36:	Movie::yearOfRelease = yearOfRelease;
        1:   37:}
        1:   37-block  0
        -:   38:
        1:   39:void Movie::setNumberOfLikes(int numberOfLikes)
        1:   39-block  0
        -:   40:{
        1:   41:	Movie::numberOfLikes = numberOfLikes;
        1:   42:}
        1:   42-block  0
        -:   43:
        1:   44:void Movie::setTrailer(const std::string& trailer)
        1:   44-block  0
        -:   45:{
        1:   46:    Movie::trailer = trailer;
        1:   47:}
        1:   47-block  0
        -:   48:
       14:   49:const std::string& Movie::getTitle() const
       14:   49-block  0
        -:   50:{
       14:   51:	return title;
       14:   51-block  0
        -:   52:}
        -:   53:
        9:   54:int Movie::getYearOfRelease() const
        9:   54-block  0
        -:   55:{
        9:   56:	return yearOfRelease;
        9:   56-block  0
        -:   57:}
        -:   58:
       21:   59:const std::string& Movie::getGenre() const
       21:   59-block  0
        -:   60:{
       21:   61:	return genre;
       21:   61-block  0
        -:   62:}
        -:   63:
        9:   64:int Movie::getNumberOfLikes() const
        9:   64-block  0
        -:   65:{
        9:   66:	return numberOfLikes;
        9:   66-block  0
        -:   67:}
        -:   68:
        9:   69:const std::string& Movie::getTrailer() const
        9:   69-block  0
        -:   70:{
        9:   71:	return trailer;
        9:   71-block  0
        -:   72:}
        -:   73:
        -:   74://Operators overload
        -:   75:
       72:   76:bool Movie::operator==(const Movie& movieToCheck) const
       72:   76-block  0
        -:   77:{
       72:   78:	return title == movieToCheck.title; //maybe there can be 2 movies with the same title
       72:   78-block  0
        -:   79:}
        -:   80:
        5:   81:void Movie::operator=(const Movie& movieToGetValuesFrom)
        5:   81-block  0
        -:   82:{
        5:   83:	title = movieToGetValuesFrom.getTitle();
        5:   84:	genre = movieToGetValuesFrom.getGenre();
        5:   85:	yearOfRelease = movieToGetValuesFrom.getYearOfRelease();
        5:   86:	numberOfLikes = movieToGetValuesFrom.getNumberOfLikes();
        5:   87:	trailer = movieToGetValuesFrom.getTrailer();
        5:   88:}
        5:   88-block  0
        -:   89:
        1:   90:bool Movie::operator!=(const Movie& movieToCheck) const
        1:   90-block  0
        -:   91:{
        1:   92:	return !(movieToCheck == *this);
        1:   92-block  0
        -:   93:}
        -:   94:
       46:   95:std::ostream& operator<<(std::ostream& outStream, const Movie& movieToOutput)
       46:   95-block  0
        -:   96:{
       46:   97:	outStream << movieToOutput.getOutputForm();
       46:   97-block  0
    $$$$$:   97-block  1
    $$$$$:   97-block  2
       46:   98:	return outStream;}
       46:   98-block  0
        -:   99:
      189:  100:std::istream& operator>> (std::istream& inStream, Movie& movie) {
      189:  100-block  0
      189:  101:	std::string movieString;
      189:  102:	std::getline(inStream, movieString);
      189:  102-block  0
      189:  103:	std::vector <std::string> tokens;
      189:  104:	if (movieString == "") {
      189:  104-block  0
      107:  105:		return inStream;
      107:  105-block  0
        -:  106:	}
       82:  107:	tokens = movie.explode(movieString, ",:");
       82:  107-block  0
       82:  107-block  1
       82:  107-block  2
    $$$$$:  107-block  3
    $$$$$:  107-block  4
       82:  108:	movie.title = tokens[0].substr(1);
       82:  108-block  0
       82:  109:	movie.genre = tokens[1].substr(1);
       82:  109-block  0
       82:  110:	movie.yearOfRelease = std::stoi(tokens[2].substr(1));
       82:  110-block  0
       82:  110-block  1
    $$$$$:  110-block  2
       82:  111:	movie.numberOfLikes = std::stoi(tokens[3].substr(1));
       82:  111-block  0
       82:  111-block  1
    $$$$$:  111-block  2
       82:  112:	movie.trailer = tokens[4].substr(1);
       82:  112-block  0
       82:  113:	movie.trailer = movie.trailer.substr(0, movie.trailer.size() - 1);
       82:  113-block  0
       82:  114:	return inStream;
       82:  114-block  0
      189:  115:}
    $$$$$:  115-block  0
    $$$$$:  115-block  1
    $$$$$:  115-block  2
      189:  115-block  3
    $$$$$:  115-block  4
    $$$$$:  115-block  5
    $$$$$:  115-block  6
        -:  116://End of operators overload
        -:  117:
        -:  118:
        -:  119:
        -:  120:/*
        -:  121:	Explode a string after certain separators - stringToExplode - string to be separated
        -:  122:											  separatorsUsed - characters used to divide the string
        -:  123:*/
       83:  124:const std::vector<std::string>Movie::explode(const std::string& stringToExplode, const std::string& separatorsUsed)
       83:  124-block  0
        -:  125:{
      415:  126:	std::vector<std::string>trashValues = { "Title", " Genre", " Year of Release", " Likes", " Trailer" };
       83:  126-block  0
       83:  126-block  1
       83:  126-block  2
       83:  126-block  3
       83:  126-block  4
       83:  126-block  5
       83:  126-block  6
      415:  126-block  7
    $$$$$:  126-block  8
    $$$$$:  126-block  9
    $$$$$:  126-block 10
    $$$$$:  126-block 11
    $$$$$:  126-block 12
    $$$$$:  126-block 13
    $$$$$:  126-block 14
       83:  127:	std::string partialStringObtained{ "" };
       83:  127-block  0
       83:  128:	std::vector<std::string> explodedString;
        -:  129:
     7411:  130:	for (auto iterator : stringToExplode)
       83:  130-block  0
     7411:  130-block  1
     7328:  130-block  2
     7328:  130-block  3
        -:  131:	{
     7328:  132:		if (iterator != separatorsUsed[0] && iterator != separatorsUsed[1])
     7328:  132-block  0
     6998:  132-block  1
     6588:  133:			partialStringObtained += iterator;
     6588:  133-block  0
     6588:  133-block  1
        -:  134:		else
      740:  135:			if ((iterator == separatorsUsed[0] || iterator == separatorsUsed[1]) && partialStringObtained != "") {
      740:  135-block  0
      410:  135-block  1
      740:  135-block  2
      740:  136:				if (find(trashValues.begin(), trashValues.end(), partialStringObtained) == trashValues.end()) {
      740:  136-block  0
      740:  136-block  1
      330:  137:					explodedString.push_back(partialStringObtained);
      330:  137-block  0
      330:  138:				}
      330:  138-block  0
      740:  139:				partialStringObtained = "";
      740:  139-block  0
      740:  140:			}
      740:  140-block  0
        -:  141:	}
       83:  142:	if (partialStringObtained != "")
       83:  142-block  0
       83:  143:		explodedString.push_back(partialStringObtained);
       83:  143-block  0
       83:  143-block  1
       83:  144:	return explodedString;
       83:  145:}
    $$$$$:  145-block  0
    $$$$$:  145-block  1
       83:  145-block  2
    $$$$$:  145-block  3
       83:  145-block  4
    $$$$$:  145-block  5
        -:  146:
        -:  147:
        -:  148://This is how a movie is represented
       47:  149:std::string Movie::getOutputForm() const
       47:  149-block  0
        -:  150:{
       47:  151:	std::string finalOutputForm = "Title: " + title + ", Genre: " + genre + ", Year of Release: " + std::to_string(yearOfRelease) + ", Likes: " + std::to_string(numberOfLikes) + ", Trailer: " + trailer + ";";
       47:  151-block  0
       47:  151-block  1
       47:  151-block  2
       47:  151-block  3
       47:  151-block  4
       47:  151-block  5
       47:  151-block  6
       47:  151-block  7
       47:  151-block  8
       47:  151-block  9
       47:  151-block 10
    $$$$$:  151-block 11
    $$$$$:  151-block 12
    $$$$$:  151-block 13
    $$$$$:  151-block 14
    $$$$$:  151-block 15
    $$$$$:  151-block 16
    $$$$$:  151-block 17
    $$$$$:  151-block 18
    $$$$$:  151-block 19
    $$$$$:  151-block 20
    $$$$$:  151-block 21
    $$$$$:  151-block 22
       47:  152:	return finalOutputForm;
       47:  153:}
       47:  153-block  0
    $$$$$:  153-block  1
    $$$$$:  153-block  2
    $$$$$:  153-block  3
    $$$$$:  153-block  4
    $$$$$:  153-block  5
    $$$$$:  153-block  6
    $$$$$:  153-block  7
    $$$$$:  153-block  8
    $$$$$:  153-block  9
    $$$$$:  153-block 10
    $$$$$:  153-block 11
       47:  153-block 12
        -:  154:
