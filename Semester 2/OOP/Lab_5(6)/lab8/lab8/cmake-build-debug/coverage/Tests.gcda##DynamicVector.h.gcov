        -:    0:Source:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/./DynamicVector.h
        -:    0:Graph:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/Tests.gcno
        -:    0:Data:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/Tests.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:#include <stdexcept>
        -:    3:
        -:    4:#include "Movie.h"
        -:    5:typedef Movie TElem;
        -:    6:
        -:    7:template <typename TElem>
        -:    8:
        -:    9:
        -:   10:class DynamicVector {
        -:   11:
        -:   12:private:
        -:   13:    TElem* elementsList;
        -:   14:    int sizeOfVector;
        -:   15:    int capacityOfVector;
        -:   16:
        -:   17:  
        -:   18:
        -:   19:public:
        -:   20:    DynamicVector(int capacityGiven = 5);
        -:   21:    DynamicVector(const  DynamicVector& vectorToSet);
        -:   22:    ~DynamicVector();
        -:   23:    void resizeElementsList();
        -:   24:    bool needsResize();
        -:   25:    int searchElementInList(const TElem& elementToSearch);
        -:   26:    void append(TElem elementToAppend);
        -:   27:    void remove(const TElem& elementToRemove);
        -:   28:    void update(const TElem& elementToUpdate, const TElem& updatedElement);
        -:   29:    TElem& operator[](int positionOfTheElement);
        -:   30:    int size();
        -:   31:    int capacity();
        -:   32:    DynamicVector& operator=(const  DynamicVector& vectorUsed);
        -:   33:};
        -:   34:
        -:   35:
        -:   36:template<typename TElem>
       28:   37:DynamicVector<TElem>::DynamicVector(int capacityGiven){
       14:   37-block  0
       14:   37-block  1
       14:   38:    this->capacityOfVector = capacityGiven;
       14:   39:    this->sizeOfVector = 0;
       14:   40:    this->elementsList = new TElem[this->capacityOfVector];
       28:   41:}
       14:   41-block  0
       14:   41-block  1
        -:   42:template<typename TElem>
        -:   43:DynamicVector<TElem>::DynamicVector(const  DynamicVector& vectorToSet){
        -:   44:    capacityOfVector = vectorToSet.capacityOfVector;
        -:   45:    sizeOfVector = vectorToSet.sizeOfVector;
        -:   46:    elementsList = new TElem[vectorToSet.capacityOfVector];
        -:   47:    for (int i = 0; i < sizeOfVector; ++i) {
        -:   48:        elementsList[i] = vectorToSet.elementsList[i];
        -:   49:    }
        -:   50:}
        -:   51:
        -:   52:template<typename TElem>
       28:   53:DynamicVector<TElem>::~DynamicVector()
       14:   53-block  0
       14:   53-block  1
       14:   54:{
       14:   55:    delete[] elementsList;
       14:   55-block  0
       14:   55-block  1
       28:   56:}
       14:   56-block  0
       14:   56-block  1
        -:   57:
        -:   58:template<typename TElem>
        2:   59:inline void DynamicVector<TElem>::resizeElementsList()
        2:   59-block  0
        -:   60:{
        2:   61:    TElem* newList = new TElem[capacityOfVector * 2];
        6:   62:    for (int i = 0; i < sizeOfVector; ++i)
        2:   62-block  0
        6:   62-block  1
        4:   62-block  2
        4:   63:        newList[i] = elementsList[i];
        4:   63-block  0
        2:   64:    capacityOfVector *= 2;
        2:   65:    delete[] elementsList;
        2:   65-block  0
        2:   65-block  1
        2:   66:    elementsList = newList;
        2:   67:}
        2:   67-block  0
        -:   68:
        -:   69:template<typename TElem>
       22:   70:inline bool DynamicVector<TElem>::needsResize()
       22:   70-block  0
        -:   71:{
       22:   72:    return sizeOfVector == capacityOfVector;
       22:   72-block  0
        -:   73:}
        -:   74:
        -:   75:template<typename TElem>
       10:   76:int DynamicVector<TElem>::searchElementInList(const TElem& elementToSearch) {
       10:   76-block  0
       19:   77:    for (int i = 0; i < sizeOfVector; ++i) {
       10:   77-block  0
       19:   77-block  1
        9:   77-block  2
       15:   78:        if (elementsList[i] == elementToSearch)
       15:   78-block  0
        6:   79:            return i;
        6:   79-block  0
        9:   80:    }
        9:   80-block  0
        4:   81:    return -1;
        4:   81-block  0
       10:   82:}
       10:   82-block  0
        -:   83:
        -:   84:template<typename TElem>
       22:   85:void DynamicVector<TElem>::append(TElem elementToAppend) {
       22:   85-block  0
       22:   86:    if (needsResize())
       22:   86-block  0
        2:   87:        resizeElementsList();
        2:   87-block  0
       22:   88:    elementsList[sizeOfVector++] = elementToAppend;
       22:   89:}
       22:   89-block  0
        -:   90:
        -:   91:template<typename TElem>
        2:   92:void DynamicVector<TElem>::remove(const TElem& elementToRemove) {
        2:   92-block  0
        2:   93:    int positionWhereFound = searchElementInList(elementToRemove);
        2:   94:    if (positionWhereFound != -1) {
        2:   94-block  0
        3:   95:        for (int i = positionWhereFound; i < sizeOfVector - 1; ++i) {
        1:   95-block  0
        3:   95-block  1
        2:   95-block  2
        2:   96:            elementsList[i] = elementsList[i + 1];
        2:   97:        }
        2:   97-block  0
        1:   98:        --sizeOfVector;
        1:   99:    }
        1:   99-block  0
        2:  100:}
        2:  100-block  0
        -:  101:
        -:  102:template<typename TElem>
        1:  103:void DynamicVector<TElem>::update(const TElem& elementToUpdate, const TElem& updatedElement) {
        1:  103-block  0
        1:  104:    int positionWhereFound = searchElementInList(elementToUpdate);
        1:  105:    if (positionWhereFound != -1) {
        1:  105-block  0
        1:  106:        elementsList[positionWhereFound] = updatedElement;
        1:  107:    }
        1:  107-block  0
        1:  108:}
        1:  108-block  0
        -:  109:
        -:  110:template<typename TElem>
        2:  111:TElem& DynamicVector<TElem>::operator[](int positionOfTheElement) {
        2:  111-block  0
        2:  112:    if (positionOfTheElement < 0 || positionOfTheElement >= sizeOfVector)
        2:  112-block  0
        2:  112-block  1
        1:  113:        throw std::runtime_error("Invalid position");
        1:  113-block  0
        1:  113-block  1
    $$$$$:  113-block  2
    $$$$$:  113-block  3
        1:  114:    return elementsList[positionOfTheElement];}
        1:  114-block  0
        -:  115:
        -:  116:template<typename TElem>
        3:  117:int DynamicVector<TElem>::size() {
        3:  117-block  0
        3:  118:    return sizeOfVector;
        3:  118-block  0
        -:  119:}
        -:  120:
        -:  121:template<typename TElem>
        2:  122:int DynamicVector<TElem>::capacity()
        2:  122-block  0
        -:  123:{
        2:  124:    return capacityOfVector;
        2:  124-block  0
        -:  125:}
        -:  126:
        -:  127:template<typename TElem>
        1:  128:DynamicVector<TElem>& DynamicVector<TElem>::operator=(const  DynamicVector& vectorUsed){
        1:  128-block  0
        1:  129:    if (this != &vectorUsed) {
        1:  129-block  0
        1:  130:        if (capacityOfVector < vectorUsed.sizeOfVector) {
        1:  130-block  0
        1:  131:            delete[] elementsList;
        1:  131-block  0
        1:  131-block  1
        1:  132:            elementsList = new TElem[vectorUsed.capacityOfVector];
        1:  133:        }
        1:  133-block  0
        1:  134:        sizeOfVector = vectorUsed.sizeOfVector;
        1:  135:        capacityOfVector = vectorUsed.capacityOfVector;
        3:  136:        for (int i = 0; i < sizeOfVector; ++i)
        1:  136-block  0
        3:  136-block  1
        2:  136-block  2
        2:  137:            elementsList[i] = vectorUsed.elementsList[i];
        2:  137-block  0
        1:  138:    }
        1:  138-block  0
        1:  139:    return *this;
        1:  139-block  0
        -:  140:}
