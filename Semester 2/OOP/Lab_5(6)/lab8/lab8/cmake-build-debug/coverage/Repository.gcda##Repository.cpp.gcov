        -:    0:Source:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/Repository.cpp
        -:    0:Graph:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/Repository.gcno
        -:    0:Data:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/Repository.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "Repository.h"
        -:    2:#include <iostream>
        -:    3:#include <fstream>
        -:    4:
        -:    5:
        -:    6:
        -:    7://Load movies from given file
       14:    8:void Repository::loadMoviesFromFile()
       14:    8-block  0
        -:    9:{
       14:   10:    if (movieFileName == "")
       14:   10-block  0
        9:   11:        return;
        9:   11-block  0
        5:   12:    Movie movieLoadedFromFile;
        5:   12-block  0
        5:   12-block  1
        5:   12-block  2
    $$$$$:   12-block  3
    $$$$$:   12-block  4
    $$$$$:   12-block  5
    $$$$$:   12-block  6
    $$$$$:   12-block  7
    $$$$$:   12-block  8
        5:   13:    std::ifstream fin(movieFileName);
        5:   13-block  0
       10:   14:    while (fin >> movieLoadedFromFile) {
        5:   14-block  0
       10:   14-block  1
       10:   14-block  2
       10:   14-block  3
        5:   14-block  4
        5:   15:        if(std::find(movieList.begin(), movieList.end(), movieLoadedFromFile) == movieList.end())
        5:   15-block  0
        5:   15-block  1
        3:   16:            movieList.push_back(movieLoadedFromFile);
        3:   16-block  0
        3:   16-block  1
        -:   17:    }
        5:   18:    fin.close();
        5:   18-block  0
       14:   19:}
    $$$$$:   19-block  0
    $$$$$:   19-block  1
        5:   19-block  2
       14:   19-block  3
    $$$$$:   19-block  4
        -:   20:
        -:   21:
        -:   22://Write movies to given file
       13:   23:void Repository::writeMoviesToFile()
       13:   23-block  0
        -:   24:{
       13:   25:    if (movieFileName == "")
       13:   25-block  0
        9:   26:        return;
        9:   26-block  0
        4:   27:    std::ofstream fout(movieFileName);
        8:   28:    for (const Movie& movieToWrite : movieList) {
        4:   28-block  0
        8:   28-block  1
        4:   28-block  2
        4:   28-block  3
        4:   29:        fout << movieToWrite << '\n';
        4:   29-block  0
        4:   29-block  1
        -:   30:    }
        4:   31:    fout.close();
        4:   31-block  0
       13:   32:}
    $$$$$:   32-block  0
        4:   32-block  1
       13:   32-block  2
    $$$$$:   32-block  3
        -:   33:
        -:   34://Repository constructor
       24:   35:Repository::Repository(const std::string& nameOfTheFileUsed)
       12:   35-block  0
       12:   35-block  1
       12:   36:{
       12:   37:    std::vector<Movie>{};
       12:   38:    movieFileName = nameOfTheFileUsed;
       12:   38-block  0
       12:   39:    loadMoviesFromFile();
       12:   39-block  0
        -:   40:
       24:   41:}
       12:   41-block  0
    $$$$$:   41-block  1
    $$$$$:   41-block  2
       12:   41-block  3
        -:   42:
        -:   43://Repository destructor
        6:   44:Repository::~Repository()
        3:   44-block  0
        3:   44-block  1
        3:   45:{
        3:   46:    writeMoviesToFile();
        3:   46-block  0
        6:   47:}
        3:   47-block  0
    $$$$$:   47-block  1
    $$$$$:   47-block  2
        3:   47-block  3
        -:   48:
        -:   49:
        -:   50://Add given movie to list
        9:   51:int Repository::addMovie(const Movie& movieToAdd)
        9:   51-block  0
        -:   52:{
        9:   53:    auto iteratorWhereMovieIsFound = std::find(movieList.begin(), movieList.end(),  movieToAdd);
        9:   54:    if (iteratorWhereMovieIsFound !=  movieList.end() && movieList.size() != 0)
        9:   54-block  0
        2:   54-block  1
        9:   54-block  2
        2:   55:        return -1;
        2:   55-block  0
        7:   56:    movieList.push_back(movieToAdd);
        7:   57:    writeMoviesToFile();
        7:   58:    return 1;
        7:   58-block  0
        9:   59:}
        9:   59-block  0
        -:   60:
        -:   61:
        -:   62:
        -:   63://Delete a movie from the movieList
        2:   64:int Repository::deleteMovie(const Movie& movieToDelete)
        2:   64-block  0
        -:   65:{
        2:   66:    auto iteratorWhereMovieIsFound = std::find(movieList.begin(), movieList.end(),  movieToDelete);
        2:   67:    if (iteratorWhereMovieIsFound == movieList.end())
        2:   67-block  0
        1:   68:        return -1;
        1:   68-block  0
        1:   69:    movieList.erase(iteratorWhereMovieIsFound);
        1:   70:    writeMoviesToFile();
        1:   71:    return 1;
        1:   71-block  0
        2:   72:}
        2:   72-block  0
        -:   73:
        -:   74:
        -:   75://Update a movie from the movieList
        2:   76:int Repository::updateMovie(const Movie& movieToUpdateWith)
        2:   76-block  0
        -:   77:{
        2:   78:    auto iteratorWhereMovieIsFound = std::find(movieList.begin(), movieList.end(),  movieToUpdateWith);
        2:   79:	if (iteratorWhereMovieIsFound == movieList.end())
        2:   79-block  0
        1:   80:		return -1;
        1:   80-block  0
        1:   81:	*iteratorWhereMovieIsFound = movieToUpdateWith;
        1:   82:    writeMoviesToFile();
        1:   83:	return 1;
        1:   83-block  0
        2:   84:}
        2:   84-block  0
        -:   85:
        -:   86://Change the file name of the repository
    #####:   87:void Repository::changeFileName(const std::string& nameOfTheFileUsed)
    $$$$$:   87-block  0
        -:   88:{
        -:   89:
    #####:   90:    movieFileName = nameOfTheFileUsed;
    #####:   91:    writeMoviesToFile();
    #####:   92:}
    $$$$$:   92-block  0
        -:   93:
        -:   94:
        -:   95://Get the movie at a certain position
        2:   96:Movie Repository::getMovieAtPosition(int positionOfMovie)
        2:   96-block  0
        -:   97:{
        2:   98:	if (positionOfMovie < 0 || positionOfMovie >= movieList.size())
        2:   98-block  0
        1:   98-block  1
        1:   99:		throw std::runtime_error("Invalid position");
        1:   99-block  0
        1:   99-block  1
    $$$$$:   99-block  2
    $$$$$:   99-block  3
        1:  100:	return movieList[positionOfMovie];}
        1:  100-block  0
        -:  101:
        -:  102://Get the number of movies in the list
        3:  103:int Repository::getNumberOfMovies()
        3:  103-block  0
        -:  104:{
        3:  105:	return movieList.size();
        3:  105-block  0
        -:  106:}
        -:  107:
        -:  108://Get all the movies with a given genre
    #####:  109:std::vector<Movie> Repository::getMoviesByGenre(const std::string& genreGiven)
    $$$$$:  109-block  0
        -:  110:{
    #####:  111:    std::vector<Movie> moviesWithGenre;
    #####:  112:    if (genreGiven == "")
    $$$$$:  112-block  0
    #####:  113:        return movieList;
    $$$$$:  113-block  0
    $$$$$:  113-block  1
    #####:  114:    std::copy_if(movieList.begin(), movieList.end(), std::back_inserter(moviesWithGenre), [&genreGiven](const Movie& movie) {return movie.getGenre() == genreGiven; });
    $$$$$:  114-block  0
    $$$$$:  114-block  1
    $$$$$:  114-block  2
    $$$$$:  114-block  3
    #####:  115:    return moviesWithGenre;
    $$$$$:  115-block  0
    #####:  116:}
    $$$$$:  116-block  0
    $$$$$:  116-block  1
    $$$$$:  116-block  2
        -:  117:
        -:  118://Get all the movies
    #####:  119:std::vector<Movie> Repository::getAllMovies()
    $$$$$:  119-block  0
        -:  120:{
    #####:  121:	return movieList;
    $$$$$:  121-block  0
        -:  122:}
        -:  123:
        -:  124:
        -:  125://Get all the movies in the watch list
    #####:  126:std::vector<Movie> Repository::getAllWatchListMovies()
    $$$$$:  126-block  0
        -:  127:{
    #####:  128:	return userWatchList;
    $$$$$:  128-block  0
        -:  129:}
        -:  130:
        -:  131:
        -:  132://Add a certain movie to the watch list
    #####:  133:int Repository::addMovieToWatchlist(const Movie& movieToAdd)
    $$$$$:  133-block  0
        -:  134:{
    #####:  135:    auto iteratorWhereMovieIsFound = std::find(userWatchList.begin(), userWatchList.end(), movieToAdd);
    #####:  136:    if (iteratorWhereMovieIsFound != userWatchList.end())
    $$$$$:  136-block  0
    #####:  137:        return -1;
    $$$$$:  137-block  0
    #####:  138:    userWatchList.push_back(movieToAdd);
    #####:  139:    return 1;
    $$$$$:  139-block  0
    #####:  140:}
    $$$$$:  140-block  0
        -:  141:
        -:  142:
        -:  143://Add a certain movie to the watch list by the title
    #####:  144:int Repository::addMovieToWatchListByTitle(const std::string& titleOfTheMovieToAdd)
    $$$$$:  144-block  0
        -:  145:{
    #####:  146:    auto iteratorWhereMovieFound = std::find_if(movieList.begin(), movieList.end(), [&titleOfTheMovieToAdd](const Movie& movie) {return movie.getTitle() == titleOfTheMovieToAdd; });
    $$$$$:  146-block  0
    $$$$$:  146-block  1
    #####:  147:    if (iteratorWhereMovieFound == movieList.end())
    $$$$$:  147-block  0
    #####:  148:        return -1;
    $$$$$:  148-block  0
    #####:  149:    userWatchList.push_back(*iteratorWhereMovieFound);
    #####:  150:    return 1;
    $$$$$:  150-block  0
    #####:  151:}
    $$$$$:  151-block  0
        -:  152:
        -:  153://Get the number of movies in the watch list
    #####:  154:int Repository::getNumberOfMoviesWatchList()
    $$$$$:  154-block  0
        -:  155:{
    #####:  156:	return userWatchList.size();
    $$$$$:  156-block  0
        -:  157:}
