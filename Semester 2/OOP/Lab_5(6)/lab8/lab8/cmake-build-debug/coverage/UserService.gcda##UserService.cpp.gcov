        -:    0:Source:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/UserService.cpp
        -:    0:Graph:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/UserService.gcno
        -:    0:Data:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/lab8/lab8/cmake-build-debug/CMakeFiles/lab8.dir/UserService.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "UserService.h"
        -:    2:#include <iostream>
        -:    3:/*
        -:    4:    UserService constructor - repository - repository used
        -:    5:                              currentMoviePosition - the index of the movie listed
        -:    6:*/
       24:    7:UserService::UserService(FileRepository& repository, int currentMoviePosition) : repository{ repository }, currentMoviePosition{ currentMoviePosition }, currentMoviesByGenre{repository.getAllMovies()}{}
       12:    7-block  0
       12:    7-block  1
       12:    7-block  2
       12:    7-block  3
        -:    8:
        -:    9://Get the list of all movies
        1:   10:std::vector<Movie> UserService::userGetMovieList()
        1:   10-block  0
        -:   11:{
        1:   12:	return repository.getAllMovies();
        1:   12-block  0
        -:   13:}
        -:   14:
        -:   15://Get the list of movies in the watch list
        1:   16:std::vector<Movie> UserService::userGetWatchList()
        1:   16-block  0
        -:   17:{
        1:   18:    return repository.getAllWatchListMovies();
        1:   18-block  0
        -:   19:}
        -:   20:
        -:   21://Get the list of movies with a given genre
        7:   22:int UserService::listMoviesByGenre(const std::string& genreGiven)
        7:   22-block  0
        -:   23:{
        7:   24:    currentMoviesByGenre = repository.getMoviesByGenre(genreGiven);
        7:   25:    if (currentMoviesByGenre.size() == 0)
        7:   25-block  0
        1:   26:        return -1;
        1:   26-block  0
        6:   27:    currentMoviePosition = 0;
        6:   28:    return 1;
        6:   28-block  0
        7:   29:}
        7:   29-block  0
        -:   30:
        -:   31://Add a movie to the watch list by the current movie position
        4:   32:int UserService::addMovieToWatchList()
        4:   32-block  0
        -:   33:{
        4:   34:    return repository.addMovieToWatchlist(currentMoviesByGenre[currentMoviePosition]);
        4:   34-block  0
        -:   35:}
        -:   36:
        -:   37://Add a movie to the watch list by the given title
        3:   38:int UserService::addMovieToWatchListByTitle(const std::string& titleOfTheMovieToAdd)
        3:   38-block  0
        -:   39:{
        3:   40:    return repository.addMovieToWatchListByTitle(titleOfTheMovieToAdd);
        3:   40-block  0
        -:   41:}
        -:   42:
        -:   43:
        -:   44://Iterate to the next movie in the list
        4:   45:void UserService::goToNextMovieByGenre()
        4:   45-block  0
        -:   46:{
        4:   47:    currentMoviePosition++;
        4:   48:    if(currentMoviePosition == currentMoviesByGenre.size())
        4:   48-block  0
        1:   49:        currentMoviePosition = 0; 
        1:   49-block  0
        4:   50:}
        4:   50-block  0
        -:   51:
        -:   52://Get the length of the watch list
        1:   53:int UserService::getWatchListLength()
        1:   53-block  0
        -:   54:{
        1:   55:    return repository.getNumberOfMoviesWatchList();
        1:   55-block  0
        -:   56:}
        -:   57:
        -:   58://Get the current movie in the list
        2:   59:Movie UserService::getCurrentMovie()
        2:   59-block  0
        -:   60:{
        2:   61:    return currentMoviesByGenre[currentMoviePosition];
        2:   61-block  0
        -:   62:}
        -:   63:
