        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/string
        -:    0:Graph:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/Lab 6 final/LABFINAL8/cmake-build-debug/CMakeFiles/LABFINAL8.dir/UI.gcno
        -:    0:Data:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/Lab 6 final/LABFINAL8/cmake-build-debug/CMakeFiles/LABFINAL8.dir/UI.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===--------------------------- string -----------------------------------===//
        -:    3://
        -:    4://                     The LLVM Compiler Infrastructure
        -:    5://
        -:    6:// This file is distributed under the University of Illinois Open Source
        -:    7:// License. See LICENSE.TXT for details.
        -:    8://
        -:    9://===----------------------------------------------------------------------===//
        -:   10:
        -:   11:#ifndef _LIBCPP_STRING
        -:   12:#define _LIBCPP_STRING
        -:   13:
        -:   14:/*
        -:   15:    string synopsis
        -:   16:
        -:   17:namespace std
        -:   18:{
        -:   19:
        -:   20:template <class stateT>
        -:   21:class fpos
        -:   22:{
        -:   23:private:
        -:   24:    stateT st;
        -:   25:public:
        -:   26:    fpos(streamoff = streamoff());
        -:   27:
        -:   28:    operator streamoff() const;
        -:   29:
        -:   30:    stateT state() const;
        -:   31:    void state(stateT);
        -:   32:
        -:   33:    fpos& operator+=(streamoff);
        -:   34:    fpos  operator+ (streamoff) const;
        -:   35:    fpos& operator-=(streamoff);
        -:   36:    fpos  operator- (streamoff) const;
        -:   37:};
        -:   38:
        -:   39:template <class stateT> streamoff operator-(const fpos<stateT>& x, const fpos<stateT>& y);
        -:   40:
        -:   41:template <class stateT> bool operator==(const fpos<stateT>& x, const fpos<stateT>& y);
        -:   42:template <class stateT> bool operator!=(const fpos<stateT>& x, const fpos<stateT>& y);
        -:   43:
        -:   44:template <class charT>
        -:   45:struct char_traits
        -:   46:{
        -:   47:    typedef charT     char_type;
        -:   48:    typedef ...       int_type;
        -:   49:    typedef streamoff off_type;
        -:   50:    typedef streampos pos_type;
        -:   51:    typedef mbstate_t state_type;
        -:   52:
        -:   53:    static void assign(char_type& c1, const char_type& c2) noexcept;
        -:   54:    static constexpr bool eq(char_type c1, char_type c2) noexcept;
        -:   55:    static constexpr bool lt(char_type c1, char_type c2) noexcept;
        -:   56:
        -:   57:    static int              compare(const char_type* s1, const char_type* s2, size_t n);
        -:   58:    static size_t           length(const char_type* s);
        -:   59:    static const char_type* find(const char_type* s, size_t n, const char_type& a);
        -:   60:    static char_type*       move(char_type* s1, const char_type* s2, size_t n);
        -:   61:    static char_type*       copy(char_type* s1, const char_type* s2, size_t n);
        -:   62:    static char_type*       assign(char_type* s, size_t n, char_type a);
        -:   63:
        -:   64:    static constexpr int_type  not_eof(int_type c) noexcept;
        -:   65:    static constexpr char_type to_char_type(int_type c) noexcept;
        -:   66:    static constexpr int_type  to_int_type(char_type c) noexcept;
        -:   67:    static constexpr bool      eq_int_type(int_type c1, int_type c2) noexcept;
        -:   68:    static constexpr int_type  eof() noexcept;
        -:   69:};
        -:   70:
        -:   71:template <> struct char_traits<char>;
        -:   72:template <> struct char_traits<wchar_t>;
        -:   73:
        -:   74:template<class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >
        -:   75:class basic_string
        -:   76:{
        -:   77:public:
        -:   78:// types:
        -:   79:    typedef traits traits_type;
        -:   80:    typedef typename traits_type::char_type value_type;
        -:   81:    typedef Allocator allocator_type;
        -:   82:    typedef typename allocator_type::size_type size_type;
        -:   83:    typedef typename allocator_type::difference_type difference_type;
        -:   84:    typedef typename allocator_type::reference reference;
        -:   85:    typedef typename allocator_type::const_reference const_reference;
        -:   86:    typedef typename allocator_type::pointer pointer;
        -:   87:    typedef typename allocator_type::const_pointer const_pointer;
        -:   88:    typedef implementation-defined iterator;
        -:   89:    typedef implementation-defined const_iterator;
        -:   90:    typedef std::reverse_iterator<iterator> reverse_iterator;
        -:   91:    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        -:   92:
        -:   93:    static const size_type npos = -1;
        -:   94:
        -:   95:    basic_string()
        -:   96:        noexcept(is_nothrow_default_constructible<allocator_type>::value);
        -:   97:    explicit basic_string(const allocator_type& a);
        -:   98:    basic_string(const basic_string& str);
        -:   99:    basic_string(basic_string&& str)
        -:  100:        noexcept(is_nothrow_move_constructible<allocator_type>::value);
        -:  101:    basic_string(const basic_string& str, size_type pos,
        -:  102:                 const allocator_type& a = allocator_type());
        -:  103:    basic_string(const basic_string& str, size_type pos, size_type n,
        -:  104:                 const Allocator& a = Allocator());
        -:  105:    template<class T>
        -:  106:        basic_string(const T& t, size_type pos, size_type n, const Allocator& a = Allocator()); // C++17
        -:  107:    template <class T>
        -:  108:        explicit basic_string(const T& t, const Allocator& a = Allocator()); // C++17
        -:  109:    basic_string(const value_type* s, const allocator_type& a = allocator_type());
        -:  110:    basic_string(const value_type* s, size_type n, const allocator_type& a = allocator_type());
        -:  111:    basic_string(size_type n, value_type c, const allocator_type& a = allocator_type());
        -:  112:    template<class InputIterator>
        -:  113:        basic_string(InputIterator begin, InputIterator end,
        -:  114:                     const allocator_type& a = allocator_type());
        -:  115:    basic_string(initializer_list<value_type>, const Allocator& = Allocator());
        -:  116:    basic_string(const basic_string&, const Allocator&);
        -:  117:    basic_string(basic_string&&, const Allocator&);
        -:  118:
        -:  119:    ~basic_string();
        -:  120:
        -:  121:    operator basic_string_view<charT, traits>() const noexcept;
        -:  122:
        -:  123:    basic_string& operator=(const basic_string& str);
        -:  124:    template <class T>
        -:  125:        basic_string& operator=(const T& t); // C++17
        -:  126:    basic_string& operator=(basic_string&& str)
        -:  127:        noexcept(
        -:  128:             allocator_type::propagate_on_container_move_assignment::value ||
        -:  129:             allocator_type::is_always_equal::value ); // C++17
        -:  130:    basic_string& operator=(const value_type* s);
        -:  131:    basic_string& operator=(value_type c);
        -:  132:    basic_string& operator=(initializer_list<value_type>);
        -:  133:
        -:  134:    iterator       begin() noexcept;
        -:  135:    const_iterator begin() const noexcept;
        -:  136:    iterator       end() noexcept;
        -:  137:    const_iterator end() const noexcept;
        -:  138:
        -:  139:    reverse_iterator       rbegin() noexcept;
        -:  140:    const_reverse_iterator rbegin() const noexcept;
        -:  141:    reverse_iterator       rend() noexcept;
        -:  142:    const_reverse_iterator rend() const noexcept;
        -:  143:
        -:  144:    const_iterator         cbegin() const noexcept;
        -:  145:    const_iterator         cend() const noexcept;
        -:  146:    const_reverse_iterator crbegin() const noexcept;
        -:  147:    const_reverse_iterator crend() const noexcept;
        -:  148:
        -:  149:    size_type size() const noexcept;
        -:  150:    size_type length() const noexcept;
        -:  151:    size_type max_size() const noexcept;
        -:  152:    size_type capacity() const noexcept;
        -:  153:
        -:  154:    void resize(size_type n, value_type c);
        -:  155:    void resize(size_type n);
        -:  156:
        -:  157:    void reserve(size_type res_arg = 0);
        -:  158:    void shrink_to_fit();
        -:  159:    void clear() noexcept;
        -:  160:    bool empty() const noexcept;
        -:  161:
        -:  162:    const_reference operator[](size_type pos) const;
        -:  163:    reference       operator[](size_type pos);
        -:  164:
        -:  165:    const_reference at(size_type n) const;
        -:  166:    reference       at(size_type n);
        -:  167:
        -:  168:    basic_string& operator+=(const basic_string& str);
        -:  169:    template <class T>
        -:  170:        basic_string& operator+=(const T& t);              // C++17
        -:  171:    basic_string& operator+=(const value_type* s);
        -:  172:    basic_string& operator+=(value_type c);
        -:  173:    basic_string& operator+=(initializer_list<value_type>);
        -:  174:
        -:  175:    basic_string& append(const basic_string& str);
        -:  176:    template <class T>
        -:  177:        basic_string& append(const T& t);                 // C++17
        -:  178:    basic_string& append(const basic_string& str, size_type pos, size_type n=npos); //C++14
        -:  179:    template <class T>
        -:  180:        basic_string& append(const T& t, size_type pos, size_type n=npos); // C++17
        -:  181:    basic_string& append(const value_type* s, size_type n);
        -:  182:    basic_string& append(const value_type* s);
        -:  183:    basic_string& append(size_type n, value_type c);
        -:  184:    template<class InputIterator>
        -:  185:        basic_string& append(InputIterator first, InputIterator last);
        -:  186:    basic_string& append(initializer_list<value_type>);
        -:  187:
        -:  188:    void push_back(value_type c);
        -:  189:    void pop_back();
        -:  190:    reference       front();
        -:  191:    const_reference front() const;
        -:  192:    reference       back();
        -:  193:    const_reference back() const;
        -:  194:
        -:  195:    basic_string& assign(const basic_string& str);
        -:  196:    template <class T>
        -:  197:        basic_string& assign(const T& t);  // C++17
        -:  198:    basic_string& assign(basic_string&& str);
        -:  199:    basic_string& assign(const basic_string& str, size_type pos, size_type n=npos); // C++14
        -:  200:    template <class T>
        -:  201:        basic_string& assign(const T& t, size_type pos, size_type n=npos); // C++17
        -:  202:    basic_string& assign(const value_type* s, size_type n);
        -:  203:    basic_string& assign(const value_type* s);
        -:  204:    basic_string& assign(size_type n, value_type c);
        -:  205:    template<class InputIterator>
        -:  206:        basic_string& assign(InputIterator first, InputIterator last);
        -:  207:    basic_string& assign(initializer_list<value_type>);
        -:  208:
        -:  209:    basic_string& insert(size_type pos1, const basic_string& str);
        -:  210:    template <class T>
        -:  211:        basic_string& insert(size_type pos1, const T& t);
        -:  212:    basic_string& insert(size_type pos1, const basic_string& str,
        -:  213:                         size_type pos2, size_type n);
        -:  214:    template <class T>
        -:  215:        basic_string& insert(size_type pos1, const T& t, size_type pos2, size_type n); // C++17
        -:  216:    basic_string& insert(size_type pos, const value_type* s, size_type n=npos); //C++14
        -:  217:    basic_string& insert(size_type pos, const value_type* s);
        -:  218:    basic_string& insert(size_type pos, size_type n, value_type c);
        -:  219:    iterator      insert(const_iterator p, value_type c);
        -:  220:    iterator      insert(const_iterator p, size_type n, value_type c);
        -:  221:    template<class InputIterator>
        -:  222:        iterator insert(const_iterator p, InputIterator first, InputIterator last);
        -:  223:    iterator      insert(const_iterator p, initializer_list<value_type>);
        -:  224:
        -:  225:    basic_string& erase(size_type pos = 0, size_type n = npos);
        -:  226:    iterator      erase(const_iterator position);
        -:  227:    iterator      erase(const_iterator first, const_iterator last);
        -:  228:
        -:  229:    basic_string& replace(size_type pos1, size_type n1, const basic_string& str);
        -:  230:    template <class T>
        -:  231:    basic_string& replace(size_type pos1, size_type n1, const T& t);  // C++17
        -:  232:    basic_string& replace(size_type pos1, size_type n1, const basic_string& str,
        -:  233:                          size_type pos2, size_type n2=npos); // C++14
        -:  234:    template <class T>
        -:  235:        basic_string& replace(size_type pos1, size_type n1, const T& t,
        -:  236:                              size_type pos2, size_type n); // C++17
        -:  237:    basic_string& replace(size_type pos, size_type n1, const value_type* s, size_type n2);
        -:  238:    basic_string& replace(size_type pos, size_type n1, const value_type* s);
        -:  239:    basic_string& replace(size_type pos, size_type n1, size_type n2, value_type c);
        -:  240:    basic_string& replace(const_iterator i1, const_iterator i2, const basic_string& str);
        -:  241:    template <class T>
        -:  242:        basic_string& replace(const_iterator i1, const_iterator i2, const T& t);  // C++17
        -:  243:    basic_string& replace(const_iterator i1, const_iterator i2, const value_type* s, size_type n);
        -:  244:    basic_string& replace(const_iterator i1, const_iterator i2, const value_type* s);
        -:  245:    basic_string& replace(const_iterator i1, const_iterator i2, size_type n, value_type c);
        -:  246:    template<class InputIterator>
        -:  247:        basic_string& replace(const_iterator i1, const_iterator i2, InputIterator j1, InputIterator j2);
        -:  248:    basic_string& replace(const_iterator i1, const_iterator i2, initializer_list<value_type>);
        -:  249:
        -:  250:    size_type copy(value_type* s, size_type n, size_type pos = 0) const;
        -:  251:    basic_string substr(size_type pos = 0, size_type n = npos) const;
        -:  252:
        -:  253:    void swap(basic_string& str)
        -:  254:        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||
        -:  255:                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17
        -:  256:
        -:  257:    const value_type* c_str() const noexcept;
        -:  258:    const value_type* data() const noexcept;
        -:  259:          value_type* data()       noexcept;   // C++17
        -:  260:
        -:  261:    allocator_type get_allocator() const noexcept;
        -:  262:
        -:  263:    size_type find(const basic_string& str, size_type pos = 0) const noexcept;
        -:  264:    template <class T>
        -:  265:        size_type find(const T& t, size_type pos = 0) const;  // C++17
        -:  266:    size_type find(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  267:    size_type find(const value_type* s, size_type pos = 0) const noexcept;
        -:  268:    size_type find(value_type c, size_type pos = 0) const noexcept;
        -:  269:
        -:  270:    size_type rfind(const basic_string& str, size_type pos = npos) const noexcept;
        -:  271:    template <class T>
        -:  272:        size_type rfind(const T& t, size_type pos = npos) const;  // C++17
        -:  273:    size_type rfind(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  274:    size_type rfind(const value_type* s, size_type pos = npos) const noexcept;
        -:  275:    size_type rfind(value_type c, size_type pos = npos) const noexcept;
        -:  276:
        -:  277:    size_type find_first_of(const basic_string& str, size_type pos = 0) const noexcept;
        -:  278:    template <class T>
        -:  279:        size_type find_first_of(const T& t, size_type pos = 0) const; // C++17
        -:  280:    size_type find_first_of(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  281:    size_type find_first_of(const value_type* s, size_type pos = 0) const noexcept;
        -:  282:    size_type find_first_of(value_type c, size_type pos = 0) const noexcept;
        -:  283:
        -:  284:    size_type find_last_of(const basic_string& str, size_type pos = npos) const noexcept;
        -:  285:    template <class T>
        -:  286:        size_type find_last_of(const T& t, size_type pos = npos) const noexcept;  // C++17
        -:  287:    size_type find_last_of(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  288:    size_type find_last_of(const value_type* s, size_type pos = npos) const noexcept;
        -:  289:    size_type find_last_of(value_type c, size_type pos = npos) const noexcept;
        -:  290:
        -:  291:    size_type find_first_not_of(const basic_string& str, size_type pos = 0) const noexcept;
        -:  292:    template <class T>
        -:  293:        size_type find_first_not_of(const T& t, size_type pos = 0) const; // C++17
        -:  294:    size_type find_first_not_of(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  295:    size_type find_first_not_of(const value_type* s, size_type pos = 0) const noexcept;
        -:  296:    size_type find_first_not_of(value_type c, size_type pos = 0) const noexcept;
        -:  297:
        -:  298:    size_type find_last_not_of(const basic_string& str, size_type pos = npos) const noexcept;
        -:  299:    template <class T>
        -:  300:        size_type find_last_not_of(const T& t, size_type pos = npos) const; // C++17
        -:  301:    size_type find_last_not_of(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  302:    size_type find_last_not_of(const value_type* s, size_type pos = npos) const noexcept;
        -:  303:    size_type find_last_not_of(value_type c, size_type pos = npos) const noexcept;
        -:  304:
        -:  305:    int compare(const basic_string& str) const noexcept;
        -:  306:    template <class T>
        -:  307:        int compare(const T& t) const noexcept;  // C++17
        -:  308:    int compare(size_type pos1, size_type n1, const basic_string& str) const;
        -:  309:    template <class T>
        -:  310:        int compare(size_type pos1, size_type n1, const T& t) const;  // C++17
        -:  311:    int compare(size_type pos1, size_type n1, const basic_string& str,
        -:  312:                size_type pos2, size_type n2=npos) const; // C++14
        -:  313:    template <class T>
        -:  314:        int compare(size_type pos1, size_type n1, const T& t,
        -:  315:                    size_type pos2, size_type n2=npos) const; // C++17
        -:  316:    int compare(const value_type* s) const noexcept;
        -:  317:    int compare(size_type pos1, size_type n1, const value_type* s) const;
        -:  318:    int compare(size_type pos1, size_type n1, const value_type* s, size_type n2) const;
        -:  319:
        -:  320:    bool starts_with(basic_string_view<charT, traits> sv) const noexcept; // C++2a
        -:  321:    bool starts_with(charT c) const noexcept;                             // C++2a
        -:  322:    bool starts_with(const charT* s) const;                               // C++2a
        -:  323:    bool ends_with(basic_string_view<charT, traits> sv) const noexcept;   // C++2a
        -:  324:    bool ends_with(charT c) const noexcept;                               // C++2a
        -:  325:    bool ends_with(const charT* s) const;                                 // C++2a
        -:  326:
        -:  327:    bool __invariants() const;
        -:  328:};
        -:  329:
        -:  330:template<class InputIterator,
        -:  331:         class Allocator = allocator<typename iterator_traits<InputIterator>::value_type>>
        -:  332:basic_string(InputIterator, InputIterator, Allocator = Allocator())
        -:  333:   -> basic_string<typename iterator_traits<InputIterator>::value_type,
        -:  334:                  char_traits<typename iterator_traits<InputIterator>::value_type>,
        -:  335:                  Allocator>;   // C++17
        -:  336:
        -:  337:template<class charT, class traits, class Allocator>
        -:  338:basic_string<charT, traits, Allocator>
        -:  339:operator+(const basic_string<charT, traits, Allocator>& lhs,
        -:  340:          const basic_string<charT, traits, Allocator>& rhs);
        -:  341:
        -:  342:template<class charT, class traits, class Allocator>
        -:  343:basic_string<charT, traits, Allocator>
        -:  344:operator+(const charT* lhs , const basic_string<charT,traits,Allocator>&rhs);
        -:  345:
        -:  346:template<class charT, class traits, class Allocator>
        -:  347:basic_string<charT, traits, Allocator>
        -:  348:operator+(charT lhs, const basic_string<charT,traits,Allocator>& rhs);
        -:  349:
        -:  350:template<class charT, class traits, class Allocator>
        -:  351:basic_string<charT, traits, Allocator>
        -:  352:operator+(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs);
        -:  353:
        -:  354:template<class charT, class traits, class Allocator>
        -:  355:basic_string<charT, traits, Allocator>
        -:  356:operator+(const basic_string<charT, traits, Allocator>& lhs, charT rhs);
        -:  357:
        -:  358:template<class charT, class traits, class Allocator>
        -:  359:bool operator==(const basic_string<charT, traits, Allocator>& lhs,
        -:  360:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  361:
        -:  362:template<class charT, class traits, class Allocator>
        -:  363:bool operator==(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  364:
        -:  365:template<class charT, class traits, class Allocator>
        -:  366:bool operator==(const basic_string<charT,traits,Allocator>& lhs, const charT* rhs) noexcept;
        -:  367:
        -:  368:template<class charT, class traits, class Allocator>
        -:  369:bool operator!=(const basic_string<charT,traits,Allocator>& lhs,
        -:  370:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  371:
        -:  372:template<class charT, class traits, class Allocator>
        -:  373:bool operator!=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  374:
        -:  375:template<class charT, class traits, class Allocator>
        -:  376:bool operator!=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  377:
        -:  378:template<class charT, class traits, class Allocator>
        -:  379:bool operator< (const basic_string<charT, traits, Allocator>& lhs,
        -:  380:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  381:
        -:  382:template<class charT, class traits, class Allocator>
        -:  383:bool operator< (const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  384:
        -:  385:template<class charT, class traits, class Allocator>
        -:  386:bool operator< (const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  387:
        -:  388:template<class charT, class traits, class Allocator>
        -:  389:bool operator> (const basic_string<charT, traits, Allocator>& lhs,
        -:  390:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  391:
        -:  392:template<class charT, class traits, class Allocator>
        -:  393:bool operator> (const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  394:
        -:  395:template<class charT, class traits, class Allocator>
        -:  396:bool operator> (const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  397:
        -:  398:template<class charT, class traits, class Allocator>
        -:  399:bool operator<=(const basic_string<charT, traits, Allocator>& lhs,
        -:  400:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  401:
        -:  402:template<class charT, class traits, class Allocator>
        -:  403:bool operator<=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  404:
        -:  405:template<class charT, class traits, class Allocator>
        -:  406:bool operator<=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  407:
        -:  408:template<class charT, class traits, class Allocator>
        -:  409:bool operator>=(const basic_string<charT, traits, Allocator>& lhs,
        -:  410:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  411:
        -:  412:template<class charT, class traits, class Allocator>
        -:  413:bool operator>=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  414:
        -:  415:template<class charT, class traits, class Allocator>
        -:  416:bool operator>=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  417:
        -:  418:template<class charT, class traits, class Allocator>
        -:  419:void swap(basic_string<charT, traits, Allocator>& lhs,
        -:  420:          basic_string<charT, traits, Allocator>& rhs)
        -:  421:            noexcept(noexcept(lhs.swap(rhs)));
        -:  422:
        -:  423:template<class charT, class traits, class Allocator>
        -:  424:basic_istream<charT, traits>&
        -:  425:operator>>(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);
        -:  426:
        -:  427:template<class charT, class traits, class Allocator>
        -:  428:basic_ostream<charT, traits>&
        -:  429:operator<<(basic_ostream<charT, traits>& os, const basic_string<charT, traits, Allocator>& str);
        -:  430:
        -:  431:template<class charT, class traits, class Allocator>
        -:  432:basic_istream<charT, traits>&
        -:  433:getline(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str,
        -:  434:        charT delim);
        -:  435:
        -:  436:template<class charT, class traits, class Allocator>
        -:  437:basic_istream<charT, traits>&
        -:  438:getline(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);
        -:  439:
        -:  440:template<class charT, class traits, class Allocator, class U>
        -:  441:void erase(basic_string<charT, traits, Allocator>& c, const U& value); // C++20
        -:  442:template<class charT, class traits, class Allocator, class Predicate>
        -:  443:void erase_if(basic_string<charT, traits, Allocator>& c, Predicate pred); // C++20
        -:  444:
        -:  445:typedef basic_string<char>    string;
        -:  446:typedef basic_string<wchar_t> wstring;
        -:  447:typedef basic_string<char16_t> u16string;
        -:  448:typedef basic_string<char32_t> u32string;
        -:  449:
        -:  450:int                stoi  (const string& str, size_t* idx = 0, int base = 10);
        -:  451:long               stol  (const string& str, size_t* idx = 0, int base = 10);
        -:  452:unsigned long      stoul (const string& str, size_t* idx = 0, int base = 10);
        -:  453:long long          stoll (const string& str, size_t* idx = 0, int base = 10);
        -:  454:unsigned long long stoull(const string& str, size_t* idx = 0, int base = 10);
        -:  455:
        -:  456:float       stof (const string& str, size_t* idx = 0);
        -:  457:double      stod (const string& str, size_t* idx = 0);
        -:  458:long double stold(const string& str, size_t* idx = 0);
        -:  459:
        -:  460:string to_string(int val);
        -:  461:string to_string(unsigned val);
        -:  462:string to_string(long val);
        -:  463:string to_string(unsigned long val);
        -:  464:string to_string(long long val);
        -:  465:string to_string(unsigned long long val);
        -:  466:string to_string(float val);
        -:  467:string to_string(double val);
        -:  468:string to_string(long double val);
        -:  469:
        -:  470:int                stoi  (const wstring& str, size_t* idx = 0, int base = 10);
        -:  471:long               stol  (const wstring& str, size_t* idx = 0, int base = 10);
        -:  472:unsigned long      stoul (const wstring& str, size_t* idx = 0, int base = 10);
        -:  473:long long          stoll (const wstring& str, size_t* idx = 0, int base = 10);
        -:  474:unsigned long long stoull(const wstring& str, size_t* idx = 0, int base = 10);
        -:  475:
        -:  476:float       stof (const wstring& str, size_t* idx = 0);
        -:  477:double      stod (const wstring& str, size_t* idx = 0);
        -:  478:long double stold(const wstring& str, size_t* idx = 0);
        -:  479:
        -:  480:wstring to_wstring(int val);
        -:  481:wstring to_wstring(unsigned val);
        -:  482:wstring to_wstring(long val);
        -:  483:wstring to_wstring(unsigned long val);
        -:  484:wstring to_wstring(long long val);
        -:  485:wstring to_wstring(unsigned long long val);
        -:  486:wstring to_wstring(float val);
        -:  487:wstring to_wstring(double val);
        -:  488:wstring to_wstring(long double val);
        -:  489:
        -:  490:template <> struct hash<string>;
        -:  491:template <> struct hash<u16string>;
        -:  492:template <> struct hash<u32string>;
        -:  493:template <> struct hash<wstring>;
        -:  494:
        -:  495:basic_string<char>     operator "" s( const char *str,     size_t len ); // C++14
        -:  496:basic_string<wchar_t>  operator "" s( const wchar_t *str,  size_t len ); // C++14
        -:  497:basic_string<char16_t> operator "" s( const char16_t *str, size_t len ); // C++14
        -:  498:basic_string<char32_t> operator "" s( const char32_t *str, size_t len ); // C++14
        -:  499:
        -:  500:}  // std
        -:  501:
        -:  502:*/
        -:  503:
        -:  504:#include <__config>
        -:  505:#include <string_view>
        -:  506:#include <iosfwd>
        -:  507:#include <cstring>
        -:  508:#include <cstdio>  // For EOF.
        -:  509:#include <cwchar>
        -:  510:#include <algorithm>
        -:  511:#include <iterator>
        -:  512:#include <utility>
        -:  513:#include <memory>
        -:  514:#include <stdexcept>
        -:  515:#include <type_traits>
        -:  516:#include <initializer_list>
        -:  517:#include <__functional_base>
        -:  518:#include <__cxx_version>
        -:  519:#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS
        -:  520:#include <cstdint>
        -:  521:#endif
        -:  522:
        -:  523:#include <__debug>
        -:  524:
        -:  525:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  526:#pragma GCC system_header
        -:  527:#endif
        -:  528:
        -:  529:_LIBCPP_PUSH_MACROS
        -:  530:#include <__undef_macros>
        -:  531:
        -:  532:
        -:  533:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  534:
        -:  535:// fpos
        -:  536:
        -:  537:template <class _StateT>
        -:  538:class _LIBCPP_TEMPLATE_VIS fpos
        -:  539:{
        -:  540:private:
        -:  541:    _StateT __st_;
        -:  542:    streamoff __off_;
        -:  543:public:
        -:  544:    _LIBCPP_INLINE_VISIBILITY fpos(streamoff __off = streamoff()) : __st_(), __off_(__off) {}
        -:  545:
        -:  546:    _LIBCPP_INLINE_VISIBILITY operator streamoff() const {return __off_;}
        -:  547:
        -:  548:    _LIBCPP_INLINE_VISIBILITY _StateT state() const {return __st_;}
        -:  549:    _LIBCPP_INLINE_VISIBILITY void state(_StateT __st) {__st_ = __st;}
        -:  550:
        -:  551:    _LIBCPP_INLINE_VISIBILITY fpos& operator+=(streamoff __off) {__off_ += __off; return *this;}
        -:  552:    _LIBCPP_INLINE_VISIBILITY fpos  operator+ (streamoff __off) const {fpos __t(*this); __t += __off; return __t;}
        -:  553:    _LIBCPP_INLINE_VISIBILITY fpos& operator-=(streamoff __off) {__off_ -= __off; return *this;}
        -:  554:    _LIBCPP_INLINE_VISIBILITY fpos  operator- (streamoff __off) const {fpos __t(*this); __t -= __off; return __t;}
        -:  555:};
        -:  556:
        -:  557:template <class _StateT>
        -:  558:inline _LIBCPP_INLINE_VISIBILITY
        -:  559:streamoff operator-(const fpos<_StateT>& __x, const fpos<_StateT>& __y)
        -:  560:    {return streamoff(__x) - streamoff(__y);}
        -:  561:
        -:  562:template <class _StateT>
        -:  563:inline _LIBCPP_INLINE_VISIBILITY
        -:  564:bool operator==(const fpos<_StateT>& __x, const fpos<_StateT>& __y)
        -:  565:    {return streamoff(__x) == streamoff(__y);}
        -:  566:
        -:  567:template <class _StateT>
        -:  568:inline _LIBCPP_INLINE_VISIBILITY
        -:  569:bool operator!=(const fpos<_StateT>& __x, const fpos<_StateT>& __y)
        -:  570:    {return streamoff(__x) != streamoff(__y);}
        -:  571:
        -:  572:// basic_string
        -:  573:
        -:  574:template<class _CharT, class _Traits, class _Allocator>
        -:  575:basic_string<_CharT, _Traits, _Allocator>
        -:  576:operator+(const basic_string<_CharT, _Traits, _Allocator>& __x,
        -:  577:          const basic_string<_CharT, _Traits, _Allocator>& __y);
        -:  578:
        -:  579:template<class _CharT, class _Traits, class _Allocator>
        -:  580:basic_string<_CharT, _Traits, _Allocator>
        -:  581:operator+(const _CharT* __x, const basic_string<_CharT,_Traits,_Allocator>& __y);
        -:  582:
        -:  583:template<class _CharT, class _Traits, class _Allocator>
        -:  584:basic_string<_CharT, _Traits, _Allocator>
        -:  585:operator+(_CharT __x, const basic_string<_CharT,_Traits,_Allocator>& __y);
        -:  586:
        -:  587:template<class _CharT, class _Traits, class _Allocator>
        -:  588:inline _LIBCPP_INLINE_VISIBILITY
        -:  589:basic_string<_CharT, _Traits, _Allocator>
        -:  590:operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, const _CharT* __y);
        -:  591:
        -:  592:template<class _CharT, class _Traits, class _Allocator>
        -:  593:basic_string<_CharT, _Traits, _Allocator>
        -:  594:operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, _CharT __y);
        -:  595:
        -:  596:_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS string operator+<char, char_traits<char>, allocator<char> >(char const*, string const&))
        -:  597:
        -:  598:template <bool>
        -:  599:class _LIBCPP_TEMPLATE_VIS __basic_string_common
        -:  600:{
        -:  601:protected:
        -:  602:    _LIBCPP_NORETURN void __throw_length_error() const;
        -:  603:    _LIBCPP_NORETURN void __throw_out_of_range() const;
        -:  604:};
        -:  605:
        -:  606:template <bool __b>
        -:  607:void
        -:  608:__basic_string_common<__b>::__throw_length_error() const
        -:  609:{
        -:  610:    _VSTD::__throw_length_error("basic_string");
        -:  611:}
        -:  612:
        -:  613:template <bool __b>
        -:  614:void
        -:  615:__basic_string_common<__b>::__throw_out_of_range() const
        -:  616:{
        -:  617:    _VSTD::__throw_out_of_range("basic_string");
        -:  618:}
        -:  619:
        -:  620:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __basic_string_common<true>)
        -:  621:
        -:  622:#ifdef _LIBCPP_NO_EXCEPTIONS
        -:  623:template <class _Iter>
        -:  624:struct __libcpp_string_gets_noexcept_iterator_impl : public true_type {};
        -:  625:#elif defined(_LIBCPP_HAS_NO_NOEXCEPT)
        -:  626:template <class _Iter>
        -:  627:struct __libcpp_string_gets_noexcept_iterator_impl : public false_type {};
        -:  628:#else
        -:  629:template <class _Iter, bool = __is_forward_iterator<_Iter>::value>
        -:  630:struct __libcpp_string_gets_noexcept_iterator_impl : public _LIBCPP_BOOL_CONSTANT((
        -:  631:    noexcept(++(declval<_Iter&>())) && 
        -:  632:    is_nothrow_assignable<_Iter&, _Iter>::value && 
        -:  633:    noexcept(declval<_Iter>() == declval<_Iter>()) && 
        -:  634:    noexcept(*declval<_Iter>())
        -:  635:)) {};
        -:  636:
        -:  637:template <class _Iter> 
        -:  638:struct __libcpp_string_gets_noexcept_iterator_impl<_Iter, false> : public false_type {};
        -:  639:#endif
        -:  640:
        -:  641:
        -:  642:template <class _Iter>
        -:  643:struct __libcpp_string_gets_noexcept_iterator
        -:  644:    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value || __libcpp_string_gets_noexcept_iterator_impl<_Iter>::value) {};
        -:  645:
        -:  646:template <class _CharT, class _Traits, class _Tp>
        -:  647:struct __can_be_converted_to_string_view : public _LIBCPP_BOOL_CONSTANT(
        -:  648:    ( is_convertible<const _Tp&, basic_string_view<_CharT, _Traits> >::value &&
        -:  649:     !is_convertible<const _Tp&, const _CharT*>::value)) {};
        -:  650:
        -:  651:#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -:  652:
        -:  653:template <class _CharT, size_t = sizeof(_CharT)>
        -:  654:struct __padding
        -:  655:{
        -:  656:    unsigned char __xx[sizeof(_CharT)-1];
        -:  657:};
        -:  658:
        -:  659:template <class _CharT>
        -:  660:struct __padding<_CharT, 1>
        -:  661:{
        -:  662:};
        -:  663:
        -:  664:#endif  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -:  665:
        -:  666:template<class _CharT, class _Traits, class _Allocator>
        -:  667:class _LIBCPP_TEMPLATE_VIS basic_string
        -:  668:    : private __basic_string_common<true>
        -:  669:{
        -:  670:public:
        -:  671:    typedef basic_string                                 __self;
        -:  672:    typedef basic_string_view<_CharT, _Traits>           __self_view;
        -:  673:    typedef _Traits                                      traits_type;
        -:  674:    typedef _CharT                                       value_type;
        -:  675:    typedef _Allocator                                   allocator_type;
        -:  676:    typedef allocator_traits<allocator_type>             __alloc_traits;
        -:  677:    typedef typename __alloc_traits::size_type           size_type;
        -:  678:    typedef typename __alloc_traits::difference_type     difference_type;
        -:  679:    typedef value_type&                                  reference;
        -:  680:    typedef const value_type&                            const_reference;
        -:  681:    typedef typename __alloc_traits::pointer             pointer;
        -:  682:    typedef typename __alloc_traits::const_pointer       const_pointer;
        -:  683:
        -:  684:    static_assert((!is_array<value_type>::value), "Character type of basic_string must not be an array");
        -:  685:    static_assert(( is_standard_layout<value_type>::value), "Character type of basic_string must be standard-layout");
        -:  686:    static_assert(( is_trivial<value_type>::value), "Character type of basic_string must be trivial");
        -:  687:    static_assert(( is_same<_CharT, typename traits_type::char_type>::value),
        -:  688:                  "traits_type::char_type must be the same type as CharT");
        -:  689:    static_assert(( is_same<typename allocator_type::value_type, value_type>::value),
        -:  690:                  "Allocator::value_type must be same type as value_type");
        -:  691:
        -:  692:#if defined(_LIBCPP_RAW_ITERATORS)
        -:  693:    typedef pointer                                      iterator;
        -:  694:    typedef const_pointer                                const_iterator;
        -:  695:#else  // defined(_LIBCPP_RAW_ITERATORS)
        -:  696:    typedef __wrap_iter<pointer>                         iterator;
        -:  697:    typedef __wrap_iter<const_pointer>                   const_iterator;
        -:  698:#endif  // defined(_LIBCPP_RAW_ITERATORS)
        -:  699:    typedef _VSTD::reverse_iterator<iterator>             reverse_iterator;
        -:  700:    typedef _VSTD::reverse_iterator<const_iterator>       const_reverse_iterator;
        -:  701:
        -:  702:private:
        -:  703:
        -:  704:#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -:  705:
        -:  706:    struct __long
        -:  707:    {
        -:  708:        pointer   __data_;
        -:  709:        size_type __size_;
        -:  710:        size_type __cap_;
        -:  711:    };
        -:  712:
        -:  713:#ifdef _LIBCPP_BIG_ENDIAN
        -:  714:    static const size_type __short_mask = 0x01;
        -:  715:    static const size_type __long_mask  = 0x1ul;
        -:  716:#else  // _LIBCPP_BIG_ENDIAN
        -:  717:    static const size_type __short_mask = 0x80;
        -:  718:    static const size_type __long_mask  = ~(size_type(~0) >> 1);
        -:  719:#endif  // _LIBCPP_BIG_ENDIAN
        -:  720:
        -:  721:    enum {__min_cap = (sizeof(__long) - 1)/sizeof(value_type) > 2 ?
        -:  722:                      (sizeof(__long) - 1)/sizeof(value_type) : 2};
        -:  723:
        -:  724:    struct __short
        -:  725:    {
        -:  726:        value_type __data_[__min_cap];
        -:  727:        struct
        -:  728:            : __padding<value_type>
        -:  729:        {
        -:  730:            unsigned char __size_;
        -:  731:        };
        -:  732:    };
        -:  733:
        -:  734:#else
        -:  735:
        -:  736:    struct __long
        -:  737:    {
        -:  738:        size_type __cap_;
        -:  739:        size_type __size_;
        -:  740:        pointer   __data_;
        -:  741:    };
        -:  742:
        -:  743:#ifdef _LIBCPP_BIG_ENDIAN
        -:  744:    static const size_type __short_mask = 0x80;
        -:  745:    static const size_type __long_mask  = ~(size_type(~0) >> 1);
        -:  746:#else  // _LIBCPP_BIG_ENDIAN
        -:  747:    static const size_type __short_mask = 0x01;
        -:  748:    static const size_type __long_mask  = 0x1ul;
        -:  749:#endif  // _LIBCPP_BIG_ENDIAN
        -:  750:
        -:  751:    enum {__min_cap = (sizeof(__long) - 1)/sizeof(value_type) > 2 ?
        -:  752:                      (sizeof(__long) - 1)/sizeof(value_type) : 2};
        -:  753:
        -:  754:    struct __short
        -:  755:    {
        -:  756:        union
        -:  757:        {
        -:  758:            unsigned char __size_;
        -:  759:            value_type __lx;
        -:  760:        };
        -:  761:        value_type __data_[__min_cap];
        -:  762:    };
        -:  763:
        -:  764:#endif  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -:  765:
        -:  766:    union __ulx{__long __lx; __short __lxx;};
        -:  767:
        -:  768:    enum {__n_words = sizeof(__ulx) / sizeof(size_type)};
        -:  769:
        -:  770:    struct __raw
        -:  771:    {
        -:  772:        size_type __words[__n_words];
        -:  773:    };
        -:  774:
        -:  775:    struct __rep
        -:  776:    {
        -:  777:        union
        -:  778:        {
        -:  779:            __long  __l;
        -:  780:            __short __s;
        -:  781:            __raw   __r;
        -:  782:        };
        -:  783:    };
        -:  784:
        -:  785:    __compressed_pair<__rep, allocator_type> __r_;
        -:  786:
        -:  787:public:
        -:  788:    static const size_type npos = -1;
        -:  789:
    #####:  790:    _LIBCPP_INLINE_VISIBILITY basic_string()
    $$$$$:  790-block  0
    $$$$$:  790-block  1
        -:  791:        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);
        -:  792:
        -:  793:    _LIBCPP_INLINE_VISIBILITY explicit basic_string(const allocator_type& __a)
        -:  794:#if _LIBCPP_STD_VER <= 14
        -:  795:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value);
        -:  796:#else
        -:  797:        _NOEXCEPT;
        -:  798:#endif
        -:  799:
        -:  800:    basic_string(const basic_string& __str);
        -:  801:    basic_string(const basic_string& __str, const allocator_type& __a);
        -:  802:
        -:  803:#ifndef _LIBCPP_CXX03_LANG
        -:  804:    _LIBCPP_INLINE_VISIBILITY
        -:  805:    basic_string(basic_string&& __str)
        -:  806:#if _LIBCPP_STD_VER <= 14
        -:  807:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);
        -:  808:#else
        -:  809:        _NOEXCEPT;
        -:  810:#endif
        -:  811:
        -:  812:    _LIBCPP_INLINE_VISIBILITY
        -:  813:    basic_string(basic_string&& __str, const allocator_type& __a);
        -:  814:#endif  // _LIBCPP_CXX03_LANG
        -:  815:
        -:  816:    template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type>
        -:  817:    _LIBCPP_INLINE_VISIBILITY
    #####:  818:    basic_string(const _CharT* __s) {
    $$$$$:  818-block  0
    $$$$$:  818-block  1
        -:  819:      _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr");
    #####:  820:      __init(__s, traits_type::length(__s));
        -:  821:#   if _LIBCPP_DEBUG_LEVEL >= 2
        -:  822:      __get_db()->__insert_c(this);
        -:  823:#   endif
    #####:  824:    }
    $$$$$:  824-block  0
    $$$$$:  824-block  1
        -:  825:
        -:  826:    template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type>
        -:  827:        _LIBCPP_INLINE_VISIBILITY
        -:  828:        basic_string(const _CharT* __s, const _Allocator& __a);
        -:  829:
        -:  830:    _LIBCPP_INLINE_VISIBILITY
        -:  831:    basic_string(const _CharT* __s, size_type __n);
        -:  832:    _LIBCPP_INLINE_VISIBILITY
        -:  833:    basic_string(const _CharT* __s, size_type __n, const _Allocator& __a);
        -:  834:    _LIBCPP_INLINE_VISIBILITY
    #####:  835:    basic_string(size_type __n, _CharT __c);
        -:  836:
        -:  837:    template <class = typename enable_if<__is_allocator<_Allocator>::value, nullptr_t>::type>
        -:  838:        _LIBCPP_INLINE_VISIBILITY
        -:  839:        basic_string(size_type __n, _CharT __c, const _Allocator& __a);
        -:  840:
        -:  841:    basic_string(const basic_string& __str, size_type __pos, size_type __n,
        -:  842:                 const _Allocator& __a = _Allocator());
        -:  843:    _LIBCPP_INLINE_VISIBILITY
        -:  844:    basic_string(const basic_string& __str, size_type __pos,
        -:  845:                 const _Allocator& __a = _Allocator());
        -:  846:
        -:  847:    template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type>
        -:  848:        _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  849:        basic_string(const _Tp& __t, size_type __pos, size_type __n,
        -:  850:                              const allocator_type& __a = allocator_type());
        -:  851:
        -:  852:    template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type>
        -:  853:        _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  854:        explicit basic_string(const _Tp& __t);
        -:  855:
        -:  856:    template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type>
        -:  857:        _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  858:        explicit basic_string(const _Tp& __t, const allocator_type& __a);
        -:  859:
        -:  860:    template<class _InputIterator>
        -:  861:        _LIBCPP_INLINE_VISIBILITY
        -:  862:        basic_string(_InputIterator __first, _InputIterator __last);
        -:  863:    template<class _InputIterator>
        -:  864:        _LIBCPP_INLINE_VISIBILITY
        -:  865:        basic_string(_InputIterator __first, _InputIterator __last, const allocator_type& __a);
        -:  866:#ifndef _LIBCPP_CXX03_LANG
        -:  867:    _LIBCPP_INLINE_VISIBILITY
        -:  868:    basic_string(initializer_list<_CharT> __il);
        -:  869:    _LIBCPP_INLINE_VISIBILITY
        -:  870:    basic_string(initializer_list<_CharT> __il, const _Allocator& __a);
        -:  871:#endif  // _LIBCPP_CXX03_LANG
        -:  872:
        -:  873:    inline ~basic_string();
        -:  874:
        -:  875:    _LIBCPP_INLINE_VISIBILITY
        -:  876:    operator __self_view() const _NOEXCEPT { return __self_view(data(), size()); }
        -:  877:
        -:  878:    basic_string& operator=(const basic_string& __str);
        -:  879:
        -:  880:    template <class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type>
        -:  881:    basic_string& operator=(const _Tp& __t)
        -:  882:        {__self_view __sv = __t; return assign(__sv);}
        -:  883:
        -:  884:#ifndef _LIBCPP_CXX03_LANG
        -:  885:    _LIBCPP_INLINE_VISIBILITY
        -:  886:    basic_string& operator=(basic_string&& __str)
        -:  887:        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value));
        -:  888:     _LIBCPP_INLINE_VISIBILITY
        -:  889:    basic_string& operator=(initializer_list<value_type> __il) {return assign(__il.begin(), __il.size());}
        -:  890:#endif
        -:  891:    _LIBCPP_INLINE_VISIBILITY basic_string& operator=(const value_type* __s) {return assign(__s);}
        -:  892:    basic_string& operator=(value_type __c);
        -:  893:
        -:  894:#if _LIBCPP_DEBUG_LEVEL >= 2
        -:  895:    _LIBCPP_INLINE_VISIBILITY
        -:  896:    iterator begin() _NOEXCEPT
        -:  897:        {return iterator(this, __get_pointer());}
        -:  898:    _LIBCPP_INLINE_VISIBILITY
        -:  899:    const_iterator begin() const _NOEXCEPT
        -:  900:        {return const_iterator(this, __get_pointer());}
        -:  901:    _LIBCPP_INLINE_VISIBILITY
        -:  902:    iterator end() _NOEXCEPT
        -:  903:        {return iterator(this, __get_pointer() + size());}
        -:  904:    _LIBCPP_INLINE_VISIBILITY
        -:  905:    const_iterator end() const _NOEXCEPT
        -:  906:        {return const_iterator(this, __get_pointer() + size());}
        -:  907:#else
        -:  908:    _LIBCPP_INLINE_VISIBILITY
        -:  909:    iterator begin() _NOEXCEPT
        -:  910:        {return iterator(__get_pointer());}
        -:  911:    _LIBCPP_INLINE_VISIBILITY
        -:  912:    const_iterator begin() const _NOEXCEPT
        -:  913:        {return const_iterator(__get_pointer());}
        -:  914:    _LIBCPP_INLINE_VISIBILITY
        -:  915:    iterator end() _NOEXCEPT
        -:  916:        {return iterator(__get_pointer() + size());}
        -:  917:    _LIBCPP_INLINE_VISIBILITY
        -:  918:    const_iterator end() const _NOEXCEPT
        -:  919:        {return const_iterator(__get_pointer() + size());}
        -:  920:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -:  921:    _LIBCPP_INLINE_VISIBILITY
        -:  922:    reverse_iterator rbegin() _NOEXCEPT
        -:  923:        {return reverse_iterator(end());}
        -:  924:    _LIBCPP_INLINE_VISIBILITY
        -:  925:    const_reverse_iterator rbegin() const _NOEXCEPT
        -:  926:        {return const_reverse_iterator(end());}
        -:  927:    _LIBCPP_INLINE_VISIBILITY
        -:  928:    reverse_iterator rend() _NOEXCEPT
        -:  929:        {return reverse_iterator(begin());}
        -:  930:    _LIBCPP_INLINE_VISIBILITY
        -:  931:    const_reverse_iterator rend() const _NOEXCEPT
        -:  932:        {return const_reverse_iterator(begin());}
        -:  933:
        -:  934:    _LIBCPP_INLINE_VISIBILITY
        -:  935:    const_iterator cbegin() const _NOEXCEPT
        -:  936:        {return begin();}
        -:  937:    _LIBCPP_INLINE_VISIBILITY
        -:  938:    const_iterator cend() const _NOEXCEPT
        -:  939:        {return end();}
        -:  940:    _LIBCPP_INLINE_VISIBILITY
        -:  941:    const_reverse_iterator crbegin() const _NOEXCEPT
        -:  942:        {return rbegin();}
        -:  943:    _LIBCPP_INLINE_VISIBILITY
        -:  944:    const_reverse_iterator crend() const _NOEXCEPT
        -:  945:        {return rend();}
        -:  946:
    #####:  947:    _LIBCPP_INLINE_VISIBILITY size_type size() const _NOEXCEPT
    $$$$$:  947-block  0
    #####:  948:        {return __is_long() ? __get_long_size() : __get_short_size();}
    $$$$$:  948-block  0
    $$$$$:  948-block  1
    $$$$$:  948-block  2
    $$$$$:  948-block  3
        -:  949:    _LIBCPP_INLINE_VISIBILITY size_type length() const _NOEXCEPT {return size();}
        -:  950:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT;
    #####:  951:    _LIBCPP_INLINE_VISIBILITY size_type capacity() const _NOEXCEPT
    $$$$$:  951-block  0
    #####:  952:        {return (__is_long() ? __get_long_cap()
    $$$$$:  952-block  0
    $$$$$:  952-block  1
    $$$$$:  952-block  2
    $$$$$:  952-block  3
    $$$$$:  952-block  4
    #####:  953:                             : static_cast<size_type>(__min_cap)) - 1;}
        -:  954:
        -:  955:    void resize(size_type __n, value_type __c);
        -:  956:    _LIBCPP_INLINE_VISIBILITY void resize(size_type __n) {resize(__n, value_type());}
        -:  957:
        -:  958:    void reserve(size_type __res_arg);
        -:  959:    _LIBCPP_INLINE_VISIBILITY void __resize_default_init(size_type __n);
        -:  960:
        -:  961:    _LIBCPP_INLINE_VISIBILITY
        -:  962:    void reserve() _NOEXCEPT {reserve(0);}
        -:  963:    _LIBCPP_INLINE_VISIBILITY
        -:  964:    void shrink_to_fit() _NOEXCEPT {reserve();}
        -:  965:    _LIBCPP_INLINE_VISIBILITY
        -:  966:    void clear() _NOEXCEPT;
        -:  967:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  968:    bool empty() const _NOEXCEPT {return size() == 0;}
        -:  969:
        -:  970:    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __pos) const _NOEXCEPT;
        -:  971:    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __pos)       _NOEXCEPT;
        -:  972:
        -:  973:    const_reference at(size_type __n) const;
        -:  974:    reference       at(size_type __n);
        -:  975:
    #####:  976:    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(const basic_string& __str) {return append(__str);}
    $$$$$:  976-block  0
    $$$$$:  976-block  1
        -:  977:
        -:  978:    template <class _Tp>
        -:  979:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  980:    typename enable_if
        -:  981:        <
        -:  982:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -:  983:            basic_string&
        -:  984:        >::type
        -:  985:                                            operator+=(const _Tp& __t)            {__self_view __sv = __t; return append(__sv);}
        -:  986:    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(const value_type* __s)     {return append(__s);}
        -:  987:    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(value_type __c)            {push_back(__c); return *this;}
        -:  988:#ifndef _LIBCPP_CXX03_LANG
        -:  989:    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(initializer_list<value_type> __il) {return append(__il);}
        -:  990:#endif  // _LIBCPP_CXX03_LANG
        -:  991:
        -:  992:    _LIBCPP_INLINE_VISIBILITY
        -:  993:    basic_string& append(const basic_string& __str);
        -:  994:
        -:  995:    template <class _Tp>
        -:  996:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  997:    typename enable_if
        -:  998:        <
        -:  999:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1000:            basic_string&
        -: 1001:        >::type
        -: 1002:                  append(const _Tp& __t) { __self_view __sv = __t; return append(__sv.data(), __sv.size()); }
        -: 1003:    basic_string& append(const basic_string& __str, size_type __pos, size_type __n=npos);
        -: 1004:
        -: 1005:    template <class _Tp>
        -: 1006:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1007:    typename enable_if
        -: 1008:        <
        -: 1009:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1010:            basic_string&
        -: 1011:        >::type
        -: 1012:                  append(const _Tp& __t, size_type __pos, size_type __n=npos);
        -: 1013:    basic_string& append(const value_type* __s, size_type __n);
        -: 1014:    basic_string& append(const value_type* __s);
        -: 1015:    basic_string& append(size_type __n, value_type __c);
        -: 1016:
        -: 1017:    _LIBCPP_INLINE_VISIBILITY
        -: 1018:    void __append_default_init(size_type __n);
        -: 1019:
        -: 1020:    template <class _ForwardIterator>
        -: 1021:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1022:    basic_string& __append_forward_unsafe(_ForwardIterator, _ForwardIterator);
        -: 1023:    template<class _InputIterator>
        -: 1024:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1025:    typename enable_if
        -: 1026:        <
        -: 1027:            __is_exactly_input_iterator<_InputIterator>::value
        -: 1028:                || !__libcpp_string_gets_noexcept_iterator<_InputIterator>::value,
        -: 1029:            basic_string&
        -: 1030:        >::type
        -: 1031:    _LIBCPP_INLINE_VISIBILITY
        -: 1032:    append(_InputIterator __first, _InputIterator __last) {
        -: 1033:      const basic_string __temp (__first, __last, __alloc());
        -: 1034:      append(__temp.data(), __temp.size());
        -: 1035:      return *this;
        -: 1036:    }
        -: 1037:    template<class _ForwardIterator>
        -: 1038:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1039:    typename enable_if
        -: 1040:        <
        -: 1041:            __is_forward_iterator<_ForwardIterator>::value
        -: 1042:                && __libcpp_string_gets_noexcept_iterator<_ForwardIterator>::value,
        -: 1043:            basic_string&
        -: 1044:        >::type
        -: 1045:    _LIBCPP_INLINE_VISIBILITY
        -: 1046:    append(_ForwardIterator __first, _ForwardIterator __last) {
        -: 1047:      return __append_forward_unsafe(__first, __last);
        -: 1048:    }
        -: 1049:
        -: 1050:#ifndef _LIBCPP_CXX03_LANG
        -: 1051:    _LIBCPP_INLINE_VISIBILITY
        -: 1052:    basic_string& append(initializer_list<value_type> __il) {return append(__il.begin(), __il.size());}
        -: 1053:#endif  // _LIBCPP_CXX03_LANG
        -: 1054:
        -: 1055:    void push_back(value_type __c);
        -: 1056:    _LIBCPP_INLINE_VISIBILITY
        -: 1057:    void pop_back();
        -: 1058:    _LIBCPP_INLINE_VISIBILITY reference       front();
        -: 1059:    _LIBCPP_INLINE_VISIBILITY const_reference front() const;
        -: 1060:    _LIBCPP_INLINE_VISIBILITY reference       back();
        -: 1061:    _LIBCPP_INLINE_VISIBILITY const_reference back() const;
        -: 1062:
        -: 1063:    template <class _Tp>
        -: 1064:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1065:    typename enable_if
        -: 1066:        <
        -: 1067:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1068:            basic_string&
        -: 1069:        >::type
        -: 1070:                 assign(const _Tp & __t) { __self_view __sv = __t; return assign(__sv.data(), __sv.size()); }
        -: 1071:    _LIBCPP_INLINE_VISIBILITY
        -: 1072:    basic_string& assign(const basic_string& __str) { return *this = __str; }
        -: 1073:#ifndef _LIBCPP_CXX03_LANG
        -: 1074:    _LIBCPP_INLINE_VISIBILITY
        -: 1075:    basic_string& assign(basic_string&& __str)
        -: 1076:        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))
        -: 1077:        {*this = _VSTD::move(__str); return *this;}
        -: 1078:#endif
        -: 1079:    basic_string& assign(const basic_string& __str, size_type __pos, size_type __n=npos);
        -: 1080:    template <class _Tp>
        -: 1081:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1082:    typename enable_if
        -: 1083:        <
        -: 1084:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1085:            basic_string&
        -: 1086:        >::type
        -: 1087:                  assign(const _Tp & __t, size_type __pos, size_type __n=npos);
        -: 1088:    basic_string& assign(const value_type* __s, size_type __n);
        -: 1089:    basic_string& assign(const value_type* __s);
        -: 1090:    basic_string& assign(size_type __n, value_type __c);
        -: 1091:    template<class _InputIterator>
        -: 1092:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1093:    typename enable_if
        -: 1094:        <
        -: 1095:           __is_exactly_input_iterator<_InputIterator>::value
        -: 1096:                || !__libcpp_string_gets_noexcept_iterator<_InputIterator>::value,
        -: 1097:            basic_string&
        -: 1098:        >::type
        -: 1099:        assign(_InputIterator __first, _InputIterator __last);
        -: 1100:    template<class _ForwardIterator>
        -: 1101:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1102:    typename enable_if
        -: 1103:        <
        -: 1104:            __is_forward_iterator<_ForwardIterator>::value
        -: 1105:                 && __libcpp_string_gets_noexcept_iterator<_ForwardIterator>::value,
        -: 1106:            basic_string&
        -: 1107:        >::type
        -: 1108:        assign(_ForwardIterator __first, _ForwardIterator __last);
        -: 1109:#ifndef _LIBCPP_CXX03_LANG
        -: 1110:    _LIBCPP_INLINE_VISIBILITY
        -: 1111:    basic_string& assign(initializer_list<value_type> __il) {return assign(__il.begin(), __il.size());}
        -: 1112:#endif  // _LIBCPP_CXX03_LANG
        -: 1113:
        -: 1114:    _LIBCPP_INLINE_VISIBILITY
        -: 1115:    basic_string& insert(size_type __pos1, const basic_string& __str);
        -: 1116:
        -: 1117:    template <class _Tp>
        -: 1118:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1119:    typename enable_if
        -: 1120:        <
        -: 1121:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1122:            basic_string&
        -: 1123:        >::type
        -: 1124:                 insert(size_type __pos1, const _Tp& __t)
        -: 1125:    { __self_view __sv = __t; return insert(__pos1, __sv.data(), __sv.size()); }
        -: 1126:
        -: 1127:    template <class _Tp>
        -: 1128:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1129:    typename enable_if
        -: 1130:        <
        -: 1131:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1132:            basic_string&
        -: 1133:        >::type
        -: 1134:                  insert(size_type __pos1, const _Tp& __t, size_type __pos2, size_type __n=npos);
        -: 1135:    basic_string& insert(size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n=npos);
        -: 1136:    basic_string& insert(size_type __pos, const value_type* __s, size_type __n);
        -: 1137:    basic_string& insert(size_type __pos, const value_type* __s);
        -: 1138:    basic_string& insert(size_type __pos, size_type __n, value_type __c);
        -: 1139:    iterator      insert(const_iterator __pos, value_type __c);
        -: 1140:    _LIBCPP_INLINE_VISIBILITY
        -: 1141:    iterator      insert(const_iterator __pos, size_type __n, value_type __c);
        -: 1142:    template<class _InputIterator>
        -: 1143:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1144:    typename enable_if
        -: 1145:        <
        -: 1146:           __is_exactly_input_iterator<_InputIterator>::value
        -: 1147:                || !__libcpp_string_gets_noexcept_iterator<_InputIterator>::value,
        -: 1148:            iterator
        -: 1149:        >::type
        -: 1150:        insert(const_iterator __pos, _InputIterator __first, _InputIterator __last);
        -: 1151:    template<class _ForwardIterator>
        -: 1152:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1153:    typename enable_if
        -: 1154:        <
        -: 1155:            __is_forward_iterator<_ForwardIterator>::value
        -: 1156:                 && __libcpp_string_gets_noexcept_iterator<_ForwardIterator>::value,
        -: 1157:            iterator
        -: 1158:        >::type
        -: 1159:        insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last);
        -: 1160:#ifndef _LIBCPP_CXX03_LANG
        -: 1161:    _LIBCPP_INLINE_VISIBILITY
        -: 1162:    iterator insert(const_iterator __pos, initializer_list<value_type> __il)
        -: 1163:                    {return insert(__pos, __il.begin(), __il.end());}
        -: 1164:#endif  // _LIBCPP_CXX03_LANG
        -: 1165:
        -: 1166:    basic_string& erase(size_type __pos = 0, size_type __n = npos);
        -: 1167:    _LIBCPP_INLINE_VISIBILITY
        -: 1168:    iterator      erase(const_iterator __pos);
        -: 1169:    _LIBCPP_INLINE_VISIBILITY
        -: 1170:    iterator      erase(const_iterator __first, const_iterator __last);
        -: 1171:
        -: 1172:    _LIBCPP_INLINE_VISIBILITY
        -: 1173:    basic_string& replace(size_type __pos1, size_type __n1, const basic_string& __str);
        -: 1174:
        -: 1175:    template <class _Tp>
        -: 1176:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1177:    typename enable_if
        -: 1178:        <
        -: 1179:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1180:            basic_string&
        -: 1181:        >::type
        -: 1182:                  replace(size_type __pos1, size_type __n1, const _Tp& __t) { __self_view __sv = __t; return replace(__pos1, __n1, __sv.data(), __sv.size()); }
        -: 1183:    basic_string& replace(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2=npos);
        -: 1184:    template <class _Tp>
        -: 1185:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1186:    typename enable_if
        -: 1187:        <
        -: 1188:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1189:            basic_string&
        -: 1190:        >::type
        -: 1191:                  replace(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2=npos);
        -: 1192:    basic_string& replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2);
        -: 1193:    basic_string& replace(size_type __pos, size_type __n1, const value_type* __s);
        -: 1194:    basic_string& replace(size_type __pos, size_type __n1, size_type __n2, value_type __c);
        -: 1195:    _LIBCPP_INLINE_VISIBILITY
        -: 1196:    basic_string& replace(const_iterator __i1, const_iterator __i2, const basic_string& __str);
        -: 1197:
        -: 1198:    template <class _Tp>
        -: 1199:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1200:    typename enable_if
        -: 1201:        <
        -: 1202:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1203:            basic_string&
        -: 1204:        >::type
        -: 1205:                  replace(const_iterator __i1, const_iterator __i2, const _Tp& __t) { __self_view __sv = __t; return replace(__i1 - begin(), __i2 - __i1, __sv); }
        -: 1206:
        -: 1207:    _LIBCPP_INLINE_VISIBILITY
        -: 1208:    basic_string& replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n);
        -: 1209:    _LIBCPP_INLINE_VISIBILITY
        -: 1210:    basic_string& replace(const_iterator __i1, const_iterator __i2, const value_type* __s);
        -: 1211:    _LIBCPP_INLINE_VISIBILITY
        -: 1212:    basic_string& replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c);
        -: 1213:    template<class _InputIterator>
        -: 1214:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1215:    typename enable_if
        -: 1216:        <
        -: 1217:            __is_input_iterator<_InputIterator>::value,
        -: 1218:            basic_string&
        -: 1219:        >::type
        -: 1220:        replace(const_iterator __i1, const_iterator __i2, _InputIterator __j1, _InputIterator __j2);
        -: 1221:#ifndef _LIBCPP_CXX03_LANG
        -: 1222:    _LIBCPP_INLINE_VISIBILITY
        -: 1223:    basic_string& replace(const_iterator __i1, const_iterator __i2, initializer_list<value_type> __il)
        -: 1224:        {return replace(__i1, __i2, __il.begin(), __il.end());}
        -: 1225:#endif  // _LIBCPP_CXX03_LANG
        -: 1226:
        -: 1227:    size_type copy(value_type* __s, size_type __n, size_type __pos = 0) const;
        -: 1228:    _LIBCPP_INLINE_VISIBILITY
        -: 1229:    basic_string substr(size_type __pos = 0, size_type __n = npos) const;
        -: 1230:
        -: 1231:    _LIBCPP_INLINE_VISIBILITY
        -: 1232:    void swap(basic_string& __str)
        -: 1233:#if _LIBCPP_STD_VER >= 14
        -: 1234:        _NOEXCEPT_DEBUG;
        -: 1235:#else
        -: 1236:        _NOEXCEPT_DEBUG_(!__alloc_traits::propagate_on_container_swap::value ||
        -: 1237:                    __is_nothrow_swappable<allocator_type>::value);
        -: 1238:#endif
        -: 1239:
        -: 1240:    _LIBCPP_INLINE_VISIBILITY
        -: 1241:    const value_type* c_str() const _NOEXCEPT {return data();}
        -: 1242:    _LIBCPP_INLINE_VISIBILITY
    #####: 1243:    const value_type* data() const _NOEXCEPT  {return _VSTD::__to_raw_pointer(__get_pointer());}
    $$$$$: 1243-block  0
    $$$$$: 1243-block  1
        -: 1244:#if _LIBCPP_STD_VER > 14 || defined(_LIBCPP_BUILDING_LIBRARY)
        -: 1245:    _LIBCPP_INLINE_VISIBILITY
        -: 1246:    value_type* data()             _NOEXCEPT  {return _VSTD::__to_raw_pointer(__get_pointer());}
        -: 1247:#endif
        -: 1248:
        -: 1249:    _LIBCPP_INLINE_VISIBILITY
    #####: 1250:    allocator_type get_allocator() const _NOEXCEPT {return __alloc();}
    $$$$$: 1250-block  0
    $$$$$: 1250-block  1
        -: 1251:
        -: 1252:    _LIBCPP_INLINE_VISIBILITY
        -: 1253:    size_type find(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;
        -: 1254:
        -: 1255:    template <class _Tp>
        -: 1256:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1257:    typename enable_if
        -: 1258:        <
        -: 1259:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1260:            size_type
        -: 1261:        >::type
        -: 1262:              find(const _Tp& __t, size_type __pos = 0) const;
        -: 1263:    size_type find(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1264:    _LIBCPP_INLINE_VISIBILITY
        -: 1265:    size_type find(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;
        -: 1266:    size_type find(value_type __c, size_type __pos = 0) const _NOEXCEPT;
        -: 1267:
        -: 1268:    _LIBCPP_INLINE_VISIBILITY
        -: 1269:    size_type rfind(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;
        -: 1270:
        -: 1271:    template <class _Tp>
        -: 1272:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1273:    typename enable_if
        -: 1274:        <
        -: 1275:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1276:            size_type
        -: 1277:        >::type
        -: 1278:              rfind(const _Tp& __t, size_type __pos = npos) const;
        -: 1279:    size_type rfind(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1280:    _LIBCPP_INLINE_VISIBILITY
        -: 1281:    size_type rfind(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;
        -: 1282:    size_type rfind(value_type __c, size_type __pos = npos) const _NOEXCEPT;
        -: 1283:
        -: 1284:    _LIBCPP_INLINE_VISIBILITY
        -: 1285:    size_type find_first_of(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;
        -: 1286:
        -: 1287:    template <class _Tp>
        -: 1288:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1289:    typename enable_if
        -: 1290:        <
        -: 1291:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1292:            size_type
        -: 1293:        >::type
        -: 1294:              find_first_of(const _Tp& __t, size_type __pos = 0) const;
        -: 1295:    size_type find_first_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1296:    _LIBCPP_INLINE_VISIBILITY
        -: 1297:    size_type find_first_of(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;
        -: 1298:    _LIBCPP_INLINE_VISIBILITY
        -: 1299:    size_type find_first_of(value_type __c, size_type __pos = 0) const _NOEXCEPT;
        -: 1300:
        -: 1301:    _LIBCPP_INLINE_VISIBILITY
        -: 1302:    size_type find_last_of(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;
        -: 1303:
        -: 1304:    template <class _Tp>
        -: 1305:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1306:    typename enable_if
        -: 1307:        <
        -: 1308:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1309:            size_type
        -: 1310:        >::type
        -: 1311:              find_last_of(const _Tp& __t, size_type __pos = npos) const;
        -: 1312:    size_type find_last_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1313:    _LIBCPP_INLINE_VISIBILITY
        -: 1314:    size_type find_last_of(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;
        -: 1315:    _LIBCPP_INLINE_VISIBILITY
        -: 1316:    size_type find_last_of(value_type __c, size_type __pos = npos) const _NOEXCEPT;
        -: 1317:
        -: 1318:    _LIBCPP_INLINE_VISIBILITY
        -: 1319:    size_type find_first_not_of(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;
        -: 1320:
        -: 1321:    template <class _Tp>
        -: 1322:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1323:    typename enable_if
        -: 1324:        <
        -: 1325:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1326:            size_type
        -: 1327:        >::type
        -: 1328:              find_first_not_of(const _Tp &__t, size_type __pos = 0) const;
        -: 1329:    size_type find_first_not_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1330:    _LIBCPP_INLINE_VISIBILITY
        -: 1331:    size_type find_first_not_of(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;
        -: 1332:    _LIBCPP_INLINE_VISIBILITY
        -: 1333:    size_type find_first_not_of(value_type __c, size_type __pos = 0) const _NOEXCEPT;
        -: 1334:
        -: 1335:    _LIBCPP_INLINE_VISIBILITY
        -: 1336:    size_type find_last_not_of(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;
        -: 1337:
        -: 1338:    template <class _Tp>
        -: 1339:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1340:    typename enable_if
        -: 1341:        <
        -: 1342:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1343:            size_type
        -: 1344:        >::type
        -: 1345:              find_last_not_of(const _Tp& __t, size_type __pos = npos) const;
        -: 1346:    size_type find_last_not_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1347:    _LIBCPP_INLINE_VISIBILITY
        -: 1348:    size_type find_last_not_of(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;
        -: 1349:    _LIBCPP_INLINE_VISIBILITY
        -: 1350:    size_type find_last_not_of(value_type __c, size_type __pos = npos) const _NOEXCEPT;
        -: 1351:
        -: 1352:    _LIBCPP_INLINE_VISIBILITY
        -: 1353:    int compare(const basic_string& __str) const _NOEXCEPT;
        -: 1354:
        -: 1355:    template <class _Tp>
        -: 1356:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1357:    typename enable_if
        -: 1358:        <
        -: 1359:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1360:            int
        -: 1361:        >::type
        -: 1362:        compare(const _Tp &__t) const;
        -: 1363:
        -: 1364:    template <class _Tp>
        -: 1365:    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1366:    typename enable_if
        -: 1367:        <
        -: 1368:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1369:            int
        -: 1370:        >::type
        -: 1371:         compare(size_type __pos1, size_type __n1, const _Tp& __t) const;
        -: 1372:
        -: 1373:    _LIBCPP_INLINE_VISIBILITY
        -: 1374:    int compare(size_type __pos1, size_type __n1, const basic_string& __str) const;
        -: 1375:    int compare(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2=npos) const;
        -: 1376:
        -: 1377:    template <class _Tp>
        -: 1378:    inline _LIBCPP_INLINE_VISIBILITY
        -: 1379:        typename enable_if
        -: 1380:        <
        -: 1381:            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 1382:            int
        -: 1383:        >::type
        -: 1384:        compare(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2=npos) const;
        -: 1385:    int compare(const value_type* __s) const _NOEXCEPT;
        -: 1386:    int compare(size_type __pos1, size_type __n1, const value_type* __s) const;
        -: 1387:    int compare(size_type __pos1, size_type __n1, const value_type* __s, size_type __n2) const;
        -: 1388:
        -: 1389:#if _LIBCPP_STD_VER > 17
        -: 1390:    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1391:    bool starts_with(__self_view __sv) const _NOEXCEPT
        -: 1392:    { return __self_view(data(), size()).starts_with(__sv); }
        -: 1393:
        -: 1394:    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1395:    bool starts_with(value_type __c) const _NOEXCEPT
        -: 1396:    { return !empty() && _Traits::eq(front(), __c); }
        -: 1397:
        -: 1398:    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1399:    bool starts_with(const value_type* __s) const _NOEXCEPT
        -: 1400:    { return starts_with(__self_view(__s)); }
        -: 1401:
        -: 1402:    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1403:    bool ends_with(__self_view __sv) const _NOEXCEPT
        -: 1404:    { return __self_view(data(), size()).ends_with( __sv); }
        -: 1405:
        -: 1406:    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1407:    bool ends_with(value_type __c) const _NOEXCEPT
        -: 1408:    { return !empty() && _Traits::eq(back(), __c); }
        -: 1409:
        -: 1410:    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1411:    bool ends_with(const value_type* __s) const _NOEXCEPT
        -: 1412:    { return ends_with(__self_view(__s)); }
        -: 1413:#endif
        -: 1414:
        -: 1415:    _LIBCPP_INLINE_VISIBILITY bool __invariants() const;
        -: 1416:
        -: 1417:    _LIBCPP_INLINE_VISIBILITY void __clear_and_shrink() _NOEXCEPT;
        -: 1418:    
        -: 1419:    _LIBCPP_INLINE_VISIBILITY
    #####: 1420:    bool __is_long() const _NOEXCEPT
    $$$$$: 1420-block  0
    #####: 1421:        {return bool(__r_.first().__s.__size_ & __short_mask);}
    $$$$$: 1421-block  0
        -: 1422:
        -: 1423:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1424:
        -: 1425:    bool __dereferenceable(const const_iterator* __i) const;
        -: 1426:    bool __decrementable(const const_iterator* __i) const;
        -: 1427:    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;
        -: 1428:    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;
        -: 1429:
        -: 1430:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -: 1431:
        -: 1432:private:
        -: 1433:    _LIBCPP_INLINE_VISIBILITY
    #####: 1434:    allocator_type& __alloc() _NOEXCEPT
    $$$$$: 1434-block  0
    #####: 1435:        {return __r_.second();}
    $$$$$: 1435-block  0
        -: 1436:    _LIBCPP_INLINE_VISIBILITY
    #####: 1437:    const allocator_type& __alloc() const _NOEXCEPT
    $$$$$: 1437-block  0
    #####: 1438:        {return __r_.second();}
    $$$$$: 1438-block  0
        -: 1439:
        -: 1440:#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1441:
        -: 1442:    _LIBCPP_INLINE_VISIBILITY
        -: 1443:    void __set_short_size(size_type __s) _NOEXCEPT
        -: 1444:#   ifdef _LIBCPP_BIG_ENDIAN
        -: 1445:        {__r_.first().__s.__size_ = (unsigned char)(__s << 1);}
        -: 1446:#   else
        -: 1447:        {__r_.first().__s.__size_ = (unsigned char)(__s);}
        -: 1448:#   endif
        -: 1449:
        -: 1450:    _LIBCPP_INLINE_VISIBILITY
        -: 1451:    size_type __get_short_size() const _NOEXCEPT
        -: 1452:#   ifdef _LIBCPP_BIG_ENDIAN
        -: 1453:        {return __r_.first().__s.__size_ >> 1;}
        -: 1454:#   else
        -: 1455:        {return __r_.first().__s.__size_;}
        -: 1456:#   endif
        -: 1457:
        -: 1458:#else  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1459:
        -: 1460:    _LIBCPP_INLINE_VISIBILITY
    #####: 1461:    void __set_short_size(size_type __s) _NOEXCEPT
    $$$$$: 1461-block  0
        -: 1462:#   ifdef _LIBCPP_BIG_ENDIAN
        -: 1463:        {__r_.first().__s.__size_ = (unsigned char)(__s);}
        -: 1464:#   else
    #####: 1465:        {__r_.first().__s.__size_ = (unsigned char)(__s << 1);}
    $$$$$: 1465-block  0
        -: 1466:#   endif
        -: 1467:
        -: 1468:    _LIBCPP_INLINE_VISIBILITY
    #####: 1469:    size_type __get_short_size() const _NOEXCEPT
    $$$$$: 1469-block  0
        -: 1470:#   ifdef _LIBCPP_BIG_ENDIAN
        -: 1471:        {return __r_.first().__s.__size_;}
        -: 1472:#   else
    #####: 1473:        {return __r_.first().__s.__size_ >> 1;}
    $$$$$: 1473-block  0
        -: 1474:#   endif
        -: 1475:
        -: 1476:#endif  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1477:
        -: 1478:    _LIBCPP_INLINE_VISIBILITY
    #####: 1479:    void __set_long_size(size_type __s) _NOEXCEPT
    $$$$$: 1479-block  0
    #####: 1480:        {__r_.first().__l.__size_ = __s;}
    $$$$$: 1480-block  0
        -: 1481:    _LIBCPP_INLINE_VISIBILITY
    #####: 1482:    size_type __get_long_size() const _NOEXCEPT
    $$$$$: 1482-block  0
    #####: 1483:        {return __r_.first().__l.__size_;}
    $$$$$: 1483-block  0
        -: 1484:    _LIBCPP_INLINE_VISIBILITY
        -: 1485:    void __set_size(size_type __s) _NOEXCEPT
        -: 1486:        {if (__is_long()) __set_long_size(__s); else __set_short_size(__s);}
        -: 1487:
        -: 1488:    _LIBCPP_INLINE_VISIBILITY
    #####: 1489:    void __set_long_cap(size_type __s) _NOEXCEPT
    $$$$$: 1489-block  0
    #####: 1490:        {__r_.first().__l.__cap_  = __long_mask | __s;}
    $$$$$: 1490-block  0
        -: 1491:    _LIBCPP_INLINE_VISIBILITY
    #####: 1492:    size_type __get_long_cap() const _NOEXCEPT
    $$$$$: 1492-block  0
    #####: 1493:        {return __r_.first().__l.__cap_ & size_type(~__long_mask);}
    $$$$$: 1493-block  0
        -: 1494:
        -: 1495:    _LIBCPP_INLINE_VISIBILITY
        -: 1496:    void __set_long_pointer(pointer __p) _NOEXCEPT
        -: 1497:        {__r_.first().__l.__data_ = __p;}
        -: 1498:    _LIBCPP_INLINE_VISIBILITY
    #####: 1499:    pointer __get_long_pointer() _NOEXCEPT
    $$$$$: 1499-block  0
    #####: 1500:        {return __r_.first().__l.__data_;}
    $$$$$: 1500-block  0
        -: 1501:    _LIBCPP_INLINE_VISIBILITY
    #####: 1502:    const_pointer __get_long_pointer() const _NOEXCEPT
    $$$$$: 1502-block  0
    #####: 1503:        {return __r_.first().__l.__data_;}
    $$$$$: 1503-block  0
        -: 1504:    _LIBCPP_INLINE_VISIBILITY
    #####: 1505:    pointer __get_short_pointer() _NOEXCEPT
    $$$$$: 1505-block  0
    #####: 1506:        {return pointer_traits<pointer>::pointer_to(__r_.first().__s.__data_[0]);}
    $$$$$: 1506-block  0
        -: 1507:    _LIBCPP_INLINE_VISIBILITY
    #####: 1508:    const_pointer __get_short_pointer() const _NOEXCEPT
    $$$$$: 1508-block  0
    #####: 1509:        {return pointer_traits<const_pointer>::pointer_to(__r_.first().__s.__data_[0]);}
    $$$$$: 1509-block  0
        -: 1510:    _LIBCPP_INLINE_VISIBILITY
        -: 1511:    pointer __get_pointer() _NOEXCEPT
        -: 1512:        {return __is_long() ? __get_long_pointer() : __get_short_pointer();}
        -: 1513:    _LIBCPP_INLINE_VISIBILITY
    #####: 1514:    const_pointer __get_pointer() const _NOEXCEPT
    $$$$$: 1514-block  0
    #####: 1515:        {return __is_long() ? __get_long_pointer() : __get_short_pointer();}
    $$$$$: 1515-block  0
    $$$$$: 1515-block  1
    $$$$$: 1515-block  2
    $$$$$: 1515-block  3
        -: 1516:
        -: 1517:    _LIBCPP_INLINE_VISIBILITY
    #####: 1518:    void __zero() _NOEXCEPT
    $$$$$: 1518-block  0
        -: 1519:        {
    #####: 1520:            size_type (&__a)[__n_words] = __r_.first().__r.__words;
    #####: 1521:            for (unsigned __i = 0; __i < __n_words; ++__i)
    $$$$$: 1521-block  0
    $$$$$: 1521-block  1
    $$$$$: 1521-block  2
    #####: 1522:                __a[__i] = 0;
    $$$$$: 1522-block  0
    #####: 1523:        }
    $$$$$: 1523-block  0
        -: 1524:
        -: 1525:    template <size_type __a> static
        -: 1526:        _LIBCPP_INLINE_VISIBILITY
        -: 1527:        size_type __align_it(size_type __s) _NOEXCEPT
        -: 1528:            {return (__s + (__a-1)) & ~(__a-1);}
        -: 1529:    enum {__alignment = 16};
        -: 1530:    static _LIBCPP_INLINE_VISIBILITY
        -: 1531:    size_type __recommend(size_type __s) _NOEXCEPT
        -: 1532:        {
        -: 1533:        if (__s < __min_cap) return static_cast<size_type>(__min_cap) - 1;
        -: 1534:        size_type __guess = __align_it<sizeof(value_type) < __alignment ?
        -: 1535:                     __alignment/sizeof(value_type) : 1 > (__s+1) - 1;
        -: 1536:        if (__guess == __min_cap) ++__guess;
        -: 1537:        return __guess;
        -: 1538:        }
        -: 1539:
        -: 1540:    inline
        -: 1541:    void __init(const value_type* __s, size_type __sz, size_type __reserve);
        -: 1542:    inline
        -: 1543:    void __init(const value_type* __s, size_type __sz);
        -: 1544:    inline
        -: 1545:    void __init(size_type __n, value_type __c);
        -: 1546:
        -: 1547:    template <class _InputIterator>
        -: 1548:    inline
        -: 1549:    typename enable_if
        -: 1550:    <
        -: 1551:        __is_exactly_input_iterator<_InputIterator>::value,
        -: 1552:        void
        -: 1553:    >::type
        -: 1554:    __init(_InputIterator __first, _InputIterator __last);
        -: 1555:
        -: 1556:    template <class _ForwardIterator>
        -: 1557:    inline
        -: 1558:    typename enable_if
        -: 1559:    <
        -: 1560:        __is_forward_iterator<_ForwardIterator>::value,
        -: 1561:        void
        -: 1562:    >::type
        -: 1563:    __init(_ForwardIterator __first, _ForwardIterator __last);
        -: 1564:
        -: 1565:    void __grow_by(size_type __old_cap, size_type __delta_cap, size_type __old_sz,
        -: 1566:                   size_type __n_copy,  size_type __n_del,     size_type __n_add = 0);
        -: 1567:    void __grow_by_and_replace(size_type __old_cap, size_type __delta_cap, size_type __old_sz,
        -: 1568:                               size_type __n_copy,  size_type __n_del,
        -: 1569:                               size_type __n_add, const value_type* __p_new_stuff);
        -: 1570:
        -: 1571:    _LIBCPP_INLINE_VISIBILITY
        -: 1572:    void __erase_to_end(size_type __pos);
        -: 1573:
        -: 1574:    _LIBCPP_INLINE_VISIBILITY
        -: 1575:    void __copy_assign_alloc(const basic_string& __str)
        -: 1576:        {__copy_assign_alloc(__str, integral_constant<bool,
        -: 1577:                      __alloc_traits::propagate_on_container_copy_assignment::value>());}
        -: 1578:
        -: 1579:    _LIBCPP_INLINE_VISIBILITY
        -: 1580:    void __copy_assign_alloc(const basic_string& __str, true_type)
        -: 1581:        {
        -: 1582:            if (__alloc() == __str.__alloc())
        -: 1583:                __alloc() = __str.__alloc();
        -: 1584:            else
        -: 1585:            {
        -: 1586:                if (!__str.__is_long())
        -: 1587:                {
        -: 1588:                    __clear_and_shrink();
        -: 1589:                    __alloc() = __str.__alloc();
        -: 1590:                }
        -: 1591:                else
        -: 1592:                {
        -: 1593:                    allocator_type __a = __str.__alloc();
        -: 1594:                    pointer __p = __alloc_traits::allocate(__a, __str.__get_long_cap());
        -: 1595:                    __clear_and_shrink();
        -: 1596:                    __alloc() = _VSTD::move(__a);
        -: 1597:                    __set_long_pointer(__p);
        -: 1598:                    __set_long_cap(__str.__get_long_cap());
        -: 1599:                    __set_long_size(__str.size());
        -: 1600:                }
        -: 1601:            }
        -: 1602:        }
        -: 1603:
        -: 1604:    _LIBCPP_INLINE_VISIBILITY
        -: 1605:    void __copy_assign_alloc(const basic_string&, false_type) _NOEXCEPT
        -: 1606:        {}
        -: 1607:
        -: 1608:#ifndef _LIBCPP_CXX03_LANG
        -: 1609:    _LIBCPP_INLINE_VISIBILITY
        -: 1610:    void __move_assign(basic_string& __str, false_type)
        -: 1611:        _NOEXCEPT_(__alloc_traits::is_always_equal::value);
        -: 1612:    _LIBCPP_INLINE_VISIBILITY
        -: 1613:    void __move_assign(basic_string& __str, true_type)
        -: 1614:#if _LIBCPP_STD_VER > 14
        -: 1615:        _NOEXCEPT;
        -: 1616:#else
        -: 1617:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);
        -: 1618:#endif
        -: 1619:#endif
        -: 1620:
        -: 1621:    _LIBCPP_INLINE_VISIBILITY
        -: 1622:    void
    #####: 1623:    __move_assign_alloc(basic_string& __str)
    $$$$$: 1623-block  0
        -: 1624:        _NOEXCEPT_(
        -: 1625:            !__alloc_traits::propagate_on_container_move_assignment::value ||
        -: 1626:            is_nothrow_move_assignable<allocator_type>::value)
    #####: 1627:    {__move_assign_alloc(__str, integral_constant<bool,
    #####: 1628:                      __alloc_traits::propagate_on_container_move_assignment::value>());}
    $$$$$: 1628-block  0
        -: 1629:
        -: 1630:    _LIBCPP_INLINE_VISIBILITY
    #####: 1631:    void __move_assign_alloc(basic_string& __c, true_type)
    $$$$$: 1631-block  0
        -: 1632:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 1633:        {
    #####: 1634:            __alloc() = _VSTD::move(__c.__alloc());
    #####: 1635:        }
    $$$$$: 1635-block  0
        -: 1636:
        -: 1637:    _LIBCPP_INLINE_VISIBILITY
        -: 1638:    void __move_assign_alloc(basic_string&, false_type)
        -: 1639:        _NOEXCEPT
        -: 1640:        {}
        -: 1641:
        -: 1642:    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();
        -: 1643:    _LIBCPP_INLINE_VISIBILITY void __invalidate_iterators_past(size_type);
        -: 1644:
        -: 1645:    friend basic_string operator+<>(const basic_string&, const basic_string&);
        -: 1646:    friend basic_string operator+<>(const value_type*, const basic_string&);
        -: 1647:    friend basic_string operator+<>(value_type, const basic_string&);
        -: 1648:    friend basic_string operator+<>(const basic_string&, const value_type*);
        -: 1649:    friend basic_string operator+<>(const basic_string&, value_type);
        -: 1650:};
        -: 1651:
        -: 1652:#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES
        -: 1653:template<class _InputIterator,
        -: 1654:         class _CharT = typename iterator_traits<_InputIterator>::value_type,
        -: 1655:         class _Allocator = allocator<_CharT>,
        -: 1656:         class = typename enable_if<__is_input_iterator<_InputIterator>::value, void>::type,
        -: 1657:         class = typename enable_if<__is_allocator<_Allocator>::value, void>::type
        -: 1658:         >
        -: 1659:basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())
        -: 1660:  -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;
        -: 1661:
        -: 1662:template<class _CharT,
        -: 1663:         class _Traits,
        -: 1664:         class _Allocator = allocator<_CharT>,
        -: 1665:         class = typename enable_if<__is_allocator<_Allocator>::value, void>::type
        -: 1666:         >
        -: 1667:explicit basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())
        -: 1668:  -> basic_string<_CharT, _Traits, _Allocator>;
        -: 1669:
        -: 1670:template<class _CharT,
        -: 1671:         class _Traits,
        -: 1672:         class _Allocator = allocator<_CharT>,
        -: 1673:         class = typename enable_if<__is_allocator<_Allocator>::value, void>::type,
        -: 1674:         class _Sz = typename allocator_traits<_Allocator>::size_type
        -: 1675:         >
        -: 1676:basic_string(basic_string_view<_CharT, _Traits>, _Sz, _Sz, const _Allocator& = _Allocator())
        -: 1677:  -> basic_string<_CharT, _Traits, _Allocator>;
        -: 1678:#endif
        -: 1679:
        -: 1680:                  
        -: 1681:template <class _CharT, class _Traits, class _Allocator>
        -: 1682:inline
        -: 1683:void
    #####: 1684:basic_string<_CharT, _Traits, _Allocator>::__invalidate_all_iterators()
    $$$$$: 1684-block  0
        -: 1685:{
        -: 1686:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1687:    __get_db()->__invalidate_all(this);
        -: 1688:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
    #####: 1689:}
    $$$$$: 1689-block  0
        -: 1690:
        -: 1691:template <class _CharT, class _Traits, class _Allocator>
        -: 1692:inline
        -: 1693:void
        -: 1694:basic_string<_CharT, _Traits, _Allocator>::__invalidate_iterators_past(size_type
        -: 1695:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1696:                                                                        __pos
        -: 1697:#endif
        -: 1698:                                                                      )
        -: 1699:{
        -: 1700:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1701:    __c_node* __c = __get_db()->__find_c_and_lock(this);
        -: 1702:    if (__c)
        -: 1703:    {
        -: 1704:        const_pointer __new_last = __get_pointer() + __pos;
        -: 1705:        for (__i_node** __p = __c->end_; __p != __c->beg_; )
        -: 1706:        {
        -: 1707:            --__p;
        -: 1708:            const_iterator* __i = static_cast<const_iterator*>((*__p)->__i_);
        -: 1709:            if (__i->base() > __new_last)
        -: 1710:            {
        -: 1711:                (*__p)->__c_ = nullptr;
        -: 1712:                if (--__c->end_ != __p)
        -: 1713:                    memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));
        -: 1714:            }
        -: 1715:        }
        -: 1716:        __get_db()->unlock();
        -: 1717:    }
        -: 1718:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -: 1719:}
        -: 1720:
        -: 1721:template <class _CharT, class _Traits, class _Allocator>
        -: 1722:inline
    #####: 1723:basic_string<_CharT, _Traits, _Allocator>::basic_string()
    $$$$$: 1723-block  0
    $$$$$: 1723-block  1
        -: 1724:    _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
    #####: 1725:{
        -: 1726:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1727:    __get_db()->__insert_c(this);
        -: 1728:#endif
    #####: 1729:    __zero();
    #####: 1730:}
    $$$$$: 1730-block  0
    $$$$$: 1730-block  1
        -: 1731:
        -: 1732:template <class _CharT, class _Traits, class _Allocator>
        -: 1733:inline
    #####: 1734:basic_string<_CharT, _Traits, _Allocator>::basic_string(const allocator_type& __a)
    $$$$$: 1734-block  0
    $$$$$: 1734-block  1
        -: 1735:#if _LIBCPP_STD_VER <= 14
        -: 1736:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)
        -: 1737:#else
        -: 1738:        _NOEXCEPT
        -: 1739:#endif
    #####: 1740:: __r_(__second_tag(), __a)
    $$$$$: 1740-block  0
    $$$$$: 1740-block  1
    #####: 1741:{
        -: 1742:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1743:    __get_db()->__insert_c(this);
        -: 1744:#endif
    #####: 1745:    __zero();
    #####: 1746:}
    $$$$$: 1746-block  0
    $$$$$: 1746-block  1
        -: 1747:
        -: 1748:template <class _CharT, class _Traits, class _Allocator>
        -: 1749:void basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s,
        -: 1750:                                                       size_type __sz,
        -: 1751:                                                       size_type __reserve)
        -: 1752:{
        -: 1753:    if (__reserve > max_size())
        -: 1754:        this->__throw_length_error();
        -: 1755:    pointer __p;
        -: 1756:    if (__reserve < __min_cap)
        -: 1757:    {
        -: 1758:        __set_short_size(__sz);
        -: 1759:        __p = __get_short_pointer();
        -: 1760:    }
        -: 1761:    else
        -: 1762:    {
        -: 1763:        size_type __cap = __recommend(__reserve);
        -: 1764:        __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 1765:        __set_long_pointer(__p);
        -: 1766:        __set_long_cap(__cap+1);
        -: 1767:        __set_long_size(__sz);
        -: 1768:    }
        -: 1769:    traits_type::copy(_VSTD::__to_raw_pointer(__p), __s, __sz);
        -: 1770:    traits_type::assign(__p[__sz], value_type());
        -: 1771:}
        -: 1772:
        -: 1773:template <class _CharT, class _Traits, class _Allocator>
        -: 1774:void
        -: 1775:basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz)
        -: 1776:{
        -: 1777:    if (__sz > max_size())
        -: 1778:        this->__throw_length_error();
        -: 1779:    pointer __p;
        -: 1780:    if (__sz < __min_cap)
        -: 1781:    {
        -: 1782:        __set_short_size(__sz);
        -: 1783:        __p = __get_short_pointer();
        -: 1784:    }
        -: 1785:    else
        -: 1786:    {
        -: 1787:        size_type __cap = __recommend(__sz);
        -: 1788:        __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 1789:        __set_long_pointer(__p);
        -: 1790:        __set_long_cap(__cap+1);
        -: 1791:        __set_long_size(__sz);
        -: 1792:    }
        -: 1793:    traits_type::copy(_VSTD::__to_raw_pointer(__p), __s, __sz);
        -: 1794:    traits_type::assign(__p[__sz], value_type());
        -: 1795:}
        -: 1796:
        -: 1797:template <class _CharT, class _Traits, class _Allocator>
        -: 1798:template <class>
        -: 1799:basic_string<_CharT, _Traits, _Allocator>::basic_string(const _CharT* __s, const _Allocator& __a)
        -: 1800:    : __r_(__second_tag(), __a)
        -: 1801:{
        -: 1802:    _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*, allocator) detected nullptr");
        -: 1803:    __init(__s, traits_type::length(__s));
        -: 1804:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1805:    __get_db()->__insert_c(this);
        -: 1806:#endif
        -: 1807:}
        -: 1808:
        -: 1809:template <class _CharT, class _Traits, class _Allocator>
        -: 1810:inline
        -: 1811:basic_string<_CharT, _Traits, _Allocator>::basic_string(const _CharT* __s, size_type __n)
        -: 1812:{
        -: 1813:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "basic_string(const char*, n) detected nullptr");
        -: 1814:    __init(__s, __n);
        -: 1815:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1816:    __get_db()->__insert_c(this);
        -: 1817:#endif
        -: 1818:}
        -: 1819:
        -: 1820:template <class _CharT, class _Traits, class _Allocator>
        -: 1821:inline
        -: 1822:basic_string<_CharT, _Traits, _Allocator>::basic_string(const _CharT* __s, size_type __n, const _Allocator& __a)
        -: 1823:    : __r_(__second_tag(), __a)
        -: 1824:{
        -: 1825:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "basic_string(const char*, n, allocator) detected nullptr");
        -: 1826:    __init(__s, __n);
        -: 1827:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1828:    __get_db()->__insert_c(this);
        -: 1829:#endif
        -: 1830:}
        -: 1831:
        -: 1832:template <class _CharT, class _Traits, class _Allocator>
        -: 1833:basic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str)
        -: 1834:    : __r_(__second_tag(), __alloc_traits::select_on_container_copy_construction(__str.__alloc()))
        -: 1835:{
        -: 1836:    if (!__str.__is_long())
        -: 1837:        __r_.first().__r = __str.__r_.first().__r;
        -: 1838:    else
        -: 1839:        __init(_VSTD::__to_raw_pointer(__str.__get_long_pointer()), __str.__get_long_size());
        -: 1840:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1841:    __get_db()->__insert_c(this);
        -: 1842:#endif
        -: 1843:}
        -: 1844:
        -: 1845:template <class _CharT, class _Traits, class _Allocator>
        -: 1846:basic_string<_CharT, _Traits, _Allocator>::basic_string(
        -: 1847:    const basic_string& __str, const allocator_type& __a)
        -: 1848:    : __r_(__second_tag(), __a)
        -: 1849:{
        -: 1850:    if (!__str.__is_long())
        -: 1851:        __r_.first().__r = __str.__r_.first().__r;
        -: 1852:    else
        -: 1853:        __init(_VSTD::__to_raw_pointer(__str.__get_long_pointer()), __str.__get_long_size());
        -: 1854:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1855:    __get_db()->__insert_c(this);
        -: 1856:#endif
        -: 1857:}
        -: 1858:
        -: 1859:#ifndef _LIBCPP_CXX03_LANG
        -: 1860:
        -: 1861:template <class _CharT, class _Traits, class _Allocator>
        -: 1862:inline
        -: 1863:basic_string<_CharT, _Traits, _Allocator>::basic_string(basic_string&& __str)
        -: 1864:#if _LIBCPP_STD_VER <= 14
        -: 1865:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)
        -: 1866:#else
        -: 1867:        _NOEXCEPT
        -: 1868:#endif
        -: 1869:    : __r_(_VSTD::move(__str.__r_))
        -: 1870:{
        -: 1871:    __str.__zero();
        -: 1872:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1873:    __get_db()->__insert_c(this);
        -: 1874:    if (__is_long())
        -: 1875:        __get_db()->swap(this, &__str);
        -: 1876:#endif
        -: 1877:}
        -: 1878:
        -: 1879:template <class _CharT, class _Traits, class _Allocator>
        -: 1880:inline
        -: 1881:basic_string<_CharT, _Traits, _Allocator>::basic_string(basic_string&& __str, const allocator_type& __a)
        -: 1882:    : __r_(__second_tag(), __a)
        -: 1883:{
        -: 1884:    if (__str.__is_long() && __a != __str.__alloc()) // copy, not move
        -: 1885:        __init(_VSTD::__to_raw_pointer(__str.__get_long_pointer()), __str.__get_long_size());
        -: 1886:    else
        -: 1887:    {
        -: 1888:        __r_.first().__r = __str.__r_.first().__r;
        -: 1889:        __str.__zero();
        -: 1890:    }
        -: 1891:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1892:    __get_db()->__insert_c(this);
        -: 1893:    if (__is_long())
        -: 1894:        __get_db()->swap(this, &__str);
        -: 1895:#endif
        -: 1896:}
        -: 1897:
        -: 1898:#endif  // _LIBCPP_CXX03_LANG
        -: 1899:
        -: 1900:template <class _CharT, class _Traits, class _Allocator>
        -: 1901:void
        -: 1902:basic_string<_CharT, _Traits, _Allocator>::__init(size_type __n, value_type __c)
        -: 1903:{
        -: 1904:    if (__n > max_size())
        -: 1905:        this->__throw_length_error();
        -: 1906:    pointer __p;
        -: 1907:    if (__n < __min_cap)
        -: 1908:    {
        -: 1909:        __set_short_size(__n);
        -: 1910:        __p = __get_short_pointer();
        -: 1911:    }
        -: 1912:    else
        -: 1913:    {
        -: 1914:        size_type __cap = __recommend(__n);
        -: 1915:        __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 1916:        __set_long_pointer(__p);
        -: 1917:        __set_long_cap(__cap+1);
        -: 1918:        __set_long_size(__n);
        -: 1919:    }
        -: 1920:    traits_type::assign(_VSTD::__to_raw_pointer(__p), __n, __c);
        -: 1921:    traits_type::assign(__p[__n], value_type());
        -: 1922:}
        -: 1923:
        -: 1924:template <class _CharT, class _Traits, class _Allocator>
        -: 1925:inline
    #####: 1926:basic_string<_CharT, _Traits, _Allocator>::basic_string(size_type __n, _CharT __c)
    $$$$$: 1926-block  0
    $$$$$: 1926-block  1
    #####: 1927:{
    #####: 1928:    __init(__n, __c);
        -: 1929:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1930:    __get_db()->__insert_c(this);
        -: 1931:#endif
    #####: 1932:}
    $$$$$: 1932-block  0
    $$$$$: 1932-block  1
        -: 1933:
        -: 1934:template <class _CharT, class _Traits, class _Allocator>
        -: 1935:template <class>
        -: 1936:basic_string<_CharT, _Traits, _Allocator>::basic_string(size_type __n, _CharT __c, const _Allocator& __a)
        -: 1937:    : __r_(__second_tag(), __a)
        -: 1938:{
        -: 1939:    __init(__n, __c);
        -: 1940:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1941:    __get_db()->__insert_c(this);
        -: 1942:#endif
        -: 1943:}
        -: 1944:
        -: 1945:template <class _CharT, class _Traits, class _Allocator>
        -: 1946:basic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str,
        -: 1947:                                                        size_type __pos, size_type __n,
        -: 1948:                                                        const _Allocator& __a)
        -: 1949:    : __r_(__second_tag(), __a)
        -: 1950:{
        -: 1951:    size_type __str_sz = __str.size();
        -: 1952:    if (__pos > __str_sz)
        -: 1953:        this->__throw_out_of_range();
        -: 1954:    __init(__str.data() + __pos, _VSTD::min(__n, __str_sz - __pos));
        -: 1955:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1956:    __get_db()->__insert_c(this);
        -: 1957:#endif
        -: 1958:}
        -: 1959:
        -: 1960:template <class _CharT, class _Traits, class _Allocator>
        -: 1961:inline
        -: 1962:basic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str, size_type __pos,
        -: 1963:                                                        const _Allocator& __a)
        -: 1964:    : __r_(__second_tag(), __a)
        -: 1965:{
        -: 1966:    size_type __str_sz = __str.size();
        -: 1967:    if (__pos > __str_sz)
        -: 1968:        this->__throw_out_of_range();
        -: 1969:    __init(__str.data() + __pos, __str_sz - __pos);
        -: 1970:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1971:    __get_db()->__insert_c(this);
        -: 1972:#endif
        -: 1973:}
        -: 1974:
        -: 1975:template <class _CharT, class _Traits, class _Allocator>
        -: 1976:template <class _Tp, class>
        -: 1977:basic_string<_CharT, _Traits, _Allocator>::basic_string(
        -: 1978:             const _Tp& __t, size_type __pos, size_type __n, const allocator_type& __a)
        -: 1979:    : __r_(__second_tag(), __a)
        -: 1980:{
        -: 1981:    __self_view __sv0 = __t;
        -: 1982:    __self_view __sv = __sv0.substr(__pos, __n);
        -: 1983:    __init(__sv.data(), __sv.size());
        -: 1984:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1985:    __get_db()->__insert_c(this);
        -: 1986:#endif
        -: 1987:}
        -: 1988:
        -: 1989:template <class _CharT, class _Traits, class _Allocator>
        -: 1990:template <class _Tp, class>
        -: 1991:basic_string<_CharT, _Traits, _Allocator>::basic_string(const _Tp & __t)
        -: 1992:{
        -: 1993:    __self_view __sv = __t;
        -: 1994:    __init(__sv.data(), __sv.size());
        -: 1995:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1996:    __get_db()->__insert_c(this);
        -: 1997:#endif
        -: 1998:}
        -: 1999:
        -: 2000:template <class _CharT, class _Traits, class _Allocator>
        -: 2001:template <class _Tp, class>
        -: 2002:basic_string<_CharT, _Traits, _Allocator>::basic_string(const _Tp & __t, const _Allocator& __a)
        -: 2003:    : __r_(__second_tag(), __a)
        -: 2004:{
        -: 2005:    __self_view __sv = __t;
        -: 2006:    __init(__sv.data(), __sv.size());
        -: 2007:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2008:    __get_db()->__insert_c(this);
        -: 2009:#endif
        -: 2010:}
        -: 2011:
        -: 2012:template <class _CharT, class _Traits, class _Allocator>
        -: 2013:template <class _InputIterator>
        -: 2014:typename enable_if
        -: 2015:<
        -: 2016:    __is_exactly_input_iterator<_InputIterator>::value,
        -: 2017:    void
        -: 2018:>::type
        -: 2019:basic_string<_CharT, _Traits, _Allocator>::__init(_InputIterator __first, _InputIterator __last)
        -: 2020:{
        -: 2021:    __zero();
        -: 2022:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2023:    try
        -: 2024:    {
        -: 2025:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2026:    for (; __first != __last; ++__first)
        -: 2027:        push_back(*__first);
        -: 2028:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2029:    }
        -: 2030:    catch (...)
        -: 2031:    {
        -: 2032:        if (__is_long())
        -: 2033:            __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        -: 2034:        throw;
        -: 2035:    }
        -: 2036:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2037:}
        -: 2038:
        -: 2039:template <class _CharT, class _Traits, class _Allocator>
        -: 2040:template <class _ForwardIterator>
        -: 2041:typename enable_if
        -: 2042:<
        -: 2043:    __is_forward_iterator<_ForwardIterator>::value,
        -: 2044:    void
        -: 2045:>::type
        -: 2046:basic_string<_CharT, _Traits, _Allocator>::__init(_ForwardIterator __first, _ForwardIterator __last)
        -: 2047:{
        -: 2048:    size_type __sz = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2049:    if (__sz > max_size())
        -: 2050:        this->__throw_length_error();
        -: 2051:    pointer __p;
        -: 2052:    if (__sz < __min_cap)
        -: 2053:    {
        -: 2054:        __set_short_size(__sz);
        -: 2055:        __p = __get_short_pointer();
        -: 2056:    }
        -: 2057:    else
        -: 2058:    {
        -: 2059:        size_type __cap = __recommend(__sz);
        -: 2060:        __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 2061:        __set_long_pointer(__p);
        -: 2062:        __set_long_cap(__cap+1);
        -: 2063:        __set_long_size(__sz);
        -: 2064:    }
        -: 2065:    for (; __first != __last; ++__first, (void) ++__p)
        -: 2066:        traits_type::assign(*__p, *__first);
        -: 2067:    traits_type::assign(*__p, value_type());
        -: 2068:}
        -: 2069:
        -: 2070:template <class _CharT, class _Traits, class _Allocator>
        -: 2071:template<class _InputIterator>
        -: 2072:inline
        -: 2073:basic_string<_CharT, _Traits, _Allocator>::basic_string(_InputIterator __first, _InputIterator __last)
        -: 2074:{
        -: 2075:    __init(__first, __last);
        -: 2076:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2077:    __get_db()->__insert_c(this);
        -: 2078:#endif
        -: 2079:}
        -: 2080:
        -: 2081:template <class _CharT, class _Traits, class _Allocator>
        -: 2082:template<class _InputIterator>
        -: 2083:inline
        -: 2084:basic_string<_CharT, _Traits, _Allocator>::basic_string(_InputIterator __first, _InputIterator __last,
        -: 2085:                                                        const allocator_type& __a)
        -: 2086:    : __r_(__second_tag(), __a)
        -: 2087:{
        -: 2088:    __init(__first, __last);
        -: 2089:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2090:    __get_db()->__insert_c(this);
        -: 2091:#endif
        -: 2092:}
        -: 2093:
        -: 2094:#ifndef _LIBCPP_CXX03_LANG
        -: 2095:
        -: 2096:template <class _CharT, class _Traits, class _Allocator>
        -: 2097:inline
        -: 2098:basic_string<_CharT, _Traits, _Allocator>::basic_string(
        -: 2099:    initializer_list<_CharT> __il)
        -: 2100:{
        -: 2101:    __init(__il.begin(), __il.end());
        -: 2102:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2103:    __get_db()->__insert_c(this);
        -: 2104:#endif
        -: 2105:}
        -: 2106:
        -: 2107:template <class _CharT, class _Traits, class _Allocator>
        -: 2108:inline
        -: 2109:
        -: 2110:basic_string<_CharT, _Traits, _Allocator>::basic_string(
        -: 2111:    initializer_list<_CharT> __il, const _Allocator& __a)
        -: 2112:    : __r_(__second_tag(), __a)
        -: 2113:{
        -: 2114:    __init(__il.begin(), __il.end());
        -: 2115:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2116:    __get_db()->__insert_c(this);
        -: 2117:#endif
        -: 2118:}
        -: 2119:
        -: 2120:#endif  // _LIBCPP_CXX03_LANG
        -: 2121:
        -: 2122:template <class _CharT, class _Traits, class _Allocator>
        -: 2123:basic_string<_CharT, _Traits, _Allocator>::~basic_string()
        -: 2124:{
        -: 2125:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2126:    __get_db()->__erase_c(this);
        -: 2127:#endif
        -: 2128:    if (__is_long())
        -: 2129:        __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        -: 2130:}
        -: 2131:
        -: 2132:template <class _CharT, class _Traits, class _Allocator>
        -: 2133:void
        -: 2134:basic_string<_CharT, _Traits, _Allocator>::__grow_by_and_replace
        -: 2135:    (size_type __old_cap, size_type __delta_cap, size_type __old_sz,
        -: 2136:     size_type __n_copy,  size_type __n_del,     size_type __n_add, const value_type* __p_new_stuff)
        -: 2137:{
        -: 2138:    size_type __ms = max_size();
        -: 2139:    if (__delta_cap > __ms - __old_cap - 1)
        -: 2140:        this->__throw_length_error();
        -: 2141:    pointer __old_p = __get_pointer();
        -: 2142:    size_type __cap = __old_cap < __ms / 2 - __alignment ?
        -: 2143:                          __recommend(_VSTD::max(__old_cap + __delta_cap, 2 * __old_cap)) :
        -: 2144:                          __ms - 1;
        -: 2145:    pointer __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 2146:    __invalidate_all_iterators();
        -: 2147:    if (__n_copy != 0)
        -: 2148:        traits_type::copy(_VSTD::__to_raw_pointer(__p),
        -: 2149:                          _VSTD::__to_raw_pointer(__old_p), __n_copy);
        -: 2150:    if (__n_add != 0)
        -: 2151:        traits_type::copy(_VSTD::__to_raw_pointer(__p) + __n_copy, __p_new_stuff, __n_add);
        -: 2152:    size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
        -: 2153:    if (__sec_cp_sz != 0)
        -: 2154:        traits_type::copy(_VSTD::__to_raw_pointer(__p) + __n_copy + __n_add,
        -: 2155:                          _VSTD::__to_raw_pointer(__old_p) + __n_copy + __n_del, __sec_cp_sz);
        -: 2156:    if (__old_cap+1 != __min_cap)
        -: 2157:        __alloc_traits::deallocate(__alloc(), __old_p, __old_cap+1);
        -: 2158:    __set_long_pointer(__p);
        -: 2159:    __set_long_cap(__cap+1);
        -: 2160:    __old_sz = __n_copy + __n_add + __sec_cp_sz;
        -: 2161:    __set_long_size(__old_sz);
        -: 2162:    traits_type::assign(__p[__old_sz], value_type());
        -: 2163:}
        -: 2164:
        -: 2165:template <class _CharT, class _Traits, class _Allocator>
        -: 2166:void
        -: 2167:basic_string<_CharT, _Traits, _Allocator>::__grow_by(size_type __old_cap, size_type __delta_cap, size_type __old_sz,
        -: 2168:                                                     size_type __n_copy,  size_type __n_del,     size_type __n_add)
        -: 2169:{
        -: 2170:    size_type __ms = max_size();
        -: 2171:    if (__delta_cap > __ms - __old_cap)
        -: 2172:        this->__throw_length_error();
        -: 2173:    pointer __old_p = __get_pointer();
        -: 2174:    size_type __cap = __old_cap < __ms / 2 - __alignment ?
        -: 2175:                          __recommend(_VSTD::max(__old_cap + __delta_cap, 2 * __old_cap)) :
        -: 2176:                          __ms - 1;
        -: 2177:    pointer __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 2178:    __invalidate_all_iterators();
        -: 2179:    if (__n_copy != 0)
        -: 2180:        traits_type::copy(_VSTD::__to_raw_pointer(__p),
        -: 2181:                          _VSTD::__to_raw_pointer(__old_p), __n_copy);
        -: 2182:    size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
        -: 2183:    if (__sec_cp_sz != 0)
        -: 2184:        traits_type::copy(_VSTD::__to_raw_pointer(__p) + __n_copy + __n_add,
        -: 2185:                          _VSTD::__to_raw_pointer(__old_p) + __n_copy + __n_del,
        -: 2186:                          __sec_cp_sz);
        -: 2187:    if (__old_cap+1 != __min_cap)
        -: 2188:        __alloc_traits::deallocate(__alloc(), __old_p, __old_cap+1);
        -: 2189:    __set_long_pointer(__p);
        -: 2190:    __set_long_cap(__cap+1);
        -: 2191:}
        -: 2192:
        -: 2193:// assign
        -: 2194:
        -: 2195:template <class _CharT, class _Traits, class _Allocator>
        -: 2196:basic_string<_CharT, _Traits, _Allocator>&
        -: 2197:basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s, size_type __n)
        -: 2198:{
        -: 2199:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::assign received nullptr");
        -: 2200:    size_type __cap = capacity();
        -: 2201:    if (__cap >= __n)
        -: 2202:    {
        -: 2203:        value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2204:        traits_type::move(__p, __s, __n);
        -: 2205:        traits_type::assign(__p[__n], value_type());
        -: 2206:        __set_size(__n);
        -: 2207:        __invalidate_iterators_past(__n);
        -: 2208:    }
        -: 2209:    else
        -: 2210:    {
        -: 2211:        size_type __sz = size();
        -: 2212:        __grow_by_and_replace(__cap, __n - __cap, __sz, 0, __sz, __n, __s);
        -: 2213:    }
        -: 2214:    return *this;
        -: 2215:}
        -: 2216:
        -: 2217:template <class _CharT, class _Traits, class _Allocator>
        -: 2218:basic_string<_CharT, _Traits, _Allocator>&
        -: 2219:basic_string<_CharT, _Traits, _Allocator>::assign(size_type __n, value_type __c)
        -: 2220:{
        -: 2221:    size_type __cap = capacity();
        -: 2222:    if (__cap < __n)
        -: 2223:    {
        -: 2224:        size_type __sz = size();
        -: 2225:        __grow_by(__cap, __n - __cap, __sz, 0, __sz);
        -: 2226:    }
        -: 2227:    else
        -: 2228:        __invalidate_iterators_past(__n);
        -: 2229:    value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2230:    traits_type::assign(__p, __n, __c);
        -: 2231:    traits_type::assign(__p[__n], value_type());
        -: 2232:    __set_size(__n);
        -: 2233:    return *this;
        -: 2234:}
        -: 2235:
        -: 2236:template <class _CharT, class _Traits, class _Allocator>
        -: 2237:basic_string<_CharT, _Traits, _Allocator>&
        -: 2238:basic_string<_CharT, _Traits, _Allocator>::operator=(value_type __c)
        -: 2239:{
        -: 2240:    pointer __p;
        -: 2241:    if (__is_long())
        -: 2242:    {
        -: 2243:        __p = __get_long_pointer();
        -: 2244:        __set_long_size(1);
        -: 2245:    }
        -: 2246:    else
        -: 2247:    {
        -: 2248:        __p = __get_short_pointer();
        -: 2249:        __set_short_size(1);
        -: 2250:    }
        -: 2251:    traits_type::assign(*__p, __c);
        -: 2252:    traits_type::assign(*++__p, value_type());
        -: 2253:    __invalidate_iterators_past(1);
        -: 2254:    return *this;
        -: 2255:}
        -: 2256:
        -: 2257:template <class _CharT, class _Traits, class _Allocator>
        -: 2258:basic_string<_CharT, _Traits, _Allocator>&
        -: 2259:basic_string<_CharT, _Traits, _Allocator>::operator=(const basic_string& __str)
        -: 2260:{
        -: 2261:    if (this != &__str)
        -: 2262:    {
        -: 2263:        __copy_assign_alloc(__str);
        -: 2264:        assign(__str.data(), __str.size());
        -: 2265:    }
        -: 2266:    return *this;
        -: 2267:}
        -: 2268:
        -: 2269:#ifndef _LIBCPP_CXX03_LANG
        -: 2270:
        -: 2271:template <class _CharT, class _Traits, class _Allocator>
        -: 2272:inline
        -: 2273:void
        -: 2274:basic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, false_type)
        -: 2275:    _NOEXCEPT_(__alloc_traits::is_always_equal::value)
        -: 2276:{
        -: 2277:    if (__alloc() != __str.__alloc())
        -: 2278:        assign(__str);
        -: 2279:    else
        -: 2280:        __move_assign(__str, true_type());
        -: 2281:}
        -: 2282:
        -: 2283:template <class _CharT, class _Traits, class _Allocator>
        -: 2284:inline
        -: 2285:void
    #####: 2286:basic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, true_type)
    $$$$$: 2286-block  0
        -: 2287:#if _LIBCPP_STD_VER > 14
        -: 2288:    _NOEXCEPT
        -: 2289:#else
        -: 2290:    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 2291:#endif
        -: 2292:{
    #####: 2293:    __clear_and_shrink();
    #####: 2294:    __r_.first() = __str.__r_.first();
    #####: 2295:    __move_assign_alloc(__str);
    #####: 2296:    __str.__zero();
    #####: 2297:}
    $$$$$: 2297-block  0
        -: 2298:
        -: 2299:template <class _CharT, class _Traits, class _Allocator>
        -: 2300:inline
        -: 2301:basic_string<_CharT, _Traits, _Allocator>&
    #####: 2302:basic_string<_CharT, _Traits, _Allocator>::operator=(basic_string&& __str)
    $$$$$: 2302-block  0
        -: 2303:    _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))
        -: 2304:{
    #####: 2305:    __move_assign(__str, integral_constant<bool,
        -: 2306:          __alloc_traits::propagate_on_container_move_assignment::value>());
    #####: 2307:    return *this;
    $$$$$: 2307-block  0
        -: 2308:}
        -: 2309:
        -: 2310:#endif
        -: 2311:
        -: 2312:template <class _CharT, class _Traits, class _Allocator>
        -: 2313:template<class _InputIterator>
        -: 2314:typename enable_if
        -: 2315:<
        -: 2316:     __is_exactly_input_iterator <_InputIterator>::value
        -: 2317:          || !__libcpp_string_gets_noexcept_iterator<_InputIterator>::value,
        -: 2318:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2319:>::type
        -: 2320:basic_string<_CharT, _Traits, _Allocator>::assign(_InputIterator __first, _InputIterator __last)
        -: 2321:{
        -: 2322:    const basic_string __temp(__first, __last, __alloc());
        -: 2323:    assign(__temp.data(), __temp.size());
        -: 2324:    return *this;
        -: 2325:}
        -: 2326:
        -: 2327:template <class _CharT, class _Traits, class _Allocator>
        -: 2328:template<class _ForwardIterator>
        -: 2329:typename enable_if
        -: 2330:<
        -: 2331:    __is_forward_iterator<_ForwardIterator>::value
        -: 2332:         && __libcpp_string_gets_noexcept_iterator<_ForwardIterator>::value,
        -: 2333:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2334:>::type
        -: 2335:basic_string<_CharT, _Traits, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)
        -: 2336:{
        -: 2337:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2338:    size_type __cap = capacity();
        -: 2339:    if (__cap < __n)
        -: 2340:    {
        -: 2341:        size_type __sz = size();
        -: 2342:        __grow_by(__cap, __n - __cap, __sz, 0, __sz);
        -: 2343:    }
        -: 2344:    else
        -: 2345:        __invalidate_iterators_past(__n);
        -: 2346:    pointer __p = __get_pointer();
        -: 2347:    for (; __first != __last; ++__first, ++__p)
        -: 2348:        traits_type::assign(*__p, *__first);
        -: 2349:    traits_type::assign(*__p, value_type());
        -: 2350:    __set_size(__n);
        -: 2351:    return *this;
        -: 2352:}
        -: 2353:
        -: 2354:template <class _CharT, class _Traits, class _Allocator>
        -: 2355:basic_string<_CharT, _Traits, _Allocator>&
        -: 2356:basic_string<_CharT, _Traits, _Allocator>::assign(const basic_string& __str, size_type __pos, size_type __n)
        -: 2357:{
        -: 2358:    size_type __sz = __str.size();
        -: 2359:    if (__pos > __sz)
        -: 2360:        this->__throw_out_of_range();
        -: 2361:    return assign(__str.data() + __pos, _VSTD::min(__n, __sz - __pos));
        -: 2362:}
        -: 2363:
        -: 2364:template <class _CharT, class _Traits, class _Allocator>
        -: 2365:template <class _Tp>
        -: 2366:typename enable_if
        -: 2367:<
        -: 2368:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 2369:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2370:>::type
        -: 2371:basic_string<_CharT, _Traits, _Allocator>::assign(const _Tp & __t, size_type __pos, size_type __n)
        -: 2372:{
        -: 2373:    __self_view __sv = __t;
        -: 2374:    size_type __sz = __sv.size();
        -: 2375:    if (__pos > __sz)
        -: 2376:        this->__throw_out_of_range();
        -: 2377:    return assign(__sv.data() + __pos, _VSTD::min(__n, __sz - __pos));
        -: 2378:}
        -: 2379:
        -: 2380:
        -: 2381:template <class _CharT, class _Traits, class _Allocator>
        -: 2382:basic_string<_CharT, _Traits, _Allocator>&
        -: 2383:basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s)
        -: 2384:{
        -: 2385:    _LIBCPP_ASSERT(__s != nullptr, "string::assign received nullptr");
        -: 2386:    return assign(__s, traits_type::length(__s));
        -: 2387:}
        -: 2388:
        -: 2389:// append
        -: 2390:
        -: 2391:template <class _CharT, class _Traits, class _Allocator>
        -: 2392:basic_string<_CharT, _Traits, _Allocator>&
        -: 2393:basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s, size_type __n)
        -: 2394:{
        -: 2395:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::append received nullptr");
        -: 2396:    size_type __cap = capacity();
        -: 2397:    size_type __sz = size();
        -: 2398:    if (__cap - __sz >= __n)
        -: 2399:    {
        -: 2400:        if (__n)
        -: 2401:        {
        -: 2402:            value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2403:            traits_type::copy(__p + __sz, __s, __n);
        -: 2404:            __sz += __n;
        -: 2405:            __set_size(__sz);
        -: 2406:            traits_type::assign(__p[__sz], value_type());
        -: 2407:        }
        -: 2408:    }
        -: 2409:    else
        -: 2410:        __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __sz, 0, __n, __s);
        -: 2411:    return *this;
        -: 2412:}
        -: 2413:
        -: 2414:template <class _CharT, class _Traits, class _Allocator>
        -: 2415:basic_string<_CharT, _Traits, _Allocator>&
        -: 2416:basic_string<_CharT, _Traits, _Allocator>::append(size_type __n, value_type __c)
        -: 2417:{
        -: 2418:    if (__n)
        -: 2419:    {
        -: 2420:        size_type __cap = capacity();
        -: 2421:        size_type __sz = size();
        -: 2422:        if (__cap - __sz < __n)
        -: 2423:            __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);
        -: 2424:        pointer __p = __get_pointer();
        -: 2425:        traits_type::assign(_VSTD::__to_raw_pointer(__p) + __sz, __n, __c);
        -: 2426:        __sz += __n;
        -: 2427:        __set_size(__sz);
        -: 2428:        traits_type::assign(__p[__sz], value_type());
        -: 2429:    }
        -: 2430:    return *this;
        -: 2431:}
        -: 2432:
        -: 2433:template <class _CharT, class _Traits, class _Allocator>
        -: 2434:inline void
        -: 2435:basic_string<_CharT, _Traits, _Allocator>::__append_default_init(size_type __n)
        -: 2436:{
        -: 2437:    if (__n)
        -: 2438:    {
        -: 2439:        size_type __cap = capacity();
        -: 2440:        size_type __sz = size();
        -: 2441:        if (__cap - __sz < __n)
        -: 2442:            __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);
        -: 2443:        pointer __p = __get_pointer();
        -: 2444:        __sz += __n;
        -: 2445:        __set_size(__sz);
        -: 2446:        traits_type::assign(__p[__sz], value_type());
        -: 2447:    }
        -: 2448:}
        -: 2449:
        -: 2450:template <class _CharT, class _Traits, class _Allocator>
        -: 2451:void
        -: 2452:basic_string<_CharT, _Traits, _Allocator>::push_back(value_type __c)
        -: 2453:{
        -: 2454:    bool __is_short = !__is_long();
        -: 2455:    size_type __cap;
        -: 2456:    size_type __sz;
        -: 2457:    if (__is_short)
        -: 2458:    {
        -: 2459:        __cap = __min_cap - 1;
        -: 2460:        __sz = __get_short_size();
        -: 2461:    }
        -: 2462:    else
        -: 2463:    {
        -: 2464:        __cap = __get_long_cap() - 1;
        -: 2465:        __sz = __get_long_size();
        -: 2466:    }
        -: 2467:    if (__sz == __cap)
        -: 2468:    {
        -: 2469:        __grow_by(__cap, 1, __sz, __sz, 0);
        -: 2470:        __is_short = !__is_long();
        -: 2471:    }
        -: 2472:    pointer __p;
        -: 2473:    if (__is_short)
        -: 2474:    {
        -: 2475:        __p = __get_short_pointer() + __sz;
        -: 2476:        __set_short_size(__sz+1);
        -: 2477:    }
        -: 2478:    else
        -: 2479:    {
        -: 2480:        __p = __get_long_pointer() + __sz;
        -: 2481:        __set_long_size(__sz+1);
        -: 2482:    }
        -: 2483:    traits_type::assign(*__p, __c);
        -: 2484:    traits_type::assign(*++__p, value_type());
        -: 2485:}
        -: 2486:
        -: 2487:template <class _Tp>
        -: 2488:bool __ptr_in_range (const _Tp* __p, const _Tp* __first, const _Tp* __last)
        -: 2489:{
        -: 2490:    return __first <= __p && __p < __last;
        -: 2491:}
        -: 2492:
        -: 2493:template <class _Tp1, class _Tp2>
        -: 2494:bool __ptr_in_range (const _Tp1*, const _Tp2*, const _Tp2*)
        -: 2495:{
        -: 2496:    return false;
        -: 2497:}
        -: 2498:
        -: 2499:template <class _CharT, class _Traits, class _Allocator>
        -: 2500:template<class _ForwardIterator>
        -: 2501:basic_string<_CharT, _Traits, _Allocator>&
        -: 2502:basic_string<_CharT, _Traits, _Allocator>::__append_forward_unsafe(
        -: 2503:    _ForwardIterator __first, _ForwardIterator __last)
        -: 2504:{
        -: 2505:    static_assert(__is_forward_iterator<_ForwardIterator>::value,
        -: 2506:                  "function requires a ForwardIterator");
        -: 2507:    size_type __sz = size();
        -: 2508:    size_type __cap = capacity();
        -: 2509:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2510:    if (__n)
        -: 2511:    {
        -: 2512:        typedef typename iterator_traits<_ForwardIterator>::reference _CharRef;
        -: 2513:        _CharRef __tmp_ref = *__first;
        -: 2514:        if (__ptr_in_range(_VSTD::addressof(__tmp_ref), data(), data() + size()))
        -: 2515:        {
        -: 2516:            const basic_string __temp (__first, __last, __alloc());
        -: 2517:            append(__temp.data(), __temp.size());
        -: 2518:        }
        -: 2519:        else 
        -: 2520:        {
        -: 2521:            if (__cap - __sz < __n)
        -: 2522:                __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);
        -: 2523:            pointer __p = __get_pointer() + __sz;
        -: 2524:            for (; __first != __last; ++__p, ++__first)
        -: 2525:                traits_type::assign(*__p, *__first);
        -: 2526:            traits_type::assign(*__p, value_type());
        -: 2527:            __set_size(__sz + __n);
        -: 2528:        }
        -: 2529:    }
        -: 2530:    return *this;
        -: 2531:}
        -: 2532:
        -: 2533:template <class _CharT, class _Traits, class _Allocator>
        -: 2534:inline
        -: 2535:basic_string<_CharT, _Traits, _Allocator>&
    #####: 2536:basic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str)
    $$$$$: 2536-block  0
        -: 2537:{
    #####: 2538:    return append(__str.data(), __str.size());
    $$$$$: 2538-block  0
        -: 2539:}
        -: 2540:
        -: 2541:template <class _CharT, class _Traits, class _Allocator>
        -: 2542:basic_string<_CharT, _Traits, _Allocator>&
        -: 2543:basic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str, size_type __pos, size_type __n)
        -: 2544:{
        -: 2545:    size_type __sz = __str.size();
        -: 2546:    if (__pos > __sz)
        -: 2547:        this->__throw_out_of_range();
        -: 2548:    return append(__str.data() + __pos, _VSTD::min(__n, __sz - __pos));
        -: 2549:}
        -: 2550:
        -: 2551:template <class _CharT, class _Traits, class _Allocator>
        -: 2552:template <class _Tp>
        -: 2553:    typename enable_if
        -: 2554:    <
        -: 2555:        __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 2556:        basic_string<_CharT, _Traits, _Allocator>&
        -: 2557:    >::type
        -: 2558:basic_string<_CharT, _Traits, _Allocator>::append(const _Tp & __t, size_type __pos, size_type __n)
        -: 2559:{
        -: 2560:    __self_view __sv = __t;
        -: 2561:    size_type __sz = __sv.size();
        -: 2562:    if (__pos > __sz)
        -: 2563:        this->__throw_out_of_range();
        -: 2564:    return append(__sv.data() + __pos, _VSTD::min(__n, __sz - __pos));
        -: 2565:}
        -: 2566:
        -: 2567:template <class _CharT, class _Traits, class _Allocator>
        -: 2568:basic_string<_CharT, _Traits, _Allocator>&
        -: 2569:basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s)
        -: 2570:{
        -: 2571:    _LIBCPP_ASSERT(__s != nullptr, "string::append received nullptr");
        -: 2572:    return append(__s, traits_type::length(__s));
        -: 2573:}
        -: 2574:
        -: 2575:// insert
        -: 2576:
        -: 2577:template <class _CharT, class _Traits, class _Allocator>
        -: 2578:basic_string<_CharT, _Traits, _Allocator>&
        -: 2579:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s, size_type __n)
        -: 2580:{
        -: 2581:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::insert received nullptr");
        -: 2582:    size_type __sz = size();
        -: 2583:    if (__pos > __sz)
        -: 2584:        this->__throw_out_of_range();
        -: 2585:    size_type __cap = capacity();
        -: 2586:    if (__cap - __sz >= __n)
        -: 2587:    {
        -: 2588:        if (__n)
        -: 2589:        {
        -: 2590:            value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2591:            size_type __n_move = __sz - __pos;
        -: 2592:            if (__n_move != 0)
        -: 2593:            {
        -: 2594:                if (__p + __pos <= __s && __s < __p + __sz)
        -: 2595:                    __s += __n;
        -: 2596:                traits_type::move(__p + __pos + __n, __p + __pos, __n_move);
        -: 2597:            }
        -: 2598:            traits_type::move(__p + __pos, __s, __n);
        -: 2599:            __sz += __n;
        -: 2600:            __set_size(__sz);
        -: 2601:            traits_type::assign(__p[__sz], value_type());
        -: 2602:        }
        -: 2603:    }
        -: 2604:    else
        -: 2605:        __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __pos, 0, __n, __s);
        -: 2606:    return *this;
        -: 2607:}
        -: 2608:
        -: 2609:template <class _CharT, class _Traits, class _Allocator>
        -: 2610:basic_string<_CharT, _Traits, _Allocator>&
        -: 2611:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, size_type __n, value_type __c)
        -: 2612:{
        -: 2613:    size_type __sz = size();
        -: 2614:    if (__pos > __sz)
        -: 2615:        this->__throw_out_of_range();
        -: 2616:    if (__n)
        -: 2617:    {
        -: 2618:        size_type __cap = capacity();
        -: 2619:        value_type* __p;
        -: 2620:        if (__cap - __sz >= __n)
        -: 2621:        {
        -: 2622:            __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2623:            size_type __n_move = __sz - __pos;
        -: 2624:            if (__n_move != 0)
        -: 2625:                traits_type::move(__p + __pos + __n, __p + __pos, __n_move);
        -: 2626:        }
        -: 2627:        else
        -: 2628:        {
        -: 2629:            __grow_by(__cap, __sz + __n - __cap, __sz, __pos, 0, __n);
        -: 2630:            __p = _VSTD::__to_raw_pointer(__get_long_pointer());
        -: 2631:        }
        -: 2632:        traits_type::assign(__p + __pos, __n, __c);
        -: 2633:        __sz += __n;
        -: 2634:        __set_size(__sz);
        -: 2635:        traits_type::assign(__p[__sz], value_type());
        -: 2636:    }
        -: 2637:    return *this;
        -: 2638:}
        -: 2639:
        -: 2640:template <class _CharT, class _Traits, class _Allocator>
        -: 2641:template<class _InputIterator>
        -: 2642:typename enable_if
        -: 2643:<
        -: 2644:   __is_exactly_input_iterator<_InputIterator>::value
        -: 2645:        || !__libcpp_string_gets_noexcept_iterator<_InputIterator>::value,
        -: 2646:   typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 2647:>::type
        -: 2648:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _InputIterator __first, _InputIterator __last)
        -: 2649:{
        -: 2650:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2651:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,
        -: 2652:        "string::insert(iterator, range) called with an iterator not"
        -: 2653:        " referring to this string");
        -: 2654:#endif
        -: 2655:    const basic_string __temp(__first, __last, __alloc());
        -: 2656:    return insert(__pos, __temp.data(), __temp.data() + __temp.size());
        -: 2657:}
        -: 2658:
        -: 2659:template <class _CharT, class _Traits, class _Allocator>
        -: 2660:template<class _ForwardIterator>
        -: 2661:typename enable_if
        -: 2662:<
        -: 2663:    __is_forward_iterator<_ForwardIterator>::value
        -: 2664:        && __libcpp_string_gets_noexcept_iterator<_ForwardIterator>::value,
        -: 2665:    typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 2666:>::type
        -: 2667:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last)
        -: 2668:{
        -: 2669:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2670:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,
        -: 2671:        "string::insert(iterator, range) called with an iterator not"
        -: 2672:        " referring to this string");
        -: 2673:#endif
        -: 2674:    size_type __ip = static_cast<size_type>(__pos - begin());
        -: 2675:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2676:    if (__n)
        -: 2677:    {
        -: 2678:        typedef typename iterator_traits<_ForwardIterator>::reference _CharRef;
        -: 2679:        _CharRef __tmp_char = *__first;
        -: 2680:        if (__ptr_in_range(_VSTD::addressof(__tmp_char), data(), data() + size()))
        -: 2681:        {
        -: 2682:            const basic_string __temp(__first, __last, __alloc());
        -: 2683:            return insert(__pos, __temp.data(), __temp.data() + __temp.size());
        -: 2684:        }
        -: 2685:
        -: 2686:        size_type __sz = size();
        -: 2687:        size_type __cap = capacity();
        -: 2688:        value_type* __p;
        -: 2689:        if (__cap - __sz >= __n)
        -: 2690:        {
        -: 2691:            __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2692:            size_type __n_move = __sz - __ip;
        -: 2693:            if (__n_move != 0)
        -: 2694:                traits_type::move(__p + __ip + __n, __p + __ip, __n_move);
        -: 2695:        }
        -: 2696:        else
        -: 2697:        {
        -: 2698:            __grow_by(__cap, __sz + __n - __cap, __sz, __ip, 0, __n);
        -: 2699:            __p = _VSTD::__to_raw_pointer(__get_long_pointer());
        -: 2700:        }
        -: 2701:        __sz += __n;
        -: 2702:        __set_size(__sz);
        -: 2703:        traits_type::assign(__p[__sz], value_type());
        -: 2704:        for (__p += __ip; __first != __last; ++__p, ++__first)
        -: 2705:            traits_type::assign(*__p, *__first);
        -: 2706:    }
        -: 2707:    return begin() + __ip;
        -: 2708:}
        -: 2709:
        -: 2710:template <class _CharT, class _Traits, class _Allocator>
        -: 2711:inline
        -: 2712:basic_string<_CharT, _Traits, _Allocator>&
        -: 2713:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const basic_string& __str)
        -: 2714:{
        -: 2715:    return insert(__pos1, __str.data(), __str.size());
        -: 2716:}
        -: 2717:
        -: 2718:template <class _CharT, class _Traits, class _Allocator>
        -: 2719:basic_string<_CharT, _Traits, _Allocator>&
        -: 2720:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const basic_string& __str,
        -: 2721:                                                  size_type __pos2, size_type __n)
        -: 2722:{
        -: 2723:    size_type __str_sz = __str.size();
        -: 2724:    if (__pos2 > __str_sz)
        -: 2725:        this->__throw_out_of_range();
        -: 2726:    return insert(__pos1, __str.data() + __pos2, _VSTD::min(__n, __str_sz - __pos2));
        -: 2727:}
        -: 2728:
        -: 2729:template <class _CharT, class _Traits, class _Allocator>
        -: 2730:template <class _Tp>
        -: 2731:typename enable_if
        -: 2732:<
        -: 2733:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 2734:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2735:>::type
        -: 2736:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const _Tp& __t,
        -: 2737:                                                  size_type __pos2, size_type __n)
        -: 2738:{
        -: 2739:    __self_view __sv = __t;
        -: 2740:    size_type __str_sz = __sv.size();
        -: 2741:    if (__pos2 > __str_sz)
        -: 2742:        this->__throw_out_of_range();
        -: 2743:    return insert(__pos1, __sv.data() + __pos2, _VSTD::min(__n, __str_sz - __pos2));
        -: 2744:}
        -: 2745:
        -: 2746:template <class _CharT, class _Traits, class _Allocator>
        -: 2747:basic_string<_CharT, _Traits, _Allocator>&
        -: 2748:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s)
        -: 2749:{
        -: 2750:    _LIBCPP_ASSERT(__s != nullptr, "string::insert received nullptr");
        -: 2751:    return insert(__pos, __s, traits_type::length(__s));
        -: 2752:}
        -: 2753:
        -: 2754:template <class _CharT, class _Traits, class _Allocator>
        -: 2755:typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 2756:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, value_type __c)
        -: 2757:{
        -: 2758:    size_type __ip = static_cast<size_type>(__pos - begin());
        -: 2759:    size_type __sz = size();
        -: 2760:    size_type __cap = capacity();
        -: 2761:    value_type* __p;
        -: 2762:    if (__cap == __sz)
        -: 2763:    {
        -: 2764:        __grow_by(__cap, 1, __sz, __ip, 0, 1);
        -: 2765:        __p = _VSTD::__to_raw_pointer(__get_long_pointer());
        -: 2766:    }
        -: 2767:    else
        -: 2768:    {
        -: 2769:        __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2770:        size_type __n_move = __sz - __ip;
        -: 2771:        if (__n_move != 0)
        -: 2772:            traits_type::move(__p + __ip + 1, __p + __ip, __n_move);
        -: 2773:    }
        -: 2774:    traits_type::assign(__p[__ip], __c);
        -: 2775:    traits_type::assign(__p[++__sz], value_type());
        -: 2776:    __set_size(__sz);
        -: 2777:    return begin() + static_cast<difference_type>(__ip);
        -: 2778:}
        -: 2779:
        -: 2780:template <class _CharT, class _Traits, class _Allocator>
        -: 2781:inline
        -: 2782:typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 2783:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, size_type __n, value_type __c)
        -: 2784:{
        -: 2785:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2786:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,
        -: 2787:        "string::insert(iterator, n, value) called with an iterator not"
        -: 2788:        " referring to this string");
        -: 2789:#endif
        -: 2790:    difference_type __p = __pos - begin();
        -: 2791:    insert(static_cast<size_type>(__p), __n, __c);
        -: 2792:    return begin() + __p;
        -: 2793:}
        -: 2794:
        -: 2795:// replace
        -: 2796:
        -: 2797:template <class _CharT, class _Traits, class _Allocator>
        -: 2798:basic_string<_CharT, _Traits, _Allocator>&
        -: 2799:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2)
        -: 2800:    _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
        -: 2801:{
        -: 2802:    _LIBCPP_ASSERT(__n2 == 0 || __s != nullptr, "string::replace received nullptr");
        -: 2803:    size_type __sz = size();
        -: 2804:    if (__pos > __sz)
        -: 2805:        this->__throw_out_of_range();
        -: 2806:    __n1 = _VSTD::min(__n1, __sz - __pos);
        -: 2807:    size_type __cap = capacity();
        -: 2808:    if (__cap - __sz + __n1 >= __n2)
        -: 2809:    {
        -: 2810:        value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2811:        if (__n1 != __n2)
        -: 2812:        {
        -: 2813:            size_type __n_move = __sz - __pos - __n1;
        -: 2814:            if (__n_move != 0)
        -: 2815:            {
        -: 2816:                if (__n1 > __n2)
        -: 2817:                {
        -: 2818:                    traits_type::move(__p + __pos, __s, __n2);
        -: 2819:                    traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
        -: 2820:                    goto __finish;
        -: 2821:                }
        -: 2822:                if (__p + __pos < __s && __s < __p + __sz)
        -: 2823:                {
        -: 2824:                    if (__p + __pos + __n1 <= __s)
        -: 2825:                        __s += __n2 - __n1;
        -: 2826:                    else // __p + __pos < __s < __p + __pos + __n1
        -: 2827:                    {
        -: 2828:                        traits_type::move(__p + __pos, __s, __n1);
        -: 2829:                        __pos += __n1;
        -: 2830:                        __s += __n2;
        -: 2831:                        __n2 -= __n1;
        -: 2832:                        __n1 = 0;
        -: 2833:                    }
        -: 2834:                }
        -: 2835:                traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
        -: 2836:            }
        -: 2837:        }
        -: 2838:        traits_type::move(__p + __pos, __s, __n2);
        -: 2839:__finish:
        -: 2840:// __sz += __n2 - __n1; in this and the below function below can cause unsigned integer overflow,
        -: 2841:// but this is a safe operation, so we disable the check.
        -: 2842:        __sz += __n2 - __n1;
        -: 2843:        __set_size(__sz);
        -: 2844:        __invalidate_iterators_past(__sz);
        -: 2845:        traits_type::assign(__p[__sz], value_type());
        -: 2846:    }
        -: 2847:    else
        -: 2848:        __grow_by_and_replace(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2, __s);
        -: 2849:    return *this;
        -: 2850:}
        -: 2851:
        -: 2852:template <class _CharT, class _Traits, class _Allocator>
        -: 2853:basic_string<_CharT, _Traits, _Allocator>&
        -: 2854:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, size_type __n2, value_type __c)
        -: 2855:    _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
        -: 2856:{
        -: 2857:    size_type __sz = size();
        -: 2858:    if (__pos > __sz)
        -: 2859:        this->__throw_out_of_range();
        -: 2860:    __n1 = _VSTD::min(__n1, __sz - __pos);
        -: 2861:    size_type __cap = capacity();
        -: 2862:    value_type* __p;
        -: 2863:    if (__cap - __sz + __n1 >= __n2)
        -: 2864:    {
        -: 2865:        __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2866:        if (__n1 != __n2)
        -: 2867:        {
        -: 2868:            size_type __n_move = __sz - __pos - __n1;
        -: 2869:            if (__n_move != 0)
        -: 2870:                traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
        -: 2871:        }
        -: 2872:    }
        -: 2873:    else
        -: 2874:    {
        -: 2875:        __grow_by(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2);
        -: 2876:        __p = _VSTD::__to_raw_pointer(__get_long_pointer());
        -: 2877:    }
        -: 2878:    traits_type::assign(__p + __pos, __n2, __c);
        -: 2879:    __sz += __n2 - __n1;
        -: 2880:    __set_size(__sz);
        -: 2881:    __invalidate_iterators_past(__sz);
        -: 2882:    traits_type::assign(__p[__sz], value_type());
        -: 2883:    return *this;
        -: 2884:}
        -: 2885:
        -: 2886:template <class _CharT, class _Traits, class _Allocator>
        -: 2887:template<class _InputIterator>
        -: 2888:typename enable_if
        -: 2889:<
        -: 2890:    __is_input_iterator<_InputIterator>::value,
        -: 2891:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2892:>::type
        -: 2893:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2,
        -: 2894:                                                   _InputIterator __j1, _InputIterator __j2)
        -: 2895:{
        -: 2896:    const basic_string __temp(__j1, __j2, __alloc());
        -: 2897:    return this->replace(__i1, __i2, __temp);
        -: 2898:}
        -: 2899:
        -: 2900:template <class _CharT, class _Traits, class _Allocator>
        -: 2901:inline
        -: 2902:basic_string<_CharT, _Traits, _Allocator>&
        -: 2903:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const basic_string& __str)
        -: 2904:{
        -: 2905:    return replace(__pos1, __n1, __str.data(), __str.size());
        -: 2906:}
        -: 2907:
        -: 2908:template <class _CharT, class _Traits, class _Allocator>
        -: 2909:basic_string<_CharT, _Traits, _Allocator>&
        -: 2910:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const basic_string& __str,
        -: 2911:                                                   size_type __pos2, size_type __n2)
        -: 2912:{
        -: 2913:    size_type __str_sz = __str.size();
        -: 2914:    if (__pos2 > __str_sz)
        -: 2915:        this->__throw_out_of_range();
        -: 2916:    return replace(__pos1, __n1, __str.data() + __pos2, _VSTD::min(__n2, __str_sz - __pos2));
        -: 2917:}
        -: 2918:
        -: 2919:template <class _CharT, class _Traits, class _Allocator>
        -: 2920:template <class _Tp>
        -: 2921:typename enable_if
        -: 2922:<
        -: 2923:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 2924:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2925:>::type
        -: 2926:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const _Tp& __t,
        -: 2927:                                                   size_type __pos2, size_type __n2)
        -: 2928:{
        -: 2929:    __self_view __sv = __t;
        -: 2930:    size_type __str_sz = __sv.size();
        -: 2931:    if (__pos2 > __str_sz)
        -: 2932:        this->__throw_out_of_range();
        -: 2933:    return replace(__pos1, __n1, __sv.data() + __pos2, _VSTD::min(__n2, __str_sz - __pos2));
        -: 2934:}
        -: 2935:
        -: 2936:template <class _CharT, class _Traits, class _Allocator>
        -: 2937:basic_string<_CharT, _Traits, _Allocator>&
        -: 2938:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s)
        -: 2939:{
        -: 2940:    _LIBCPP_ASSERT(__s != nullptr, "string::replace received nullptr");
        -: 2941:    return replace(__pos, __n1, __s, traits_type::length(__s));
        -: 2942:}
        -: 2943:
        -: 2944:template <class _CharT, class _Traits, class _Allocator>
        -: 2945:inline
        -: 2946:basic_string<_CharT, _Traits, _Allocator>&
        -: 2947:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const basic_string& __str)
        -: 2948:{
        -: 2949:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1),
        -: 2950:                   __str.data(), __str.size());
        -: 2951:}
        -: 2952:
        -: 2953:template <class _CharT, class _Traits, class _Allocator>
        -: 2954:inline
        -: 2955:basic_string<_CharT, _Traits, _Allocator>&
        -: 2956:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n)
        -: 2957:{
        -: 2958:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s, __n);
        -: 2959:}
        -: 2960:
        -: 2961:template <class _CharT, class _Traits, class _Allocator>
        -: 2962:inline
        -: 2963:basic_string<_CharT, _Traits, _Allocator>&
        -: 2964:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const value_type* __s)
        -: 2965:{
        -: 2966:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s);
        -: 2967:}
        -: 2968:
        -: 2969:template <class _CharT, class _Traits, class _Allocator>
        -: 2970:inline
        -: 2971:basic_string<_CharT, _Traits, _Allocator>&
        -: 2972:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c)
        -: 2973:{
        -: 2974:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __n, __c);
        -: 2975:}
        -: 2976:
        -: 2977:// erase
        -: 2978:
        -: 2979:template <class _CharT, class _Traits, class _Allocator>
        -: 2980:basic_string<_CharT, _Traits, _Allocator>&
        -: 2981:basic_string<_CharT, _Traits, _Allocator>::erase(size_type __pos, size_type __n)
        -: 2982:{
        -: 2983:    size_type __sz = size();
        -: 2984:    if (__pos > __sz)
        -: 2985:        this->__throw_out_of_range();
        -: 2986:    if (__n)
        -: 2987:    {
        -: 2988:        value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2989:        __n = _VSTD::min(__n, __sz - __pos);
        -: 2990:        size_type __n_move = __sz - __pos - __n;
        -: 2991:        if (__n_move != 0)
        -: 2992:            traits_type::move(__p + __pos, __p + __pos + __n, __n_move);
        -: 2993:        __sz -= __n;
        -: 2994:        __set_size(__sz);
        -: 2995:        __invalidate_iterators_past(__sz);
        -: 2996:        traits_type::assign(__p[__sz], value_type());
        -: 2997:    }
        -: 2998:    return *this;
        -: 2999:}
        -: 3000:
        -: 3001:template <class _CharT, class _Traits, class _Allocator>
        -: 3002:inline
        -: 3003:typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 3004:basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __pos)
        -: 3005:{
        -: 3006:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 3007:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,
        -: 3008:        "string::erase(iterator) called with an iterator not"
        -: 3009:        " referring to this string");
        -: 3010:#endif
        -: 3011:    _LIBCPP_ASSERT(__pos != end(),
        -: 3012:        "string::erase(iterator) called with a non-dereferenceable iterator");
        -: 3013:    iterator __b = begin();
        -: 3014:    size_type __r = static_cast<size_type>(__pos - __b);
        -: 3015:    erase(__r, 1);
        -: 3016:    return __b + static_cast<difference_type>(__r);
        -: 3017:}
        -: 3018:
        -: 3019:template <class _CharT, class _Traits, class _Allocator>
        -: 3020:inline
        -: 3021:typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 3022:basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __first, const_iterator __last)
        -: 3023:{
        -: 3024:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 3025:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__first) == this,
        -: 3026:        "string::erase(iterator,  iterator) called with an iterator not"
        -: 3027:        " referring to this string");
        -: 3028:#endif
        -: 3029:    _LIBCPP_ASSERT(__first <= __last, "string::erase(first, last) called with invalid range");
        -: 3030:    iterator __b = begin();
        -: 3031:    size_type __r = static_cast<size_type>(__first - __b);
        -: 3032:    erase(__r, static_cast<size_type>(__last - __first));
        -: 3033:    return __b + static_cast<difference_type>(__r);
        -: 3034:}
        -: 3035:
        -: 3036:template <class _CharT, class _Traits, class _Allocator>
        -: 3037:inline
        -: 3038:void
        -: 3039:basic_string<_CharT, _Traits, _Allocator>::pop_back()
        -: 3040:{
        -: 3041:    _LIBCPP_ASSERT(!empty(), "string::pop_back(): string is already empty");
        -: 3042:    size_type __sz;
        -: 3043:    if (__is_long())
        -: 3044:    {
        -: 3045:        __sz = __get_long_size() - 1;
        -: 3046:        __set_long_size(__sz);
        -: 3047:        traits_type::assign(*(__get_long_pointer() + __sz), value_type());
        -: 3048:    }
        -: 3049:    else
        -: 3050:    {
        -: 3051:        __sz = __get_short_size() - 1;
        -: 3052:        __set_short_size(__sz);
        -: 3053:        traits_type::assign(*(__get_short_pointer() + __sz), value_type());
        -: 3054:    }
        -: 3055:    __invalidate_iterators_past(__sz);
        -: 3056:}
        -: 3057:
        -: 3058:template <class _CharT, class _Traits, class _Allocator>
        -: 3059:inline
        -: 3060:void
    #####: 3061:basic_string<_CharT, _Traits, _Allocator>::clear() _NOEXCEPT
    $$$$$: 3061-block  0
        -: 3062:{
    #####: 3063:    __invalidate_all_iterators();
    $$$$$: 3063-block  0
    $$$$$: 3063-block  1
    #####: 3064:    if (__is_long())
    $$$$$: 3064-block  0
        -: 3065:    {
    #####: 3066:        traits_type::assign(*__get_long_pointer(), value_type());
    #####: 3067:        __set_long_size(0);
    #####: 3068:    }
    $$$$$: 3068-block  0
        -: 3069:    else
        -: 3070:    {
    #####: 3071:        traits_type::assign(*__get_short_pointer(), value_type());
    #####: 3072:        __set_short_size(0);
    $$$$$: 3072-block  0
        -: 3073:    }
    #####: 3074:}
    $$$$$: 3074-block  0
        -: 3075:
        -: 3076:template <class _CharT, class _Traits, class _Allocator>
        -: 3077:inline
        -: 3078:void
        -: 3079:basic_string<_CharT, _Traits, _Allocator>::__erase_to_end(size_type __pos)
        -: 3080:{
        -: 3081:    if (__is_long())
        -: 3082:    {
        -: 3083:        traits_type::assign(*(__get_long_pointer() + __pos), value_type());
        -: 3084:        __set_long_size(__pos);
        -: 3085:    }
        -: 3086:    else
        -: 3087:    {
        -: 3088:        traits_type::assign(*(__get_short_pointer() + __pos), value_type());
        -: 3089:        __set_short_size(__pos);
        -: 3090:    }
        -: 3091:    __invalidate_iterators_past(__pos);
        -: 3092:}
        -: 3093:
        -: 3094:template <class _CharT, class _Traits, class _Allocator>
        -: 3095:void
        -: 3096:basic_string<_CharT, _Traits, _Allocator>::resize(size_type __n, value_type __c)
        -: 3097:{
        -: 3098:    size_type __sz = size();
        -: 3099:    if (__n > __sz)
        -: 3100:        append(__n - __sz, __c);
        -: 3101:    else
        -: 3102:        __erase_to_end(__n);
        -: 3103:}
        -: 3104:
        -: 3105:template <class _CharT, class _Traits, class _Allocator>
        -: 3106:inline void
        -: 3107:basic_string<_CharT, _Traits, _Allocator>::__resize_default_init(size_type __n)
        -: 3108:{
        -: 3109:    size_type __sz = size();
        -: 3110:    if (__n > __sz) {
        -: 3111:       __append_default_init(__n - __sz);
        -: 3112:    } else
        -: 3113:        __erase_to_end(__n);
        -: 3114:}
        -: 3115:
        -: 3116:template <class _CharT, class _Traits, class _Allocator>
        -: 3117:inline
        -: 3118:typename basic_string<_CharT, _Traits, _Allocator>::size_type
    #####: 3119:basic_string<_CharT, _Traits, _Allocator>::max_size() const _NOEXCEPT
    $$$$$: 3119-block  0
        -: 3120:{
    #####: 3121:    size_type __m = __alloc_traits::max_size(__alloc());
        -: 3122:#ifdef _LIBCPP_BIG_ENDIAN
        -: 3123:    return (__m <= ~__long_mask ? __m : __m/2) - __alignment;
        -: 3124:#else
    #####: 3125:    return __m - __alignment;
    $$$$$: 3125-block  0
        -: 3126:#endif
        -: 3127:}
        -: 3128:
        -: 3129:template <class _CharT, class _Traits, class _Allocator>
        -: 3130:void
        -: 3131:basic_string<_CharT, _Traits, _Allocator>::reserve(size_type __res_arg)
        -: 3132:{
        -: 3133:    if (__res_arg > max_size())
        -: 3134:        this->__throw_length_error();
        -: 3135:    size_type __cap = capacity();
        -: 3136:    size_type __sz = size();
        -: 3137:    __res_arg = _VSTD::max(__res_arg, __sz);
        -: 3138:    __res_arg = __recommend(__res_arg);
        -: 3139:    if (__res_arg != __cap)
        -: 3140:    {
        -: 3141:        pointer __new_data, __p;
        -: 3142:        bool __was_long, __now_long;
        -: 3143:        if (__res_arg == __min_cap - 1)
        -: 3144:        {
        -: 3145:            __was_long = true;
        -: 3146:            __now_long = false;
        -: 3147:            __new_data = __get_short_pointer();
        -: 3148:            __p = __get_long_pointer();
        -: 3149:        }
        -: 3150:        else
        -: 3151:        {
        -: 3152:            if (__res_arg > __cap)
        -: 3153:                __new_data = __alloc_traits::allocate(__alloc(), __res_arg+1);
        -: 3154:            else
        -: 3155:            {
        -: 3156:            #ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3157:                try
        -: 3158:                {
        -: 3159:            #endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3160:                    __new_data = __alloc_traits::allocate(__alloc(), __res_arg+1);
        -: 3161:            #ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3162:                }
        -: 3163:                catch (...)
        -: 3164:                {
        -: 3165:                    return;
        -: 3166:                }
        -: 3167:            #else  // _LIBCPP_NO_EXCEPTIONS
        -: 3168:                if (__new_data == nullptr)
        -: 3169:                    return;
        -: 3170:            #endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3171:            }
        -: 3172:            __now_long = true;
        -: 3173:            __was_long = __is_long();
        -: 3174:            __p = __get_pointer();
        -: 3175:        }
        -: 3176:        traits_type::copy(_VSTD::__to_raw_pointer(__new_data),
        -: 3177:                          _VSTD::__to_raw_pointer(__p), size()+1);
        -: 3178:        if (__was_long)
        -: 3179:            __alloc_traits::deallocate(__alloc(), __p, __cap+1);
        -: 3180:        if (__now_long)
        -: 3181:        {
        -: 3182:            __set_long_cap(__res_arg+1);
        -: 3183:            __set_long_size(__sz);
        -: 3184:            __set_long_pointer(__new_data);
        -: 3185:        }
        -: 3186:        else
        -: 3187:            __set_short_size(__sz);
        -: 3188:        __invalidate_all_iterators();
        -: 3189:    }
        -: 3190:}
        -: 3191:
        -: 3192:template <class _CharT, class _Traits, class _Allocator>
        -: 3193:inline
        -: 3194:typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3195:basic_string<_CharT, _Traits, _Allocator>::operator[](size_type __pos) const _NOEXCEPT
        -: 3196:{
        -: 3197:    _LIBCPP_ASSERT(__pos <= size(), "string index out of bounds");
        -: 3198:    return *(data() + __pos);
        -: 3199:}
        -: 3200:
        -: 3201:template <class _CharT, class _Traits, class _Allocator>
        -: 3202:inline
        -: 3203:typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3204:basic_string<_CharT, _Traits, _Allocator>::operator[](size_type __pos) _NOEXCEPT
        -: 3205:{
        -: 3206:    _LIBCPP_ASSERT(__pos <= size(), "string index out of bounds");
        -: 3207:    return *(__get_pointer() + __pos);
        -: 3208:}
        -: 3209:
        -: 3210:template <class _CharT, class _Traits, class _Allocator>
        -: 3211:typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3212:basic_string<_CharT, _Traits, _Allocator>::at(size_type __n) const
        -: 3213:{
        -: 3214:    if (__n >= size())
        -: 3215:        this->__throw_out_of_range();
        -: 3216:    return (*this)[__n];
        -: 3217:}
        -: 3218:
        -: 3219:template <class _CharT, class _Traits, class _Allocator>
        -: 3220:typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3221:basic_string<_CharT, _Traits, _Allocator>::at(size_type __n)
        -: 3222:{
        -: 3223:    if (__n >= size())
        -: 3224:        this->__throw_out_of_range();
        -: 3225:    return (*this)[__n];
        -: 3226:}
        -: 3227:
        -: 3228:template <class _CharT, class _Traits, class _Allocator>
        -: 3229:inline
        -: 3230:typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3231:basic_string<_CharT, _Traits, _Allocator>::front()
        -: 3232:{
        -: 3233:    _LIBCPP_ASSERT(!empty(), "string::front(): string is empty");
        -: 3234:    return *__get_pointer();
        -: 3235:}
        -: 3236:
        -: 3237:template <class _CharT, class _Traits, class _Allocator>
        -: 3238:inline
        -: 3239:typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3240:basic_string<_CharT, _Traits, _Allocator>::front() const
        -: 3241:{
        -: 3242:    _LIBCPP_ASSERT(!empty(), "string::front(): string is empty");
        -: 3243:    return *data();
        -: 3244:}
        -: 3245:
        -: 3246:template <class _CharT, class _Traits, class _Allocator>
        -: 3247:inline
        -: 3248:typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3249:basic_string<_CharT, _Traits, _Allocator>::back()
        -: 3250:{
        -: 3251:    _LIBCPP_ASSERT(!empty(), "string::back(): string is empty");
        -: 3252:    return *(__get_pointer() + size() - 1);
        -: 3253:}
        -: 3254:
        -: 3255:template <class _CharT, class _Traits, class _Allocator>
        -: 3256:inline
        -: 3257:typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3258:basic_string<_CharT, _Traits, _Allocator>::back() const
        -: 3259:{
        -: 3260:    _LIBCPP_ASSERT(!empty(), "string::back(): string is empty");
        -: 3261:    return *(data() + size() - 1);
        -: 3262:}
        -: 3263:
        -: 3264:template <class _CharT, class _Traits, class _Allocator>
        -: 3265:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3266:basic_string<_CharT, _Traits, _Allocator>::copy(value_type* __s, size_type __n, size_type __pos) const
        -: 3267:{
        -: 3268:    size_type __sz = size();
        -: 3269:    if (__pos > __sz)
        -: 3270:        this->__throw_out_of_range();
        -: 3271:    size_type __rlen = _VSTD::min(__n, __sz - __pos);
        -: 3272:    traits_type::copy(__s, data() + __pos, __rlen);
        -: 3273:    return __rlen;
        -: 3274:}
        -: 3275:
        -: 3276:template <class _CharT, class _Traits, class _Allocator>
        -: 3277:inline
        -: 3278:basic_string<_CharT, _Traits, _Allocator>
    #####: 3279:basic_string<_CharT, _Traits, _Allocator>::substr(size_type __pos, size_type __n) const
    $$$$$: 3279-block  0
        -: 3280:{
    #####: 3281:    return basic_string(*this, __pos, __n, __alloc());
    $$$$$: 3281-block  0
        -: 3282:}
        -: 3283:
        -: 3284:template <class _CharT, class _Traits, class _Allocator>
        -: 3285:inline
        -: 3286:void
        -: 3287:basic_string<_CharT, _Traits, _Allocator>::swap(basic_string& __str)
        -: 3288:#if _LIBCPP_STD_VER >= 14
        -: 3289:        _NOEXCEPT_DEBUG
        -: 3290:#else
        -: 3291:        _NOEXCEPT_DEBUG_(!__alloc_traits::propagate_on_container_swap::value ||
        -: 3292:                    __is_nothrow_swappable<allocator_type>::value)
        -: 3293:#endif
        -: 3294:{
        -: 3295:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 3296:    if (!__is_long())
        -: 3297:        __get_db()->__invalidate_all(this);
        -: 3298:    if (!__str.__is_long())
        -: 3299:        __get_db()->__invalidate_all(&__str);
        -: 3300:    __get_db()->swap(this, &__str);
        -: 3301:#endif
        -: 3302:    _LIBCPP_ASSERT(
        -: 3303:        __alloc_traits::propagate_on_container_swap::value ||
        -: 3304:        __alloc_traits::is_always_equal::value ||
        -: 3305:        __alloc() == __str.__alloc(), "swapping non-equal allocators");
        -: 3306:    _VSTD::swap(__r_.first(), __str.__r_.first());
        -: 3307:    __swap_allocator(__alloc(), __str.__alloc());
        -: 3308:}
        -: 3309:
        -: 3310:// find
        -: 3311:
        -: 3312:template <class _Traits>
        -: 3313:struct _LIBCPP_HIDDEN __traits_eq
        -: 3314:{
        -: 3315:    typedef typename _Traits::char_type char_type;
        -: 3316:    _LIBCPP_INLINE_VISIBILITY
        -: 3317:    bool operator()(const char_type& __x, const char_type& __y) _NOEXCEPT
        -: 3318:        {return _Traits::eq(__x, __y);}
        -: 3319:};
        -: 3320:
        -: 3321:template<class _CharT, class _Traits, class _Allocator>
        -: 3322:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3323:basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s,
        -: 3324:                                                size_type __pos,
        -: 3325:                                                size_type __n) const _NOEXCEPT
        -: 3326:{
        -: 3327:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find(): received nullptr");
        -: 3328:    return __str_find<value_type, size_type, traits_type, npos>
        -: 3329:        (data(), size(), __s, __pos, __n);
        -: 3330:}
        -: 3331:
        -: 3332:template<class _CharT, class _Traits, class _Allocator>
        -: 3333:inline
        -: 3334:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3335:basic_string<_CharT, _Traits, _Allocator>::find(const basic_string& __str,
        -: 3336:                                                size_type __pos) const _NOEXCEPT
        -: 3337:{
        -: 3338:    return __str_find<value_type, size_type, traits_type, npos>
        -: 3339:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3340:}
        -: 3341:
        -: 3342:template<class _CharT, class _Traits, class _Allocator>
        -: 3343:template <class _Tp>
        -: 3344:typename enable_if
        -: 3345:<
        -: 3346:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3347:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3348:>::type
        -: 3349:basic_string<_CharT, _Traits, _Allocator>::find(const _Tp &__t,
        -: 3350:                                                size_type __pos) const
        -: 3351:{
        -: 3352:    __self_view __sv = __t;
        -: 3353:    return __str_find<value_type, size_type, traits_type, npos>
        -: 3354:        (data(), size(), __sv.data(), __pos, __sv.size());
        -: 3355:}
        -: 3356:
        -: 3357:template<class _CharT, class _Traits, class _Allocator>
        -: 3358:inline
        -: 3359:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3360:basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s,
        -: 3361:                                                size_type __pos) const _NOEXCEPT
        -: 3362:{
        -: 3363:    _LIBCPP_ASSERT(__s != nullptr, "string::find(): received nullptr");
        -: 3364:    return __str_find<value_type, size_type, traits_type, npos>
        -: 3365:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3366:}
        -: 3367:
        -: 3368:template<class _CharT, class _Traits, class _Allocator>
        -: 3369:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3370:basic_string<_CharT, _Traits, _Allocator>::find(value_type __c,
        -: 3371:                                                size_type __pos) const _NOEXCEPT
        -: 3372:{
        -: 3373:    return __str_find<value_type, size_type, traits_type, npos>
        -: 3374:        (data(), size(), __c, __pos);
        -: 3375:}
        -: 3376:
        -: 3377:// rfind
        -: 3378:
        -: 3379:template<class _CharT, class _Traits, class _Allocator>
        -: 3380:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3381:basic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s,
        -: 3382:                                                 size_type __pos,
        -: 3383:                                                 size_type __n) const _NOEXCEPT
        -: 3384:{
        -: 3385:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::rfind(): received nullptr");
        -: 3386:    return __str_rfind<value_type, size_type, traits_type, npos>
        -: 3387:        (data(), size(), __s, __pos, __n);
        -: 3388:}
        -: 3389:
        -: 3390:template<class _CharT, class _Traits, class _Allocator>
        -: 3391:inline
        -: 3392:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3393:basic_string<_CharT, _Traits, _Allocator>::rfind(const basic_string& __str,
        -: 3394:                                                 size_type __pos) const _NOEXCEPT
        -: 3395:{
        -: 3396:    return __str_rfind<value_type, size_type, traits_type, npos>
        -: 3397:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3398:}
        -: 3399:
        -: 3400:template<class _CharT, class _Traits, class _Allocator>
        -: 3401:template <class _Tp>
        -: 3402:typename enable_if
        -: 3403:<
        -: 3404:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3405:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3406:>::type
        -: 3407:basic_string<_CharT, _Traits, _Allocator>::rfind(const _Tp& __t,
        -: 3408:                                                size_type __pos) const
        -: 3409:{
        -: 3410:    __self_view __sv = __t;
        -: 3411:    return __str_rfind<value_type, size_type, traits_type, npos>
        -: 3412:        (data(), size(), __sv.data(), __pos, __sv.size());
        -: 3413:}
        -: 3414:
        -: 3415:template<class _CharT, class _Traits, class _Allocator>
        -: 3416:inline
        -: 3417:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3418:basic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s,
        -: 3419:                                                 size_type __pos) const _NOEXCEPT
        -: 3420:{
        -: 3421:    _LIBCPP_ASSERT(__s != nullptr, "string::rfind(): received nullptr");
        -: 3422:    return __str_rfind<value_type, size_type, traits_type, npos>
        -: 3423:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3424:}
        -: 3425:
        -: 3426:template<class _CharT, class _Traits, class _Allocator>
        -: 3427:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3428:basic_string<_CharT, _Traits, _Allocator>::rfind(value_type __c,
        -: 3429:                                                 size_type __pos) const _NOEXCEPT
        -: 3430:{
        -: 3431:    return __str_rfind<value_type, size_type, traits_type, npos>
        -: 3432:        (data(), size(), __c, __pos);
        -: 3433:}
        -: 3434:
        -: 3435:// find_first_of
        -: 3436:
        -: 3437:template<class _CharT, class _Traits, class _Allocator>
        -: 3438:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3439:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s,
        -: 3440:                                                         size_type __pos,
        -: 3441:                                                         size_type __n) const _NOEXCEPT
        -: 3442:{
        -: 3443:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find_first_of(): received nullptr");
        -: 3444:    return __str_find_first_of<value_type, size_type, traits_type, npos>
        -: 3445:        (data(), size(), __s, __pos, __n);
        -: 3446:}
        -: 3447:
        -: 3448:template<class _CharT, class _Traits, class _Allocator>
        -: 3449:inline
        -: 3450:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3451:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const basic_string& __str,
        -: 3452:                                                         size_type __pos) const _NOEXCEPT
        -: 3453:{
        -: 3454:    return __str_find_first_of<value_type, size_type, traits_type, npos>
        -: 3455:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3456:}
        -: 3457:
        -: 3458:template<class _CharT, class _Traits, class _Allocator>
        -: 3459:template <class _Tp>
        -: 3460:typename enable_if
        -: 3461:<
        -: 3462:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3463:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3464:>::type
        -: 3465:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const _Tp& __t,
        -: 3466:                                                size_type __pos) const
        -: 3467:{
        -: 3468:    __self_view __sv = __t;
        -: 3469:    return __str_find_first_of<value_type, size_type, traits_type, npos>
        -: 3470:        (data(), size(), __sv.data(), __pos, __sv.size());
        -: 3471:}
        -: 3472:
        -: 3473:template<class _CharT, class _Traits, class _Allocator>
        -: 3474:inline
        -: 3475:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3476:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s,
        -: 3477:                                                         size_type __pos) const _NOEXCEPT
        -: 3478:{
        -: 3479:    _LIBCPP_ASSERT(__s != nullptr, "string::find_first_of(): received nullptr");
        -: 3480:    return __str_find_first_of<value_type, size_type, traits_type, npos>
        -: 3481:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3482:}
        -: 3483:
        -: 3484:template<class _CharT, class _Traits, class _Allocator>
        -: 3485:inline
        -: 3486:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3487:basic_string<_CharT, _Traits, _Allocator>::find_first_of(value_type __c,
        -: 3488:                                                         size_type __pos) const _NOEXCEPT
        -: 3489:{
        -: 3490:    return find(__c, __pos);
        -: 3491:}
        -: 3492:
        -: 3493:// find_last_of
        -: 3494:
        -: 3495:template<class _CharT, class _Traits, class _Allocator>
        -: 3496:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3497:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s,
        -: 3498:                                                        size_type __pos,
        -: 3499:                                                        size_type __n) const _NOEXCEPT
        -: 3500:{
        -: 3501:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find_last_of(): received nullptr");
        -: 3502:    return __str_find_last_of<value_type, size_type, traits_type, npos>
        -: 3503:        (data(), size(), __s, __pos, __n);
        -: 3504:}
        -: 3505:
        -: 3506:template<class _CharT, class _Traits, class _Allocator>
        -: 3507:inline
        -: 3508:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3509:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const basic_string& __str,
        -: 3510:                                                        size_type __pos) const _NOEXCEPT
        -: 3511:{
        -: 3512:    return __str_find_last_of<value_type, size_type, traits_type, npos>
        -: 3513:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3514:}
        -: 3515:
        -: 3516:template<class _CharT, class _Traits, class _Allocator>
        -: 3517:template <class _Tp>
        -: 3518:typename enable_if
        -: 3519:<
        -: 3520:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3521:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3522:>::type
        -: 3523:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const _Tp& __t,
        -: 3524:                                                size_type __pos) const
        -: 3525:{
        -: 3526:    __self_view __sv = __t;
        -: 3527:    return __str_find_last_of<value_type, size_type, traits_type, npos>
        -: 3528:        (data(), size(), __sv.data(), __pos, __sv.size());
        -: 3529:}
        -: 3530:
        -: 3531:template<class _CharT, class _Traits, class _Allocator>
        -: 3532:inline
        -: 3533:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3534:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s,
        -: 3535:                                                        size_type __pos) const _NOEXCEPT
        -: 3536:{
        -: 3537:    _LIBCPP_ASSERT(__s != nullptr, "string::find_last_of(): received nullptr");
        -: 3538:    return __str_find_last_of<value_type, size_type, traits_type, npos>
        -: 3539:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3540:}
        -: 3541:
        -: 3542:template<class _CharT, class _Traits, class _Allocator>
        -: 3543:inline
        -: 3544:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3545:basic_string<_CharT, _Traits, _Allocator>::find_last_of(value_type __c,
        -: 3546:                                                        size_type __pos) const _NOEXCEPT
        -: 3547:{
        -: 3548:    return rfind(__c, __pos);
        -: 3549:}
        -: 3550:
        -: 3551:// find_first_not_of
        -: 3552:
        -: 3553:template<class _CharT, class _Traits, class _Allocator>
        -: 3554:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3555:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s,
        -: 3556:                                                             size_type __pos,
        -: 3557:                                                             size_type __n) const _NOEXCEPT
        -: 3558:{
        -: 3559:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find_first_not_of(): received nullptr");
        -: 3560:    return __str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3561:        (data(), size(), __s, __pos, __n);
        -: 3562:}
        -: 3563:
        -: 3564:template<class _CharT, class _Traits, class _Allocator>
        -: 3565:inline
        -: 3566:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3567:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const basic_string& __str,
        -: 3568:                                                             size_type __pos) const _NOEXCEPT
        -: 3569:{
        -: 3570:    return __str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3571:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3572:}
        -: 3573:
        -: 3574:template<class _CharT, class _Traits, class _Allocator>
        -: 3575:template <class _Tp>
        -: 3576:typename enable_if
        -: 3577:<
        -: 3578:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3579:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3580:>::type
        -: 3581:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const _Tp& __t,
        -: 3582:                                                size_type __pos) const
        -: 3583:{
        -: 3584:    __self_view __sv = __t;
        -: 3585:    return __str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3586:        (data(), size(), __sv.data(), __pos, __sv.size());
        -: 3587:}
        -: 3588:
        -: 3589:template<class _CharT, class _Traits, class _Allocator>
        -: 3590:inline
        -: 3591:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3592:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s,
        -: 3593:                                                             size_type __pos) const _NOEXCEPT
        -: 3594:{
        -: 3595:    _LIBCPP_ASSERT(__s != nullptr, "string::find_first_not_of(): received nullptr");
        -: 3596:    return __str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3597:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3598:}
        -: 3599:
        -: 3600:template<class _CharT, class _Traits, class _Allocator>
        -: 3601:inline
        -: 3602:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3603:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(value_type __c,
        -: 3604:                                                             size_type __pos) const _NOEXCEPT
        -: 3605:{
        -: 3606:    return __str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3607:        (data(), size(), __c, __pos);
        -: 3608:}
        -: 3609:
        -: 3610:// find_last_not_of
        -: 3611:
        -: 3612:template<class _CharT, class _Traits, class _Allocator>
        -: 3613:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3614:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s,
        -: 3615:                                                            size_type __pos,
        -: 3616:                                                            size_type __n) const _NOEXCEPT
        -: 3617:{
        -: 3618:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find_last_not_of(): received nullptr");
        -: 3619:    return __str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3620:        (data(), size(), __s, __pos, __n);
        -: 3621:}
        -: 3622:
        -: 3623:template<class _CharT, class _Traits, class _Allocator>
        -: 3624:inline
        -: 3625:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3626:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const basic_string& __str,
        -: 3627:                                                            size_type __pos) const _NOEXCEPT
        -: 3628:{
        -: 3629:    return __str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3630:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3631:}
        -: 3632:
        -: 3633:template<class _CharT, class _Traits, class _Allocator>
        -: 3634:template <class _Tp>
        -: 3635:typename enable_if
        -: 3636:<
        -: 3637:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3638:    typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3639:>::type
        -: 3640:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const _Tp& __t,
        -: 3641:                                                size_type __pos) const
        -: 3642:{
        -: 3643:    __self_view __sv = __t;
        -: 3644:    return __str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3645:        (data(), size(), __sv.data(), __pos, __sv.size());
        -: 3646:}
        -: 3647:
        -: 3648:template<class _CharT, class _Traits, class _Allocator>
        -: 3649:inline
        -: 3650:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3651:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s,
        -: 3652:                                                            size_type __pos) const _NOEXCEPT
        -: 3653:{
        -: 3654:    _LIBCPP_ASSERT(__s != nullptr, "string::find_last_not_of(): received nullptr");
        -: 3655:    return __str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3656:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3657:}
        -: 3658:
        -: 3659:template<class _CharT, class _Traits, class _Allocator>
        -: 3660:inline
        -: 3661:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3662:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(value_type __c,
        -: 3663:                                                            size_type __pos) const _NOEXCEPT
        -: 3664:{
        -: 3665:    return __str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3666:        (data(), size(), __c, __pos);
        -: 3667:}
        -: 3668:
        -: 3669:// compare
        -: 3670:
        -: 3671:template <class _CharT, class _Traits, class _Allocator>
        -: 3672:template <class _Tp>
        -: 3673:typename enable_if
        -: 3674:<
        -: 3675:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3676:    int
        -: 3677:>::type
        -: 3678:basic_string<_CharT, _Traits, _Allocator>::compare(const _Tp& __t) const
        -: 3679:{
        -: 3680:    __self_view __sv = __t;
        -: 3681:    size_t __lhs_sz = size();
        -: 3682:    size_t __rhs_sz = __sv.size();
        -: 3683:    int __result = traits_type::compare(data(), __sv.data(),
        -: 3684:                                        _VSTD::min(__lhs_sz, __rhs_sz));
        -: 3685:    if (__result != 0)
        -: 3686:        return __result;
        -: 3687:    if (__lhs_sz < __rhs_sz)
        -: 3688:        return -1;
        -: 3689:    if (__lhs_sz > __rhs_sz)
        -: 3690:        return 1;
        -: 3691:    return 0;
        -: 3692:}
        -: 3693:
        -: 3694:template <class _CharT, class _Traits, class _Allocator>
        -: 3695:inline
        -: 3696:int
        -: 3697:basic_string<_CharT, _Traits, _Allocator>::compare(const basic_string& __str) const _NOEXCEPT
        -: 3698:{
        -: 3699:    return compare(__self_view(__str));
        -: 3700:}
        -: 3701:
        -: 3702:template <class _CharT, class _Traits, class _Allocator>
        -: 3703:int
        -: 3704:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3705:                                                   size_type __n1,
        -: 3706:                                                   const value_type* __s,
        -: 3707:                                                   size_type __n2) const
        -: 3708:{
        -: 3709:    _LIBCPP_ASSERT(__n2 == 0 || __s != nullptr, "string::compare(): received nullptr");
        -: 3710:    size_type __sz = size();
        -: 3711:    if (__pos1 > __sz || __n2 == npos)
        -: 3712:        this->__throw_out_of_range();
        -: 3713:    size_type __rlen = _VSTD::min(__n1, __sz - __pos1);
        -: 3714:    int __r = traits_type::compare(data() + __pos1, __s, _VSTD::min(__rlen, __n2));
        -: 3715:    if (__r == 0)
        -: 3716:    {
        -: 3717:        if (__rlen < __n2)
        -: 3718:            __r = -1;
        -: 3719:        else if (__rlen > __n2)
        -: 3720:            __r = 1;
        -: 3721:    }
        -: 3722:    return __r;
        -: 3723:}
        -: 3724:
        -: 3725:template <class _CharT, class _Traits, class _Allocator>
        -: 3726:template <class _Tp>
        -: 3727:typename enable_if
        -: 3728:<
        -: 3729:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3730:    int
        -: 3731:>::type
        -: 3732:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3733:                                                   size_type __n1,
        -: 3734:                                                   const _Tp& __t) const
        -: 3735:{
        -: 3736:    __self_view __sv = __t;
        -: 3737:    return compare(__pos1, __n1, __sv.data(), __sv.size());
        -: 3738:}
        -: 3739:
        -: 3740:template <class _CharT, class _Traits, class _Allocator>
        -: 3741:inline
        -: 3742:int
        -: 3743:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3744:                                                   size_type __n1,
        -: 3745:                                                   const basic_string& __str) const
        -: 3746:{
        -: 3747:    return compare(__pos1, __n1, __str.data(), __str.size());
        -: 3748:}
        -: 3749:
        -: 3750:template <class _CharT, class _Traits, class _Allocator>
        -: 3751:template <class _Tp>
        -: 3752:typename enable_if
        -: 3753:<
        -: 3754:    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,
        -: 3755:    int
        -: 3756:>::type
        -: 3757:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3758:                                                   size_type __n1,
        -: 3759:                                                   const _Tp& __t,
        -: 3760:                                                   size_type __pos2,
        -: 3761:                                                   size_type __n2) const
        -: 3762:{
        -: 3763:    __self_view __sv = __t;
        -: 3764:    return __self_view(*this).substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
        -: 3765:}
        -: 3766:
        -: 3767:template <class _CharT, class _Traits, class _Allocator>
        -: 3768:int
        -: 3769:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3770:                                                   size_type __n1,
        -: 3771:                                                   const basic_string& __str,
        -: 3772:                                                   size_type __pos2,
        -: 3773:                                                   size_type __n2) const
        -: 3774:{
        -: 3775:        return compare(__pos1, __n1, __self_view(__str), __pos2, __n2);
        -: 3776:}
        -: 3777:
        -: 3778:template <class _CharT, class _Traits, class _Allocator>
        -: 3779:int
        -: 3780:basic_string<_CharT, _Traits, _Allocator>::compare(const value_type* __s) const _NOEXCEPT
        -: 3781:{
        -: 3782:    _LIBCPP_ASSERT(__s != nullptr, "string::compare(): received nullptr");
        -: 3783:    return compare(0, npos, __s, traits_type::length(__s));
        -: 3784:}
        -: 3785:
        -: 3786:template <class _CharT, class _Traits, class _Allocator>
        -: 3787:int
        -: 3788:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3789:                                                   size_type __n1,
        -: 3790:                                                   const value_type* __s) const
        -: 3791:{
        -: 3792:    _LIBCPP_ASSERT(__s != nullptr, "string::compare(): received nullptr");
        -: 3793:    return compare(__pos1, __n1, __s, traits_type::length(__s));
        -: 3794:}
        -: 3795:
        -: 3796:// __invariants
        -: 3797:
        -: 3798:template<class _CharT, class _Traits, class _Allocator>
        -: 3799:inline
        -: 3800:bool
        -: 3801:basic_string<_CharT, _Traits, _Allocator>::__invariants() const
        -: 3802:{
        -: 3803:    if (size() > capacity())
        -: 3804:        return false;
        -: 3805:    if (capacity() < __min_cap - 1)
        -: 3806:        return false;
        -: 3807:    if (data() == 0)
        -: 3808:        return false;
        -: 3809:    if (data()[size()] != value_type(0))
        -: 3810:        return false;
        -: 3811:    return true;
        -: 3812:}
        -: 3813:
        -: 3814:// __clear_and_shrink
        -: 3815:
        -: 3816:template<class _CharT, class _Traits, class _Allocator>
        -: 3817:inline
        -: 3818:void 
    #####: 3819:basic_string<_CharT, _Traits, _Allocator>::__clear_and_shrink() _NOEXCEPT
    $$$$$: 3819-block  0
        -: 3820:{
    #####: 3821:    clear();
    #####: 3822:    if(__is_long())
    $$$$$: 3822-block  0
        -: 3823:    {
    #####: 3824:        __alloc_traits::deallocate(__alloc(), __get_long_pointer(), capacity() + 1);
    #####: 3825:        __set_long_cap(0);
    #####: 3826:        __set_short_size(0);
    #####: 3827:    }
    $$$$$: 3827-block  0
    #####: 3828:} 
    $$$$$: 3828-block  0
        -: 3829:
        -: 3830:// operator==
        -: 3831:
        -: 3832:template<class _CharT, class _Traits, class _Allocator>
        -: 3833:inline _LIBCPP_INLINE_VISIBILITY
        -: 3834:bool
        -: 3835:operator==(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3836:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3837:{
        -: 3838:    size_t __lhs_sz = __lhs.size();
        -: 3839:    return __lhs_sz == __rhs.size() && _Traits::compare(__lhs.data(),
        -: 3840:                                                        __rhs.data(),
        -: 3841:                                                        __lhs_sz) == 0;
        -: 3842:}
        -: 3843:
        -: 3844:template<class _Allocator>
        -: 3845:inline _LIBCPP_INLINE_VISIBILITY
        -: 3846:bool
        -: 3847:operator==(const basic_string<char, char_traits<char>, _Allocator>& __lhs,
        -: 3848:           const basic_string<char, char_traits<char>, _Allocator>& __rhs) _NOEXCEPT
        -: 3849:{
        -: 3850:    size_t __lhs_sz = __lhs.size();
        -: 3851:    if (__lhs_sz != __rhs.size())
        -: 3852:        return false;
        -: 3853:    const char* __lp = __lhs.data();
        -: 3854:    const char* __rp = __rhs.data();
        -: 3855:    if (__lhs.__is_long())
        -: 3856:        return char_traits<char>::compare(__lp, __rp, __lhs_sz) == 0;
        -: 3857:    for (; __lhs_sz != 0; --__lhs_sz, ++__lp, ++__rp)
        -: 3858:        if (*__lp != *__rp)
        -: 3859:            return false;
        -: 3860:    return true;
        -: 3861:}
        -: 3862:
        -: 3863:template<class _CharT, class _Traits, class _Allocator>
        -: 3864:inline _LIBCPP_INLINE_VISIBILITY
        -: 3865:bool
        -: 3866:operator==(const _CharT* __lhs,
        -: 3867:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3868:{
        -: 3869:    typedef basic_string<_CharT, _Traits, _Allocator> _String;
        -: 3870:    _LIBCPP_ASSERT(__lhs != nullptr, "operator==(char*, basic_string): received nullptr");
        -: 3871:    size_t __lhs_len = _Traits::length(__lhs);
        -: 3872:    if (__lhs_len != __rhs.size()) return false;
        -: 3873:    return __rhs.compare(0, _String::npos, __lhs, __lhs_len) == 0;
        -: 3874:}
        -: 3875:
        -: 3876:template<class _CharT, class _Traits, class _Allocator>
        -: 3877:inline _LIBCPP_INLINE_VISIBILITY
        -: 3878:bool
    #####: 3879:operator==(const basic_string<_CharT,_Traits,_Allocator>& __lhs,
    $$$$$: 3879-block  0
        -: 3880:           const _CharT* __rhs) _NOEXCEPT
        -: 3881:{
        -: 3882:    typedef basic_string<_CharT, _Traits, _Allocator> _String;
        -: 3883:    _LIBCPP_ASSERT(__rhs != nullptr, "operator==(basic_string, char*): received nullptr");
    #####: 3884:    size_t __rhs_len = _Traits::length(__rhs);
    #####: 3885:    if (__rhs_len != __lhs.size()) return false;
    $$$$$: 3885-block  0
    $$$$$: 3885-block  1
    #####: 3886:    return __lhs.compare(0, _String::npos, __rhs, __rhs_len) == 0;
    $$$$$: 3886-block  0
    $$$$$: 3886-block  1
    $$$$$: 3886-block  2
    #####: 3887:}
    $$$$$: 3887-block  0
        -: 3888:
        -: 3889:template<class _CharT, class _Traits, class _Allocator>
        -: 3890:inline _LIBCPP_INLINE_VISIBILITY
        -: 3891:bool
        -: 3892:operator!=(const basic_string<_CharT,_Traits,_Allocator>& __lhs,
        -: 3893:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3894:{
        -: 3895:    return !(__lhs == __rhs);
        -: 3896:}
        -: 3897:
        -: 3898:template<class _CharT, class _Traits, class _Allocator>
        -: 3899:inline _LIBCPP_INLINE_VISIBILITY
        -: 3900:bool
        -: 3901:operator!=(const _CharT* __lhs,
        -: 3902:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3903:{
        -: 3904:    return !(__lhs == __rhs);
        -: 3905:}
        -: 3906:
        -: 3907:template<class _CharT, class _Traits, class _Allocator>
        -: 3908:inline _LIBCPP_INLINE_VISIBILITY
        -: 3909:bool
        -: 3910:operator!=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3911:           const _CharT* __rhs) _NOEXCEPT
        -: 3912:{
        -: 3913:    return !(__lhs == __rhs);
        -: 3914:}
        -: 3915:
        -: 3916:// operator<
        -: 3917:
        -: 3918:template<class _CharT, class _Traits, class _Allocator>
        -: 3919:inline _LIBCPP_INLINE_VISIBILITY
        -: 3920:bool
        -: 3921:operator< (const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3922:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3923:{
        -: 3924:    return __lhs.compare(__rhs) < 0;
        -: 3925:}
        -: 3926:
        -: 3927:template<class _CharT, class _Traits, class _Allocator>
        -: 3928:inline _LIBCPP_INLINE_VISIBILITY
        -: 3929:bool
        -: 3930:operator< (const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3931:           const _CharT* __rhs) _NOEXCEPT
        -: 3932:{
        -: 3933:    return __lhs.compare(__rhs) < 0;
        -: 3934:}
        -: 3935:
        -: 3936:template<class _CharT, class _Traits, class _Allocator>
        -: 3937:inline _LIBCPP_INLINE_VISIBILITY
        -: 3938:bool
        -: 3939:operator< (const _CharT* __lhs,
        -: 3940:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3941:{
        -: 3942:    return __rhs.compare(__lhs) > 0;
        -: 3943:}
        -: 3944:
        -: 3945:// operator>
        -: 3946:
        -: 3947:template<class _CharT, class _Traits, class _Allocator>
        -: 3948:inline _LIBCPP_INLINE_VISIBILITY
        -: 3949:bool
        -: 3950:operator> (const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3951:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3952:{
        -: 3953:    return __rhs < __lhs;
        -: 3954:}
        -: 3955:
        -: 3956:template<class _CharT, class _Traits, class _Allocator>
        -: 3957:inline _LIBCPP_INLINE_VISIBILITY
        -: 3958:bool
        -: 3959:operator> (const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3960:           const _CharT* __rhs) _NOEXCEPT
        -: 3961:{
        -: 3962:    return __rhs < __lhs;
        -: 3963:}
        -: 3964:
        -: 3965:template<class _CharT, class _Traits, class _Allocator>
        -: 3966:inline _LIBCPP_INLINE_VISIBILITY
        -: 3967:bool
        -: 3968:operator> (const _CharT* __lhs,
        -: 3969:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3970:{
        -: 3971:    return __rhs < __lhs;
        -: 3972:}
        -: 3973:
        -: 3974:// operator<=
        -: 3975:
        -: 3976:template<class _CharT, class _Traits, class _Allocator>
        -: 3977:inline _LIBCPP_INLINE_VISIBILITY
        -: 3978:bool
        -: 3979:operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3980:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3981:{
        -: 3982:    return !(__rhs < __lhs);
        -: 3983:}
        -: 3984:
        -: 3985:template<class _CharT, class _Traits, class _Allocator>
        -: 3986:inline _LIBCPP_INLINE_VISIBILITY
        -: 3987:bool
        -: 3988:operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3989:           const _CharT* __rhs) _NOEXCEPT
        -: 3990:{
        -: 3991:    return !(__rhs < __lhs);
        -: 3992:}
        -: 3993:
        -: 3994:template<class _CharT, class _Traits, class _Allocator>
        -: 3995:inline _LIBCPP_INLINE_VISIBILITY
        -: 3996:bool
        -: 3997:operator<=(const _CharT* __lhs,
        -: 3998:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3999:{
        -: 4000:    return !(__rhs < __lhs);
        -: 4001:}
        -: 4002:
        -: 4003:// operator>=
        -: 4004:
        -: 4005:template<class _CharT, class _Traits, class _Allocator>
        -: 4006:inline _LIBCPP_INLINE_VISIBILITY
        -: 4007:bool
        -: 4008:operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4009:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4010:{
        -: 4011:    return !(__lhs < __rhs);
        -: 4012:}
        -: 4013:
        -: 4014:template<class _CharT, class _Traits, class _Allocator>
        -: 4015:inline _LIBCPP_INLINE_VISIBILITY
        -: 4016:bool
        -: 4017:operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4018:           const _CharT* __rhs) _NOEXCEPT
        -: 4019:{
        -: 4020:    return !(__lhs < __rhs);
        -: 4021:}
        -: 4022:
        -: 4023:template<class _CharT, class _Traits, class _Allocator>
        -: 4024:inline _LIBCPP_INLINE_VISIBILITY
        -: 4025:bool
        -: 4026:operator>=(const _CharT* __lhs,
        -: 4027:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 4028:{
        -: 4029:    return !(__lhs < __rhs);
        -: 4030:}
        -: 4031:
        -: 4032:// operator +
        -: 4033:
        -: 4034:template<class _CharT, class _Traits, class _Allocator>
        -: 4035:basic_string<_CharT, _Traits, _Allocator>
        -: 4036:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4037:          const basic_string<_CharT, _Traits, _Allocator>& __rhs)
        -: 4038:{
        -: 4039:    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());
        -: 4040:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();
        -: 4041:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();
        -: 4042:    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + __rhs_sz);
        -: 4043:    __r.append(__rhs.data(), __rhs_sz);
        -: 4044:    return __r;
        -: 4045:}
        -: 4046:
        -: 4047:template<class _CharT, class _Traits, class _Allocator>
        -: 4048:basic_string<_CharT, _Traits, _Allocator>
        -: 4049:operator+(const _CharT* __lhs , const basic_string<_CharT,_Traits,_Allocator>& __rhs)
        -: 4050:{
        -: 4051:    basic_string<_CharT, _Traits, _Allocator> __r(__rhs.get_allocator());
        -: 4052:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = _Traits::length(__lhs);
        -: 4053:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();
        -: 4054:    __r.__init(__lhs, __lhs_sz, __lhs_sz + __rhs_sz);
        -: 4055:    __r.append(__rhs.data(), __rhs_sz);
        -: 4056:    return __r;
        -: 4057:}
        -: 4058:
        -: 4059:template<class _CharT, class _Traits, class _Allocator>
        -: 4060:basic_string<_CharT, _Traits, _Allocator>
    #####: 4061:operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Allocator>& __rhs)
    $$$$$: 4061-block  0
        -: 4062:{
    #####: 4063:    basic_string<_CharT, _Traits, _Allocator> __r(__rhs.get_allocator());
    #####: 4064:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();
    #####: 4065:    __r.__init(&__lhs, 1, 1 + __rhs_sz);
    $$$$$: 4065-block  0
    #####: 4066:    __r.append(__rhs.data(), __rhs_sz);
    $$$$$: 4066-block  0
    #####: 4067:    return __r;
    #####: 4068:}
    $$$$$: 4068-block  0
    $$$$$: 4068-block  1
    $$$$$: 4068-block  2
    $$$$$: 4068-block  3
    $$$$$: 4068-block  4
        -: 4069:
        -: 4070:template<class _CharT, class _Traits, class _Allocator>
        -: 4071:inline
        -: 4072:basic_string<_CharT, _Traits, _Allocator>
        -: 4073:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs)
        -: 4074:{
        -: 4075:    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());
        -: 4076:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();
        -: 4077:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = _Traits::length(__rhs);
        -: 4078:    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + __rhs_sz);
        -: 4079:    __r.append(__rhs, __rhs_sz);
        -: 4080:    return __r;
        -: 4081:}
        -: 4082:
        -: 4083:template<class _CharT, class _Traits, class _Allocator>
        -: 4084:basic_string<_CharT, _Traits, _Allocator>
        -: 4085:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, _CharT __rhs)
        -: 4086:{
        -: 4087:    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());
        -: 4088:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();
        -: 4089:    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + 1);
        -: 4090:    __r.push_back(__rhs);
        -: 4091:    return __r;
        -: 4092:}
        -: 4093:
        -: 4094:#ifndef _LIBCPP_CXX03_LANG
        -: 4095:
        -: 4096:template<class _CharT, class _Traits, class _Allocator>
        -: 4097:inline _LIBCPP_INLINE_VISIBILITY
        -: 4098:basic_string<_CharT, _Traits, _Allocator>
        -: 4099:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs)
        -: 4100:{
        -: 4101:    return _VSTD::move(__lhs.append(__rhs));
        -: 4102:}
        -: 4103:
        -: 4104:template<class _CharT, class _Traits, class _Allocator>
        -: 4105:inline _LIBCPP_INLINE_VISIBILITY
        -: 4106:basic_string<_CharT, _Traits, _Allocator>
        -: 4107:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs)
        -: 4108:{
        -: 4109:    return _VSTD::move(__rhs.insert(0, __lhs));
        -: 4110:}
        -: 4111:
        -: 4112:template<class _CharT, class _Traits, class _Allocator>
        -: 4113:inline _LIBCPP_INLINE_VISIBILITY
        -: 4114:basic_string<_CharT, _Traits, _Allocator>
        -: 4115:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs)
        -: 4116:{
        -: 4117:    return _VSTD::move(__lhs.append(__rhs));
        -: 4118:}
        -: 4119:
        -: 4120:template<class _CharT, class _Traits, class _Allocator>
        -: 4121:inline _LIBCPP_INLINE_VISIBILITY
        -: 4122:basic_string<_CharT, _Traits, _Allocator>
        -: 4123:operator+(const _CharT* __lhs , basic_string<_CharT,_Traits,_Allocator>&& __rhs)
        -: 4124:{
        -: 4125:    return _VSTD::move(__rhs.insert(0, __lhs));
        -: 4126:}
        -: 4127:
        -: 4128:template<class _CharT, class _Traits, class _Allocator>
        -: 4129:inline _LIBCPP_INLINE_VISIBILITY
        -: 4130:basic_string<_CharT, _Traits, _Allocator>
        -: 4131:operator+(_CharT __lhs, basic_string<_CharT,_Traits,_Allocator>&& __rhs)
        -: 4132:{
        -: 4133:    __rhs.insert(__rhs.begin(), __lhs);
        -: 4134:    return _VSTD::move(__rhs);
        -: 4135:}
        -: 4136:
        -: 4137:template<class _CharT, class _Traits, class _Allocator>
        -: 4138:inline _LIBCPP_INLINE_VISIBILITY
        -: 4139:basic_string<_CharT, _Traits, _Allocator>
        -: 4140:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const _CharT* __rhs)
        -: 4141:{
        -: 4142:    return _VSTD::move(__lhs.append(__rhs));
        -: 4143:}
        -: 4144:
        -: 4145:template<class _CharT, class _Traits, class _Allocator>
        -: 4146:inline _LIBCPP_INLINE_VISIBILITY
        -: 4147:basic_string<_CharT, _Traits, _Allocator>
        -: 4148:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, _CharT __rhs)
        -: 4149:{
        -: 4150:    __lhs.push_back(__rhs);
        -: 4151:    return _VSTD::move(__lhs);
        -: 4152:}
        -: 4153:
        -: 4154:#endif  // _LIBCPP_CXX03_LANG
        -: 4155:
        -: 4156:// swap
        -: 4157:
        -: 4158:template<class _CharT, class _Traits, class _Allocator>
        -: 4159:inline _LIBCPP_INLINE_VISIBILITY
        -: 4160:void
        -: 4161:swap(basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4162:     basic_string<_CharT, _Traits, _Allocator>& __rhs)
        -: 4163:     _NOEXCEPT_(_NOEXCEPT_(__lhs.swap(__rhs)))
        -: 4164:{
        -: 4165:    __lhs.swap(__rhs);
        -: 4166:}
        -: 4167:
        -: 4168:#ifndef _LIBCPP_NO_HAS_CHAR8_T
        -: 4169:typedef basic_string<char8_t> u8string;
        -: 4170:#endif
        -: 4171:
        -: 4172:#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS
        -: 4173:typedef basic_string<char16_t> u16string;
        -: 4174:typedef basic_string<char32_t> u32string;
        -: 4175:#endif  // _LIBCPP_HAS_NO_UNICODE_CHARS
        -: 4176:
        -: 4177:_LIBCPP_FUNC_VIS int                stoi  (const string& __str, size_t* __idx = 0, int __base = 10);
        -: 4178:_LIBCPP_FUNC_VIS long               stol  (const string& __str, size_t* __idx = 0, int __base = 10);
        -: 4179:_LIBCPP_FUNC_VIS unsigned long      stoul (const string& __str, size_t* __idx = 0, int __base = 10);
        -: 4180:_LIBCPP_FUNC_VIS long long          stoll (const string& __str, size_t* __idx = 0, int __base = 10);
        -: 4181:_LIBCPP_FUNC_VIS unsigned long long stoull(const string& __str, size_t* __idx = 0, int __base = 10);
        -: 4182:
        -: 4183:_LIBCPP_FUNC_VIS float       stof (const string& __str, size_t* __idx = 0);
        -: 4184:_LIBCPP_FUNC_VIS double      stod (const string& __str, size_t* __idx = 0);
        -: 4185:_LIBCPP_FUNC_VIS long double stold(const string& __str, size_t* __idx = 0);
        -: 4186:
        -: 4187:_LIBCPP_FUNC_VIS string to_string(int __val);
        -: 4188:_LIBCPP_FUNC_VIS string to_string(unsigned __val);
        -: 4189:_LIBCPP_FUNC_VIS string to_string(long __val);
        -: 4190:_LIBCPP_FUNC_VIS string to_string(unsigned long __val);
        -: 4191:_LIBCPP_FUNC_VIS string to_string(long long __val);
        -: 4192:_LIBCPP_FUNC_VIS string to_string(unsigned long long __val);
        -: 4193:_LIBCPP_FUNC_VIS string to_string(float __val);
        -: 4194:_LIBCPP_FUNC_VIS string to_string(double __val);
        -: 4195:_LIBCPP_FUNC_VIS string to_string(long double __val);
        -: 4196:
        -: 4197:_LIBCPP_FUNC_VIS int                stoi  (const wstring& __str, size_t* __idx = 0, int __base = 10);
        -: 4198:_LIBCPP_FUNC_VIS long               stol  (const wstring& __str, size_t* __idx = 0, int __base = 10);
        -: 4199:_LIBCPP_FUNC_VIS unsigned long      stoul (const wstring& __str, size_t* __idx = 0, int __base = 10);
        -: 4200:_LIBCPP_FUNC_VIS long long          stoll (const wstring& __str, size_t* __idx = 0, int __base = 10);
        -: 4201:_LIBCPP_FUNC_VIS unsigned long long stoull(const wstring& __str, size_t* __idx = 0, int __base = 10);
        -: 4202:
        -: 4203:_LIBCPP_FUNC_VIS float       stof (const wstring& __str, size_t* __idx = 0);
        -: 4204:_LIBCPP_FUNC_VIS double      stod (const wstring& __str, size_t* __idx = 0);
        -: 4205:_LIBCPP_FUNC_VIS long double stold(const wstring& __str, size_t* __idx = 0);
        -: 4206:
        -: 4207:_LIBCPP_FUNC_VIS wstring to_wstring(int __val);
        -: 4208:_LIBCPP_FUNC_VIS wstring to_wstring(unsigned __val);
        -: 4209:_LIBCPP_FUNC_VIS wstring to_wstring(long __val);
        -: 4210:_LIBCPP_FUNC_VIS wstring to_wstring(unsigned long __val);
        -: 4211:_LIBCPP_FUNC_VIS wstring to_wstring(long long __val);
        -: 4212:_LIBCPP_FUNC_VIS wstring to_wstring(unsigned long long __val);
        -: 4213:_LIBCPP_FUNC_VIS wstring to_wstring(float __val);
        -: 4214:_LIBCPP_FUNC_VIS wstring to_wstring(double __val);
        -: 4215:_LIBCPP_FUNC_VIS wstring to_wstring(long double __val);
        -: 4216:
        -: 4217:template<class _CharT, class _Traits, class _Allocator>
        -: 4218:    const typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 4219:                   basic_string<_CharT, _Traits, _Allocator>::npos;
        -: 4220:
        -: 4221:template<class _CharT, class _Traits, class _Allocator>
        -: 4222:struct _LIBCPP_TEMPLATE_VIS hash<basic_string<_CharT, _Traits, _Allocator> >
        -: 4223:    : public unary_function<basic_string<_CharT, _Traits, _Allocator>, size_t>
        -: 4224:{
        -: 4225:    size_t
        -: 4226:        operator()(const basic_string<_CharT, _Traits, _Allocator>& __val) const _NOEXCEPT;
        -: 4227:};
        -: 4228:
        -: 4229:template<class _CharT, class _Traits, class _Allocator>
        -: 4230:size_t
        -: 4231:hash<basic_string<_CharT, _Traits, _Allocator> >::operator()(
        -: 4232:        const basic_string<_CharT, _Traits, _Allocator>& __val) const _NOEXCEPT
        -: 4233:{
        -: 4234:    return __do_string_hash(__val.data(), __val.data() + __val.size());
        -: 4235:}
        -: 4236:
        -: 4237:template<class _CharT, class _Traits, class _Allocator>
        -: 4238:basic_ostream<_CharT, _Traits>&
        -: 4239:operator<<(basic_ostream<_CharT, _Traits>& __os,
        -: 4240:           const basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4241:
        -: 4242:template<class _CharT, class _Traits, class _Allocator>
        -: 4243:basic_istream<_CharT, _Traits>&
        -: 4244:operator>>(basic_istream<_CharT, _Traits>& __is,
        -: 4245:           basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4246:
        -: 4247:template<class _CharT, class _Traits, class _Allocator>
        -: 4248:basic_istream<_CharT, _Traits>&
        -: 4249:getline(basic_istream<_CharT, _Traits>& __is,
        -: 4250:        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);
        -: 4251:
        -: 4252:template<class _CharT, class _Traits, class _Allocator>
        -: 4253:inline _LIBCPP_INLINE_VISIBILITY
        -: 4254:basic_istream<_CharT, _Traits>&
        -: 4255:getline(basic_istream<_CharT, _Traits>& __is,
        -: 4256:        basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4257:
        -: 4258:#ifndef _LIBCPP_CXX03_LANG
        -: 4259:
        -: 4260:template<class _CharT, class _Traits, class _Allocator>
        -: 4261:inline _LIBCPP_INLINE_VISIBILITY
        -: 4262:basic_istream<_CharT, _Traits>&
        -: 4263:getline(basic_istream<_CharT, _Traits>&& __is,
        -: 4264:        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);
        -: 4265:
        -: 4266:template<class _CharT, class _Traits, class _Allocator>
        -: 4267:inline _LIBCPP_INLINE_VISIBILITY
        -: 4268:basic_istream<_CharT, _Traits>&
        -: 4269:getline(basic_istream<_CharT, _Traits>&& __is,
        -: 4270:        basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4271:
        -: 4272:#endif  // _LIBCPP_CXX03_LANG
        -: 4273:
        -: 4274:#if _LIBCPP_STD_VER > 17
        -: 4275:template<class _CharT, class _Traits, class _Allocator, class _Up>
        -: 4276:inline _LIBCPP_INLINE_VISIBILITY
        -: 4277:void erase(basic_string<_CharT, _Traits, _Allocator>& __str, const _Up& __v)
        -: 4278:{ __str.erase(_VSTD::remove(__str.begin(), __str.end(), __v), __str.end()); }
        -: 4279:
        -: 4280:template<class _CharT, class _Traits, class _Allocator, class _Predicate>
        -: 4281:inline _LIBCPP_INLINE_VISIBILITY
        -: 4282:void erase_if(basic_string<_CharT, _Traits, _Allocator>& __str, _Predicate __pred)
        -: 4283:{ __str.erase(_VSTD::remove_if(__str.begin(), __str.end(), __pred), __str.end()); }
        -: 4284:#endif
        -: 4285:
        -: 4286:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 4287:
        -: 4288:template<class _CharT, class _Traits, class _Allocator>
        -: 4289:bool
        -: 4290:basic_string<_CharT, _Traits, _Allocator>::__dereferenceable(const const_iterator* __i) const
        -: 4291:{
        -: 4292:    return this->data() <= _VSTD::__to_raw_pointer(__i->base()) &&
        -: 4293:           _VSTD::__to_raw_pointer(__i->base()) < this->data() + this->size();
        -: 4294:}
        -: 4295:
        -: 4296:template<class _CharT, class _Traits, class _Allocator>
        -: 4297:bool
        -: 4298:basic_string<_CharT, _Traits, _Allocator>::__decrementable(const const_iterator* __i) const
        -: 4299:{
        -: 4300:    return this->data() < _VSTD::__to_raw_pointer(__i->base()) &&
        -: 4301:           _VSTD::__to_raw_pointer(__i->base()) <= this->data() + this->size();
        -: 4302:}
        -: 4303:
        -: 4304:template<class _CharT, class _Traits, class _Allocator>
        -: 4305:bool
        -: 4306:basic_string<_CharT, _Traits, _Allocator>::__addable(const const_iterator* __i, ptrdiff_t __n) const
        -: 4307:{
        -: 4308:    const value_type* __p = _VSTD::__to_raw_pointer(__i->base()) + __n;
        -: 4309:    return this->data() <= __p && __p <= this->data() + this->size();
        -: 4310:}
        -: 4311:
        -: 4312:template<class _CharT, class _Traits, class _Allocator>
        -: 4313:bool
        -: 4314:basic_string<_CharT, _Traits, _Allocator>::__subscriptable(const const_iterator* __i, ptrdiff_t __n) const
        -: 4315:{
        -: 4316:    const value_type* __p = _VSTD::__to_raw_pointer(__i->base()) + __n;
        -: 4317:    return this->data() <= __p && __p < this->data() + this->size();
        -: 4318:}
        -: 4319:
        -: 4320:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -: 4321:
        -: 4322:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_string<char>)
        -: 4323:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_string<wchar_t>)
        -: 4324:
        -: 4325:#if _LIBCPP_STD_VER > 11 
        -: 4326:// Literal suffixes for basic_string [basic.string.literals]
        -: 4327:inline namespace literals
        -: 4328:{
        -: 4329:  inline namespace string_literals
        -: 4330:  {
        -: 4331:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4332:    basic_string<char> operator "" s( const char *__str, size_t __len )
        -: 4333:    {
        -: 4334:        return basic_string<char> (__str, __len);
        -: 4335:    }
        -: 4336:
        -: 4337:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4338:    basic_string<wchar_t> operator "" s( const wchar_t *__str, size_t __len )
        -: 4339:    {
        -: 4340:        return basic_string<wchar_t> (__str, __len);
        -: 4341:    }
        -: 4342:
        -: 4343:#ifndef _LIBCPP_NO_HAS_CHAR8_T
        -: 4344:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4345:    basic_string<char8_t> operator "" s(const char8_t *__str, size_t __len) _NOEXCEPT
        -: 4346:    {
        -: 4347:        return basic_string<char8_t> (__str, __len);
        -: 4348:    }
        -: 4349:#endif
        -: 4350:
        -: 4351:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4352:    basic_string<char16_t> operator "" s( const char16_t *__str, size_t __len )
        -: 4353:    {
        -: 4354:        return basic_string<char16_t> (__str, __len);
        -: 4355:    }
        -: 4356:
        -: 4357:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4358:    basic_string<char32_t> operator "" s( const char32_t *__str, size_t __len )
        -: 4359:    {
        -: 4360:        return basic_string<char32_t> (__str, __len);
        -: 4361:    }
        -: 4362:  }
        -: 4363:}
        -: 4364:#endif
        -: 4365:
        -: 4366:_LIBCPP_END_NAMESPACE_STD
        -: 4367:
        -: 4368:_LIBCPP_POP_MACROS
        -: 4369:
        -: 4370:#endif  // _LIBCPP_STRING
