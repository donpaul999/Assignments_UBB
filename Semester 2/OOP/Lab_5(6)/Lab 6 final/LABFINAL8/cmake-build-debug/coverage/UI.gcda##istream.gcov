        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/istream
        -:    0:Graph:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/Lab 6 final/LABFINAL8/cmake-build-debug/CMakeFiles/LABFINAL8.dir/UI.gcno
        -:    0:Data:/Users/paulcolta/Desktop/GitHub/Assignments_FP/Semester 2/OOP/Lab_5(6)/Lab 6 final/LABFINAL8/cmake-build-debug/CMakeFiles/LABFINAL8.dir/UI.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===--------------------------- istream ----------------------------------===//
        -:    3://
        -:    4://                     The LLVM Compiler Infrastructure
        -:    5://
        -:    6:// This file is dual licensed under the MIT and the University of Illinois Open
        -:    7:// Source Licenses. See LICENSE.TXT for details.
        -:    8://
        -:    9://===----------------------------------------------------------------------===//
        -:   10:
        -:   11:#ifndef _LIBCPP_ISTREAM
        -:   12:#define _LIBCPP_ISTREAM
        -:   13:
        -:   14:/*
        -:   15:    istream synopsis
        -:   16:
        -:   17:template <class charT, class traits = char_traits<charT> >
        -:   18:class basic_istream
        -:   19:    : virtual public basic_ios<charT,traits>
        -:   20:{
        -:   21:public:
        -:   22:    // types (inherited from basic_ios (27.5.4)):
        -:   23:    typedef charT                          char_type;
        -:   24:    typedef traits                         traits_type;
        -:   25:    typedef typename traits_type::int_type int_type;
        -:   26:    typedef typename traits_type::pos_type pos_type;
        -:   27:    typedef typename traits_type::off_type off_type;
        -:   28:
        -:   29:    // 27.7.1.1.1 Constructor/destructor:
        -:   30:    explicit basic_istream(basic_streambuf<char_type, traits_type>* sb);
        -:   31:    basic_istream(basic_istream&& rhs);
        -:   32:    virtual ~basic_istream();
        -:   33:
        -:   34:    // 27.7.1.1.2 Assign/swap:
        -:   35:    basic_istream& operator=(basic_istream&& rhs);
        -:   36:    void swap(basic_istream& rhs);
        -:   37:
        -:   38:    // 27.7.1.1.3 Prefix/suffix:
        -:   39:    class sentry;
        -:   40:
        -:   41:    // 27.7.1.2 Formatted input:
        -:   42:    basic_istream& operator>>(basic_istream& (*pf)(basic_istream&));
        -:   43:    basic_istream& operator>>(basic_ios<char_type, traits_type>&
        -:   44:                              (*pf)(basic_ios<char_type, traits_type>&));
        -:   45:    basic_istream& operator>>(ios_base& (*pf)(ios_base&));
        -:   46:    basic_istream& operator>>(basic_streambuf<char_type, traits_type>* sb);
        -:   47:    basic_istream& operator>>(bool& n);
        -:   48:    basic_istream& operator>>(short& n);
        -:   49:    basic_istream& operator>>(unsigned short& n);
        -:   50:    basic_istream& operator>>(int& n);
        -:   51:    basic_istream& operator>>(unsigned int& n);
        -:   52:    basic_istream& operator>>(long& n);
        -:   53:    basic_istream& operator>>(unsigned long& n);
        -:   54:    basic_istream& operator>>(long long& n);
        -:   55:    basic_istream& operator>>(unsigned long long& n);
        -:   56:    basic_istream& operator>>(float& f);
        -:   57:    basic_istream& operator>>(double& f);
        -:   58:    basic_istream& operator>>(long double& f);
        -:   59:    basic_istream& operator>>(void*& p);
        -:   60:
        -:   61:    // 27.7.1.3 Unformatted input:
        -:   62:    streamsize gcount() const;
        -:   63:    int_type get();
        -:   64:    basic_istream& get(char_type& c);
        -:   65:    basic_istream& get(char_type* s, streamsize n);
        -:   66:    basic_istream& get(char_type* s, streamsize n, char_type delim);
        -:   67:    basic_istream& get(basic_streambuf<char_type,traits_type>& sb);
        -:   68:    basic_istream& get(basic_streambuf<char_type,traits_type>& sb, char_type delim);
        -:   69:
        -:   70:    basic_istream& getline(char_type* s, streamsize n);
        -:   71:    basic_istream& getline(char_type* s, streamsize n, char_type delim);
        -:   72:
        -:   73:    basic_istream& ignore(streamsize n = 1, int_type delim = traits_type::eof());
        -:   74:    int_type peek();
        -:   75:    basic_istream& read (char_type* s, streamsize n);
        -:   76:    streamsize readsome(char_type* s, streamsize n);
        -:   77:
        -:   78:    basic_istream& putback(char_type c);
        -:   79:    basic_istream& unget();
        -:   80:    int sync();
        -:   81:
        -:   82:    pos_type tellg();
        -:   83:    basic_istream& seekg(pos_type);
        -:   84:    basic_istream& seekg(off_type, ios_base::seekdir);
        -:   85:protected:
        -:   86:    basic_istream(const basic_istream& rhs) = delete;
        -:   87:    basic_istream(basic_istream&& rhs);
        -:   88:    // 27.7.2.1.2 Assign/swap:
        -:   89:    basic_istream& operator=(const basic_istream& rhs) = delete;
        -:   90:    basic_istream& operator=(basic_istream&& rhs);
        -:   91:    void swap(basic_istream& rhs);
        -:   92:};
        -:   93:
        -:   94:// 27.7.1.2.3 character extraction templates:
        -:   95:template<class charT, class traits>
        -:   96:  basic_istream<charT,traits>& operator>>(basic_istream<charT,traits>&, charT&);
        -:   97:
        -:   98:template<class traits>
        -:   99:  basic_istream<char,traits>& operator>>(basic_istream<char,traits>&, unsigned char&);
        -:  100:
        -:  101:template<class traits>
        -:  102:  basic_istream<char,traits>& operator>>(basic_istream<char,traits>&, signed char&);
        -:  103:
        -:  104:template<class charT, class traits>
        -:  105:  basic_istream<charT,traits>& operator>>(basic_istream<charT,traits>&, charT*);
        -:  106:
        -:  107:template<class traits>
        -:  108:  basic_istream<char,traits>& operator>>(basic_istream<char,traits>&, unsigned char*);
        -:  109:
        -:  110:template<class traits>
        -:  111:  basic_istream<char,traits>& operator>>(basic_istream<char,traits>&, signed char*);
        -:  112:
        -:  113:template <class charT, class traits>
        -:  114:  void
        -:  115:  swap(basic_istream<charT, traits>& x, basic_istream<charT, traits>& y);
        -:  116:
        -:  117:typedef basic_istream<char> istream;
        -:  118:typedef basic_istream<wchar_t> wistream;
        -:  119:
        -:  120:template <class charT, class traits = char_traits<charT> >
        -:  121:class basic_iostream :
        -:  122:    public basic_istream<charT,traits>,
        -:  123:    public basic_ostream<charT,traits>
        -:  124:{
        -:  125:public:
        -:  126:    // types:
        -:  127:    typedef charT                          char_type;
        -:  128:    typedef traits                         traits_type;
        -:  129:    typedef typename traits_type::int_type int_type;
        -:  130:    typedef typename traits_type::pos_type pos_type;
        -:  131:    typedef typename traits_type::off_type off_type;
        -:  132:
        -:  133:    // constructor/destructor
        -:  134:    explicit basic_iostream(basic_streambuf<char_type, traits_type>* sb);
        -:  135:    basic_iostream(basic_iostream&& rhs);
        -:  136:    virtual ~basic_iostream();
        -:  137:
        -:  138:    // assign/swap
        -:  139:    basic_iostream& operator=(basic_iostream&& rhs);
        -:  140:    void swap(basic_iostream& rhs);
        -:  141:};
        -:  142:
        -:  143:template <class charT, class traits>
        -:  144:  void
        -:  145:  swap(basic_iostream<charT, traits>& x, basic_iostream<charT, traits>& y);
        -:  146:
        -:  147:typedef basic_iostream<char> iostream;
        -:  148:typedef basic_iostream<wchar_t> wiostream;
        -:  149:
        -:  150:template <class charT, class traits>
        -:  151:  basic_istream<charT,traits>&
        -:  152:  ws(basic_istream<charT,traits>& is);
        -:  153:
        -:  154:template <class charT, class traits, class T>
        -:  155:  basic_istream<charT, traits>&
        -:  156:  operator>>(basic_istream<charT, traits>&& is, T& x);
        -:  157:
        -:  158:}  // std
        -:  159:
        -:  160:*/
        -:  161:
        -:  162:#include <__config>
        -:  163:#include <__cxx_version>
        -:  164:#include <ostream>
        -:  165:
        -:  166:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  167:#pragma GCC system_header
        -:  168:#endif
        -:  169:
        -:  170:_LIBCPP_PUSH_MACROS
        -:  171:#include <__undef_macros>
        -:  172:
        -:  173:
        -:  174:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  175:
        -:  176:template <class _CharT, class _Traits>
        -:  177:class _LIBCPP_TEMPLATE_VIS basic_istream
        -:  178:    : virtual public basic_ios<_CharT, _Traits>
        -:  179:{
        -:  180:    streamsize __gc_;
        -:  181:public:
        -:  182:    // types (inherited from basic_ios (27.5.4)):
        -:  183:    typedef _CharT                         char_type;
        -:  184:    typedef _Traits                        traits_type;
        -:  185:    typedef typename traits_type::int_type int_type;
        -:  186:    typedef typename traits_type::pos_type pos_type;
        -:  187:    typedef typename traits_type::off_type off_type;
        -:  188:
        -:  189:    // 27.7.1.1.1 Constructor/destructor:
        -:  190:    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1
        -:  191:    explicit basic_istream(basic_streambuf<char_type, traits_type>* __sb) : __gc_(0)
        -:  192:    { this->init(__sb); }
        -:  193:    virtual ~basic_istream();
        -:  194:protected:
        -:  195:#ifndef _LIBCPP_CXX03_LANG
        -:  196:    inline _LIBCPP_INLINE_VISIBILITY
        -:  197:    basic_istream(basic_istream&& __rhs);
        -:  198:
        -:  199:    // 27.7.1.1.2 Assign/swap:
        -:  200:    inline _LIBCPP_INLINE_VISIBILITY
        -:  201:    basic_istream& operator=(basic_istream&& __rhs);
        -:  202:#endif
        -:  203:
        -:  204:    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1
        -:  205:    void swap(basic_istream& __rhs) {
        -:  206:      _VSTD::swap(__gc_, __rhs.__gc_);
        -:  207:      basic_ios<char_type, traits_type>::swap(__rhs);
        -:  208:    }
        -:  209:
        -:  210:#ifndef _LIBCPP_CXX03_LANG
        -:  211:    basic_istream           (const basic_istream& __rhs) = delete;
        -:  212:    basic_istream& operator=(const basic_istream& __rhs) = delete;
        -:  213:#endif
        -:  214:public:
        -:  215:
        -:  216:    // 27.7.1.1.3 Prefix/suffix:
        -:  217:    class _LIBCPP_TEMPLATE_VIS sentry;
        -:  218:
        -:  219:    // 27.7.1.2 Formatted input:
        -:  220:    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1
        -:  221:    basic_istream& operator>>(basic_istream& (*__pf)(basic_istream&))
        -:  222:    { return __pf(*this); }
        -:  223:
        -:  224:    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1
        -:  225:    basic_istream& operator>>(basic_ios<char_type, traits_type>&
        -:  226:                              (*__pf)(basic_ios<char_type, traits_type>&))
        -:  227:    { __pf(*this); return *this; }
        -:  228:
        -:  229:    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1
        -:  230:    basic_istream& operator>>(ios_base& (*__pf)(ios_base&))
        -:  231:    { __pf(*this); return *this; }
        -:  232:
        -:  233:    basic_istream& operator>>(basic_streambuf<char_type, traits_type>* __sb);
        -:  234:    basic_istream& operator>>(bool& __n);
        -:  235:    basic_istream& operator>>(short& __n);
        -:  236:    basic_istream& operator>>(unsigned short& __n);
        -:  237:    basic_istream& operator>>(int& __n);
        -:  238:    basic_istream& operator>>(unsigned int& __n);
        -:  239:    basic_istream& operator>>(long& __n);
        -:  240:    basic_istream& operator>>(unsigned long& __n);
        -:  241:    basic_istream& operator>>(long long& __n);
        -:  242:    basic_istream& operator>>(unsigned long long& __n);
        -:  243:    basic_istream& operator>>(float& __f);
        -:  244:    basic_istream& operator>>(double& __f);
        -:  245:    basic_istream& operator>>(long double& __f);
        -:  246:    basic_istream& operator>>(void*& __p);
        -:  247:
        -:  248:    // 27.7.1.3 Unformatted input:
        -:  249:    _LIBCPP_INLINE_VISIBILITY
        -:  250:    streamsize gcount() const {return __gc_;}
        -:  251:    int_type get();
        -:  252:
        -:  253:    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1
        -:  254:    basic_istream& get(char_type& __c) {
        -:  255:      int_type __ch = get();
        -:  256:      if (__ch != traits_type::eof())
        -:  257:        __c = traits_type::to_char_type(__ch);
        -:  258:      return *this;
        -:  259:    }
        -:  260:
        -:  261:    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1
        -:  262:    basic_istream& get(char_type* __s, streamsize __n)
        -:  263:    { return get(__s, __n, this->widen('\n')); }
        -:  264:
        -:  265:    basic_istream& get(char_type* __s, streamsize __n, char_type __dlm);
        -:  266:
        -:  267:    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1
        -:  268:    basic_istream& get(basic_streambuf<char_type, traits_type>& __sb)
        -:  269:    { return get(__sb, this->widen('\n')); }
        -:  270:
        -:  271:    basic_istream& get(basic_streambuf<char_type, traits_type>& __sb, char_type __dlm);
        -:  272:
        -:  273:    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1
        -:  274:    basic_istream& getline(char_type* __s, streamsize __n)
        -:  275:    { return getline(__s, __n, this->widen('\n')); }
        -:  276:
        -:  277:    basic_istream& getline(char_type* __s, streamsize __n, char_type __dlm);
        -:  278:
        -:  279:    basic_istream& ignore(streamsize __n = 1, int_type __dlm = traits_type::eof());
        -:  280:    int_type peek();
        -:  281:    basic_istream& read (char_type* __s, streamsize __n);
        -:  282:    streamsize readsome(char_type* __s, streamsize __n);
        -:  283:
        -:  284:    basic_istream& putback(char_type __c);
        -:  285:    basic_istream& unget();
        -:  286:    int sync();
        -:  287:
        -:  288:    pos_type tellg();
        -:  289:    basic_istream& seekg(pos_type __pos);
        -:  290:    basic_istream& seekg(off_type __off, ios_base::seekdir __dir);
        -:  291:};
        -:  292:
        -:  293:template <class _CharT, class _Traits>
        -:  294:class _LIBCPP_TEMPLATE_VIS basic_istream<_CharT, _Traits>::sentry
        -:  295:{
        -:  296:    bool __ok_;
        -:  297:
        -:  298:    sentry(const sentry&); // = delete;
        -:  299:    sentry& operator=(const sentry&); // = delete;
        -:  300:
        -:  301:public:
        -:  302:    explicit sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
        -:  303://    ~sentry() = default;
        -:  304:
        -:  305:    _LIBCPP_INLINE_VISIBILITY
        -:  306:        _LIBCPP_EXPLICIT
    #####:  307:        operator bool() const {return __ok_;}
    $$$$$:  307-block  0
    $$$$$:  307-block  1
        -:  308:};
        -:  309:
        -:  310:template <class _CharT, class _Traits>
        -:  311:basic_istream<_CharT, _Traits>::sentry::sentry(basic_istream<_CharT, _Traits>& __is,
        -:  312:                                               bool __noskipws)
        -:  313:    : __ok_(false)
        -:  314:{
        -:  315:    if (__is.good())
        -:  316:    {
        -:  317:        if (__is.tie())
        -:  318:            __is.tie()->flush();
        -:  319:        if (!__noskipws && (__is.flags() & ios_base::skipws))
        -:  320:        {
        -:  321:            typedef istreambuf_iterator<_CharT, _Traits> _Ip;
        -:  322:            const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__is.getloc());
        -:  323:            _Ip __i(__is);
        -:  324:            _Ip __eof;
        -:  325:            for (; __i != __eof; ++__i)
        -:  326:                if (!__ct.is(__ct.space, *__i))
        -:  327:                    break;
        -:  328:            if (__i == __eof)
        -:  329:                __is.setstate(ios_base::failbit | ios_base::eofbit);
        -:  330:        }
        -:  331:        __ok_ = __is.good();
        -:  332:    }
        -:  333:    else
        -:  334:        __is.setstate(ios_base::failbit);
        -:  335:}
        -:  336:
        -:  337:#ifndef _LIBCPP_CXX03_LANG
        -:  338:
        -:  339:template <class _CharT, class _Traits>
        -:  340:basic_istream<_CharT, _Traits>::basic_istream(basic_istream&& __rhs)
        -:  341:    : __gc_(__rhs.__gc_)
        -:  342:{
        -:  343:    __rhs.__gc_ = 0;
        -:  344:    this->move(__rhs);
        -:  345:}
        -:  346:
        -:  347:template <class _CharT, class _Traits>
        -:  348:basic_istream<_CharT, _Traits>&
        -:  349:basic_istream<_CharT, _Traits>::operator=(basic_istream&& __rhs)
        -:  350:{
        -:  351:    swap(__rhs);
        -:  352:    return *this;
        -:  353:}
        -:  354:
        -:  355:#endif  // _LIBCPP_CXX03_LANG
        -:  356:
        -:  357:template <class _CharT, class _Traits>
        -:  358:basic_istream<_CharT, _Traits>::~basic_istream()
        -:  359:{
        -:  360:}
        -:  361:
        -:  362:template <class _Tp, class _CharT, class _Traits>
        -:  363:_LIBCPP_INLINE_VISIBILITY
        -:  364:basic_istream<_CharT, _Traits>&
        -:  365:__input_arithmetic(basic_istream<_CharT, _Traits>& __is, _Tp& __n) {
        -:  366:    ios_base::iostate __state = ios_base::goodbit;
        -:  367:    typename basic_istream<_CharT, _Traits>::sentry __s(__is);
        -:  368:    if (__s)
        -:  369:    {
        -:  370:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  371:        try
        -:  372:        {
        -:  373:#endif  // _LIBCPP_NO_EXCEPTIONS
        -:  374:            typedef istreambuf_iterator<_CharT, _Traits> _Ip;
        -:  375:            typedef num_get<_CharT, _Ip> _Fp;
        -:  376:            use_facet<_Fp>(__is.getloc()).get(_Ip(__is), _Ip(), __is, __state, __n);
        -:  377:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  378:        }
        -:  379:        catch (...)
        -:  380:        {
        -:  381:            __state |= ios_base::badbit;
        -:  382:            __is.__setstate_nothrow(__state);
        -:  383:            if (__is.exceptions() & ios_base::badbit)
        -:  384:            {
        -:  385:                throw;
        -:  386:            }
        -:  387:        }
        -:  388:#endif
        -:  389:        __is.setstate(__state);
        -:  390:    }
        -:  391:    return __is;
        -:  392:}
        -:  393:
        -:  394:template <class _CharT, class _Traits>
        -:  395:basic_istream<_CharT, _Traits>&
        -:  396:basic_istream<_CharT, _Traits>::operator>>(unsigned short& __n)
        -:  397:{
        -:  398:    return _VSTD::__input_arithmetic<unsigned short>(*this, __n);
        -:  399:}
        -:  400:
        -:  401:template <class _CharT, class _Traits>
        -:  402:basic_istream<_CharT, _Traits>&
        -:  403:basic_istream<_CharT, _Traits>::operator>>(unsigned int& __n)
        -:  404:{
        -:  405:    return _VSTD::__input_arithmetic<unsigned int>(*this, __n);
        -:  406:}
        -:  407:
        -:  408:template <class _CharT, class _Traits>
        -:  409:basic_istream<_CharT, _Traits>&
        -:  410:basic_istream<_CharT, _Traits>::operator>>(long& __n)
        -:  411:{
        -:  412:    return _VSTD::__input_arithmetic<long>(*this, __n);
        -:  413:}
        -:  414:
        -:  415:template <class _CharT, class _Traits>
        -:  416:basic_istream<_CharT, _Traits>&
        -:  417:basic_istream<_CharT, _Traits>::operator>>(unsigned long& __n)
        -:  418:{
        -:  419:    return _VSTD::__input_arithmetic<unsigned long>(*this, __n);
        -:  420:}
        -:  421:
        -:  422:template <class _CharT, class _Traits>
        -:  423:basic_istream<_CharT, _Traits>&
        -:  424:basic_istream<_CharT, _Traits>::operator>>(long long& __n)
        -:  425:{
        -:  426:    return _VSTD::__input_arithmetic<long long>(*this, __n);
        -:  427:}
        -:  428:
        -:  429:template <class _CharT, class _Traits>
        -:  430:basic_istream<_CharT, _Traits>&
        -:  431:basic_istream<_CharT, _Traits>::operator>>(unsigned long long& __n)
        -:  432:{
        -:  433:    return _VSTD::__input_arithmetic<unsigned long long>(*this, __n);
        -:  434:}
        -:  435:
        -:  436:template <class _CharT, class _Traits>
        -:  437:basic_istream<_CharT, _Traits>&
        -:  438:basic_istream<_CharT, _Traits>::operator>>(float& __n)
        -:  439:{
        -:  440:    return _VSTD::__input_arithmetic<float>(*this, __n);
        -:  441:}
        -:  442:
        -:  443:template <class _CharT, class _Traits>
        -:  444:basic_istream<_CharT, _Traits>&
        -:  445:basic_istream<_CharT, _Traits>::operator>>(double& __n)
        -:  446:{
        -:  447:    return _VSTD::__input_arithmetic<double>(*this, __n);
        -:  448:}
        -:  449:
        -:  450:template <class _CharT, class _Traits>
        -:  451:basic_istream<_CharT, _Traits>&
        -:  452:basic_istream<_CharT, _Traits>::operator>>(long double& __n)
        -:  453:{
        -:  454:    return _VSTD::__input_arithmetic<long double>(*this, __n);
        -:  455:}
        -:  456:
        -:  457:template <class _CharT, class _Traits>
        -:  458:basic_istream<_CharT, _Traits>&
        -:  459:basic_istream<_CharT, _Traits>::operator>>(bool& __n)
        -:  460:{
        -:  461:    return _VSTD::__input_arithmetic<bool>(*this, __n);
        -:  462:}
        -:  463:
        -:  464:template <class _CharT, class _Traits>
        -:  465:basic_istream<_CharT, _Traits>&
        -:  466:basic_istream<_CharT, _Traits>::operator>>(void*& __n)
        -:  467:{
        -:  468:    return _VSTD::__input_arithmetic<void*>(*this, __n);
        -:  469:}
        -:  470:
        -:  471:template <class _Tp, class _CharT, class _Traits>
        -:  472:_LIBCPP_INLINE_VISIBILITY
        -:  473:basic_istream<_CharT, _Traits>&
        -:  474:__input_arithmetic_with_numeric_limits(basic_istream<_CharT, _Traits>& __is, _Tp& __n) {
        -:  475:    ios_base::iostate __state = ios_base::goodbit;
        -:  476:    typename basic_istream<_CharT, _Traits>::sentry __s(__is);
        -:  477:    if (__s)
        -:  478:    {
        -:  479:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  480:        try
        -:  481:        {
        -:  482:#endif  // _LIBCPP_NO_EXCEPTIONS
        -:  483:            typedef istreambuf_iterator<_CharT, _Traits> _Ip;
        -:  484:            typedef num_get<_CharT, _Ip> _Fp;
        -:  485:            long __temp;
        -:  486:            use_facet<_Fp>(__is.getloc()).get(_Ip(__is), _Ip(), __is, __state, __temp);
        -:  487:            if (__temp < numeric_limits<_Tp>::min())
        -:  488:            {
        -:  489:                __state |= ios_base::failbit;
        -:  490:                __n = numeric_limits<_Tp>::min();
        -:  491:            }
        -:  492:            else if (__temp > numeric_limits<_Tp>::max())
        -:  493:            {
        -:  494:                __state |= ios_base::failbit;
        -:  495:                __n = numeric_limits<_Tp>::max();
        -:  496:            }
        -:  497:            else
        -:  498:            {
        -:  499:                __n = static_cast<_Tp>(__temp);
        -:  500:            }
        -:  501:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  502:        }
        -:  503:        catch (...)
        -:  504:        {
        -:  505:            __state |= ios_base::badbit;
        -:  506:            __is.__setstate_nothrow(__state);
        -:  507:            if (__is.exceptions() & ios_base::badbit)
        -:  508:            {
        -:  509:                throw;
        -:  510:            }
        -:  511:        }
        -:  512:#endif  // _LIBCPP_NO_EXCEPTIONS
        -:  513:        __is.setstate(__state);
        -:  514:    }
        -:  515:    return __is;
        -:  516:}
        -:  517:
        -:  518:template <class _CharT, class _Traits>
        -:  519:basic_istream<_CharT, _Traits>&
        -:  520:basic_istream<_CharT, _Traits>::operator>>(short& __n)
        -:  521:{
        -:  522:    return _VSTD::__input_arithmetic_with_numeric_limits<short>(*this, __n);
        -:  523:}
        -:  524:
        -:  525:template <class _CharT, class _Traits>
        -:  526:basic_istream<_CharT, _Traits>&
        -:  527:basic_istream<_CharT, _Traits>::operator>>(int& __n)
        -:  528:{
        -:  529:    return _VSTD::__input_arithmetic_with_numeric_limits<int>(*this, __n);
        -:  530:}
        -:  531:
        -:  532:template<class _CharT, class _Traits>
        -:  533:_LIBCPP_INLINE_VISIBILITY
        -:  534:basic_istream<_CharT, _Traits>&
        -:  535:__input_c_string(basic_istream<_CharT, _Traits>& __is, _CharT* __p, size_t __n)
        -:  536:{
        -:  537:    ios_base::iostate __state = ios_base::goodbit;
        -:  538:    typename basic_istream<_CharT, _Traits>::sentry __sen(__is);
        -:  539:    if (__sen)
        -:  540:    {
        -:  541:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  542:        try
        -:  543:        {
        -:  544:#endif
        -:  545:            _CharT* __s = __p;
        -:  546:            const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__is.getloc());
        -:  547:            while (__s != __p + (__n-1))
        -:  548:            {
        -:  549:                typename _Traits::int_type __i = __is.rdbuf()->sgetc();
        -:  550:                if (_Traits::eq_int_type(__i, _Traits::eof()))
        -:  551:                {
        -:  552:                   __state |= ios_base::eofbit;
        -:  553:                   break;
        -:  554:                }
        -:  555:                _CharT __ch = _Traits::to_char_type(__i);
        -:  556:                if (__ct.is(__ct.space, __ch))
        -:  557:                    break;
        -:  558:                *__s++ = __ch;
        -:  559:                 __is.rdbuf()->sbumpc();
        -:  560:            }
        -:  561:            *__s = _CharT();
        -:  562:            __is.width(0);
        -:  563:            if (__s == __p)
        -:  564:               __state |= ios_base::failbit;
        -:  565:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  566:        }
        -:  567:        catch (...)
        -:  568:        {
        -:  569:            __state |= ios_base::badbit;
        -:  570:            __is.__setstate_nothrow(__state);
        -:  571:            if (__is.exceptions() & ios_base::badbit)
        -:  572:            {
        -:  573:                throw;
        -:  574:            }
        -:  575:        }
        -:  576:#endif
        -:  577:        __is.setstate(__state);
        -:  578:    }
        -:  579:    return __is;
        -:  580:}
        -:  581:
        -:  582:#if _LIBCPP_STD_VER > 17
        -:  583:
        -:  584:template<class _CharT, class _Traits, size_t _Np>
        -:  585:inline _LIBCPP_INLINE_VISIBILITY
        -:  586:basic_istream<_CharT, _Traits>&
        -:  587:operator>>(basic_istream<_CharT, _Traits>& __is, _CharT (&__buf)[_Np])
        -:  588:{
        -:  589:    size_t __n = _Np;
        -:  590:    if (__is.width() > 0)
        -:  591:        __n = _VSTD::min(size_t(__is.width()), _Np);
        -:  592:    return _VSTD::__input_c_string(__is, __buf, __n);
        -:  593:}
        -:  594:
        -:  595:template<class _Traits, size_t _Np>
        -:  596:inline _LIBCPP_INLINE_VISIBILITY
        -:  597:basic_istream<char, _Traits>&
        -:  598:operator>>(basic_istream<char, _Traits>& __is, unsigned char (&__buf)[_Np])
        -:  599:{
        -:  600:    return __is >> (char(&)[_Np])__buf;
        -:  601:}
        -:  602:
        -:  603:template<class _Traits, size_t _Np>
        -:  604:inline _LIBCPP_INLINE_VISIBILITY
        -:  605:basic_istream<char, _Traits>&
        -:  606:operator>>(basic_istream<char, _Traits>& __is, signed char (&__buf)[_Np])
        -:  607:{
        -:  608:    return __is >> (char(&)[_Np])__buf;
        -:  609:}
        -:  610:
        -:  611:#else
        -:  612:
        -:  613:template<class _CharT, class _Traits>
        -:  614:inline _LIBCPP_INLINE_VISIBILITY
        -:  615:basic_istream<_CharT, _Traits>&
        -:  616:operator>>(basic_istream<_CharT, _Traits>& __is, _CharT* __s)
        -:  617:{
        -:  618:    streamsize __n = __is.width();
        -:  619:    if (__n <= 0)
        -:  620:        __n = numeric_limits<streamsize>::max() / sizeof(_CharT) - 1;
        -:  621:    return _VSTD::__input_c_string(__is, __s, size_t(__n));
        -:  622:}
        -:  623:
        -:  624:template<class _Traits>
        -:  625:inline _LIBCPP_INLINE_VISIBILITY
        -:  626:basic_istream<char, _Traits>&
        -:  627:operator>>(basic_istream<char, _Traits>& __is, unsigned char* __s)
        -:  628:{
        -:  629:    return __is >> (char*)__s;
        -:  630:}
        -:  631:
        -:  632:template<class _Traits>
        -:  633:inline _LIBCPP_INLINE_VISIBILITY
        -:  634:basic_istream<char, _Traits>&
        -:  635:operator>>(basic_istream<char, _Traits>& __is, signed char* __s)
        -:  636:{
        -:  637:    return __is >> (char*)__s;
        -:  638:}
        -:  639:
        -:  640:#endif  // _LIBCPP_STD_VER > 17
        -:  641:
        -:  642:template<class _CharT, class _Traits>
        -:  643:basic_istream<_CharT, _Traits>&
        -:  644:operator>>(basic_istream<_CharT, _Traits>& __is, _CharT& __c)
        -:  645:{
        -:  646:    ios_base::iostate __state = ios_base::goodbit;
        -:  647:    typename basic_istream<_CharT, _Traits>::sentry __sen(__is);
        -:  648:    if (__sen)
        -:  649:    {
        -:  650:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  651:        try
        -:  652:        {
        -:  653:#endif
        -:  654:            typename _Traits::int_type __i = __is.rdbuf()->sbumpc();
        -:  655:            if (_Traits::eq_int_type(__i, _Traits::eof()))
        -:  656:                __state |= ios_base::eofbit | ios_base::failbit;
        -:  657:            else
        -:  658:                __c = _Traits::to_char_type(__i);
        -:  659:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  660:        }
        -:  661:        catch (...)
        -:  662:        {
        -:  663:            __state |= ios_base::badbit;
        -:  664:            __is.__setstate_nothrow(__state);
        -:  665:            if (__is.exceptions() & ios_base::badbit)
        -:  666:            {
        -:  667:                throw;
        -:  668:            }
        -:  669:        }
        -:  670:#endif
        -:  671:        __is.setstate(__state);
        -:  672:    }
        -:  673:    return __is;
        -:  674:}
        -:  675:
        -:  676:template<class _Traits>
        -:  677:inline _LIBCPP_INLINE_VISIBILITY
        -:  678:basic_istream<char, _Traits>&
        -:  679:operator>>(basic_istream<char, _Traits>& __is, unsigned char& __c)
        -:  680:{
        -:  681:    return __is >> (char&)__c;
        -:  682:}
        -:  683:
        -:  684:template<class _Traits>
        -:  685:inline _LIBCPP_INLINE_VISIBILITY
        -:  686:basic_istream<char, _Traits>&
        -:  687:operator>>(basic_istream<char, _Traits>& __is, signed char& __c)
        -:  688:{
        -:  689:    return __is >> (char&)__c;
        -:  690:}
        -:  691:
        -:  692:template<class _CharT, class _Traits>
        -:  693:basic_istream<_CharT, _Traits>&
        -:  694:basic_istream<_CharT, _Traits>::operator>>(basic_streambuf<char_type, traits_type>* __sb)
        -:  695:{
        -:  696:    ios_base::iostate __state = ios_base::goodbit;
        -:  697:    __gc_ = 0;
        -:  698:    sentry __s(*this, true);
        -:  699:    if (__s)
        -:  700:    {
        -:  701:        if (__sb)
        -:  702:        {
        -:  703:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  704:            try
        -:  705:            {
        -:  706:#endif // _LIBCPP_NO_EXCEPTIONS
        -:  707:                while (true)
        -:  708:                {
        -:  709:                    typename traits_type::int_type __i = this->rdbuf()->sgetc();
        -:  710:                    if (traits_type::eq_int_type(__i, _Traits::eof()))
        -:  711:                    {
        -:  712:                       __state |= ios_base::eofbit;
        -:  713:                       break;
        -:  714:                    }
        -:  715:                    if (traits_type::eq_int_type(
        -:  716:                            __sb->sputc(traits_type::to_char_type(__i)),
        -:  717:                            traits_type::eof()))
        -:  718:                        break;
        -:  719:                    ++__gc_;
        -:  720:                    this->rdbuf()->sbumpc();
        -:  721:                }
        -:  722:                if (__gc_ == 0)
        -:  723:                   __state |= ios_base::failbit;
        -:  724:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  725:            }
        -:  726:            catch (...)
        -:  727:            {
        -:  728:                __state |= ios_base::badbit;
        -:  729:                if (__gc_ == 0)
        -:  730:                    __state |= ios_base::failbit;
        -:  731:
        -:  732:                this->__setstate_nothrow(__state);
        -:  733:                if (this->exceptions() & ios_base::failbit || this->exceptions() & ios_base::badbit)
        -:  734:                {
        -:  735:                    throw;
        -:  736:                }
        -:  737:            }
        -:  738:#endif  // _LIBCPP_NO_EXCEPTIONS
        -:  739:        }
        -:  740:        else
        -:  741:        {
        -:  742:            __state |= ios_base::failbit;
        -:  743:        }
        -:  744:        this->setstate(__state);
        -:  745:    }
        -:  746:    return *this;
        -:  747:}
        -:  748:
        -:  749:template<class _CharT, class _Traits>
        -:  750:typename basic_istream<_CharT, _Traits>::int_type
        -:  751:basic_istream<_CharT, _Traits>::get()
        -:  752:{
        -:  753:    ios_base::iostate __state = ios_base::goodbit;
        -:  754:    __gc_ = 0;
        -:  755:    int_type __r = traits_type::eof();
        -:  756:    sentry __s(*this, true);
        -:  757:    if (__s)
        -:  758:    {
        -:  759:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  760:        try
        -:  761:        {
        -:  762:#endif
        -:  763:            __r = this->rdbuf()->sbumpc();
        -:  764:            if (traits_type::eq_int_type(__r, traits_type::eof()))
        -:  765:               __state |= ios_base::failbit | ios_base::eofbit;
        -:  766:            else
        -:  767:                __gc_ = 1;
        -:  768:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  769:        }
        -:  770:        catch (...)
        -:  771:        {
        -:  772:            this->__setstate_nothrow(this->rdstate() | ios_base::badbit);
        -:  773:            if (this->exceptions() & ios_base::badbit)
        -:  774:            {
        -:  775:                throw;
        -:  776:            }
        -:  777:        }
        -:  778:#endif
        -:  779:        this->setstate(__state);
        -:  780:    }
        -:  781:    return __r;
        -:  782:}
        -:  783:
        -:  784:template<class _CharT, class _Traits>
        -:  785:basic_istream<_CharT, _Traits>&
        -:  786:basic_istream<_CharT, _Traits>::get(char_type* __s, streamsize __n, char_type __dlm)
        -:  787:{
        -:  788:    ios_base::iostate __state = ios_base::goodbit;
        -:  789:    __gc_ = 0;
        -:  790:    sentry __sen(*this, true);
        -:  791:    if (__sen)
        -:  792:    {
        -:  793:        if (__n > 0)
        -:  794:        {
        -:  795:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  796:            try
        -:  797:            {
        -:  798:#endif
        -:  799:                while (__gc_ < __n-1)
        -:  800:                {
        -:  801:                    int_type __i = this->rdbuf()->sgetc();
        -:  802:                    if (traits_type::eq_int_type(__i, traits_type::eof()))
        -:  803:                    {
        -:  804:                       __state |= ios_base::eofbit;
        -:  805:                       break;
        -:  806:                    }
        -:  807:                    char_type __ch = traits_type::to_char_type(__i);
        -:  808:                    if (traits_type::eq(__ch, __dlm))
        -:  809:                        break;
        -:  810:                    *__s++ = __ch;
        -:  811:                    ++__gc_;
        -:  812:                     this->rdbuf()->sbumpc();
        -:  813:                }
        -:  814:                if (__gc_ == 0)
        -:  815:                   __state |= ios_base::failbit;
        -:  816:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  817:            }
        -:  818:            catch (...)
        -:  819:            {
        -:  820:                __state |= ios_base::badbit;
        -:  821:                this->__setstate_nothrow(__state);
        -:  822:                if (this->exceptions() & ios_base::badbit)
        -:  823:                {
        -:  824:                    if (__n > 0)
        -:  825:                        *__s = char_type();
        -:  826:                    throw;
        -:  827:                }
        -:  828:            }
        -:  829:#endif
        -:  830:        }
        -:  831:        else
        -:  832:        {
        -:  833:            __state |= ios_base::failbit;
        -:  834:        }
        -:  835:
        -:  836:        if (__n > 0)
        -:  837:            *__s = char_type();
        -:  838:        this->setstate(__state);
        -:  839:    }
        -:  840:    if (__n > 0)
        -:  841:        *__s = char_type();
        -:  842:    return *this;
        -:  843:}
        -:  844:
        -:  845:template<class _CharT, class _Traits>
        -:  846:basic_istream<_CharT, _Traits>&
        -:  847:basic_istream<_CharT, _Traits>::get(basic_streambuf<char_type, traits_type>& __sb,
        -:  848:                                    char_type __dlm)
        -:  849:{
        -:  850:    ios_base::iostate __state = ios_base::goodbit;
        -:  851:    __gc_ = 0;
        -:  852:    sentry __sen(*this, true);
        -:  853:    if (__sen)
        -:  854:    {
        -:  855:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  856:        try
        -:  857:        {
        -:  858:#endif  // _LIBCPP_NO_EXCEPTIONS
        -:  859:            while (true)
        -:  860:            {
        -:  861:                typename traits_type::int_type __i = this->rdbuf()->sgetc();
        -:  862:                if (traits_type::eq_int_type(__i, traits_type::eof()))
        -:  863:                {
        -:  864:                   __state |= ios_base::eofbit;
        -:  865:                   break;
        -:  866:                }
        -:  867:                char_type __ch = traits_type::to_char_type(__i);
        -:  868:                if (traits_type::eq(__ch, __dlm))
        -:  869:                    break;
        -:  870:                if (traits_type::eq_int_type(__sb.sputc(__ch), traits_type::eof()))
        -:  871:                    break;
        -:  872:                ++__gc_;
        -:  873:                this->rdbuf()->sbumpc();
        -:  874:            }
        -:  875:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  876:        }
        -:  877:        catch (...)
        -:  878:        {
        -:  879:            __state |= ios_base::badbit;
        -:  880:            // according to the spec, exceptions here are caught but not rethrown
        -:  881:        }
        -:  882:#endif  // _LIBCPP_NO_EXCEPTIONS
        -:  883:        if (__gc_ == 0)
        -:  884:           __state |= ios_base::failbit;
        -:  885:        this->setstate(__state);
        -:  886:    }
        -:  887:    return *this;
        -:  888:}
        -:  889:
        -:  890:template<class _CharT, class _Traits>
        -:  891:basic_istream<_CharT, _Traits>&
        -:  892:basic_istream<_CharT, _Traits>::getline(char_type* __s, streamsize __n, char_type __dlm)
        -:  893:{
        -:  894:    ios_base::iostate __state = ios_base::goodbit;
        -:  895:    __gc_ = 0;
        -:  896:    sentry __sen(*this, true);
        -:  897:    if (__sen)
        -:  898:    {
        -:  899:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  900:        try
        -:  901:        {
        -:  902:#endif  // _LIBCPP_NO_EXCEPTIONS
        -:  903:            while (true)
        -:  904:            {
        -:  905:                typename traits_type::int_type __i = this->rdbuf()->sgetc();
        -:  906:                if (traits_type::eq_int_type(__i, traits_type::eof()))
        -:  907:                {
        -:  908:                   __state |= ios_base::eofbit;
        -:  909:                   break;
        -:  910:                }
        -:  911:                char_type __ch = traits_type::to_char_type(__i);
        -:  912:                if (traits_type::eq(__ch, __dlm))
        -:  913:                {
        -:  914:                    this->rdbuf()->sbumpc();
        -:  915:                    ++__gc_;
        -:  916:                    break;
        -:  917:                }
        -:  918:                if (__gc_ >= __n-1)
        -:  919:                {
        -:  920:                    __state |= ios_base::failbit;
        -:  921:                    break;
        -:  922:                }
        -:  923:                *__s++ = __ch;
        -:  924:                this->rdbuf()->sbumpc();
        -:  925:                ++__gc_;
        -:  926:            }
        -:  927:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  928:        }
        -:  929:        catch (...)
        -:  930:        {
        -:  931:            __state |= ios_base::badbit;
        -:  932:            this->__setstate_nothrow(__state);
        -:  933:            if (this->exceptions() & ios_base::badbit)
        -:  934:            {
        -:  935:                if (__n > 0)
        -:  936:                    *__s = char_type();
        -:  937:                if (__gc_ == 0)
        -:  938:                    __state |= ios_base::failbit;
        -:  939:                throw;
        -:  940:            }
        -:  941:        }
        -:  942:#endif  // _LIBCPP_NO_EXCEPTIONS
        -:  943:    }
        -:  944:    if (__n > 0)
        -:  945:        *__s = char_type();
        -:  946:    if (__gc_ == 0)
        -:  947:        __state |= ios_base::failbit;
        -:  948:    this->setstate(__state);
        -:  949:    return *this;
        -:  950:}
        -:  951:
        -:  952:template<class _CharT, class _Traits>
        -:  953:basic_istream<_CharT, _Traits>&
        -:  954:basic_istream<_CharT, _Traits>::ignore(streamsize __n, int_type __dlm)
        -:  955:{
        -:  956:    ios_base::iostate __state = ios_base::goodbit;
        -:  957:    __gc_ = 0;
        -:  958:    sentry __sen(*this, true);
        -:  959:    if (__sen)
        -:  960:    {
        -:  961:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  962:        try
        -:  963:        {
        -:  964:#endif  // _LIBCPP_NO_EXCEPTIONS
        -:  965:            if (__n == numeric_limits<streamsize>::max())
        -:  966:            {
        -:  967:                while (true)
        -:  968:                {
        -:  969:                    typename traits_type::int_type __i = this->rdbuf()->sbumpc();
        -:  970:                    if (traits_type::eq_int_type(__i, traits_type::eof()))
        -:  971:                    {
        -:  972:                       __state |= ios_base::eofbit;
        -:  973:                       break;
        -:  974:                    }
        -:  975:                    ++__gc_;
        -:  976:                    if (traits_type::eq_int_type(__i, __dlm))
        -:  977:                        break;
        -:  978:                }
        -:  979:            }
        -:  980:            else
        -:  981:            {
        -:  982:                while (__gc_ < __n)
        -:  983:                {
        -:  984:                    typename traits_type::int_type __i = this->rdbuf()->sbumpc();
        -:  985:                    if (traits_type::eq_int_type(__i, traits_type::eof()))
        -:  986:                    {
        -:  987:                       __state |= ios_base::eofbit;
        -:  988:                       break;
        -:  989:                    }
        -:  990:                    ++__gc_;
        -:  991:                    if (traits_type::eq_int_type(__i, __dlm))
        -:  992:                        break;
        -:  993:                }
        -:  994:            }
        -:  995:#ifndef _LIBCPP_NO_EXCEPTIONS
        -:  996:        }
        -:  997:        catch (...)
        -:  998:        {
        -:  999:            __state |= ios_base::badbit;
        -: 1000:            this->__setstate_nothrow(__state);
        -: 1001:            if (this->exceptions() & ios_base::badbit)
        -: 1002:            {
        -: 1003:                throw;
        -: 1004:            }
        -: 1005:        }
        -: 1006:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1007:        this->setstate(__state);
        -: 1008:    }
        -: 1009:    return *this;
        -: 1010:}
        -: 1011:
        -: 1012:template<class _CharT, class _Traits>
        -: 1013:typename basic_istream<_CharT, _Traits>::int_type
        -: 1014:basic_istream<_CharT, _Traits>::peek()
        -: 1015:{
        -: 1016:    ios_base::iostate __state = ios_base::goodbit;
        -: 1017:    __gc_ = 0;
        -: 1018:    int_type __r = traits_type::eof();
        -: 1019:    sentry __sen(*this, true);
        -: 1020:    if (__sen)
        -: 1021:    {
        -: 1022:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1023:        try
        -: 1024:        {
        -: 1025:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1026:            __r = this->rdbuf()->sgetc();
        -: 1027:            if (traits_type::eq_int_type(__r, traits_type::eof()))
        -: 1028:                __state |= ios_base::eofbit;
        -: 1029:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1030:        }
        -: 1031:        catch (...)
        -: 1032:        {
        -: 1033:            __state |= ios_base::badbit;
        -: 1034:            this->__setstate_nothrow(__state);
        -: 1035:            if (this->exceptions() & ios_base::badbit)
        -: 1036:            {
        -: 1037:                throw;
        -: 1038:            }
        -: 1039:        }
        -: 1040:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1041:        this->setstate(__state);
        -: 1042:    }
        -: 1043:    return __r;
        -: 1044:}
        -: 1045:
        -: 1046:template<class _CharT, class _Traits>
        -: 1047:basic_istream<_CharT, _Traits>&
        -: 1048:basic_istream<_CharT, _Traits>::read(char_type* __s, streamsize __n)
        -: 1049:{
        -: 1050:    ios_base::iostate __state = ios_base::goodbit;
        -: 1051:    __gc_ = 0;
        -: 1052:    sentry __sen(*this, true);
        -: 1053:    if (__sen)
        -: 1054:    {
        -: 1055:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1056:        try
        -: 1057:        {
        -: 1058:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1059:            __gc_ = this->rdbuf()->sgetn(__s, __n);
        -: 1060:            if (__gc_ != __n)
        -: 1061:                __state |= ios_base::failbit | ios_base::eofbit;
        -: 1062:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1063:        }
        -: 1064:        catch (...)
        -: 1065:        {
        -: 1066:            __state |= ios_base::badbit;
        -: 1067:            this->__setstate_nothrow(__state);
        -: 1068:            if (this->exceptions() & ios_base::badbit)
        -: 1069:            {
        -: 1070:                throw;
        -: 1071:            }
        -: 1072:        }
        -: 1073:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1074:    }
        -: 1075:    else
        -: 1076:    {
        -: 1077:        __state |= ios_base::failbit;
        -: 1078:    }
        -: 1079:    this->setstate(__state);
        -: 1080:    return *this;
        -: 1081:}
        -: 1082:
        -: 1083:template<class _CharT, class _Traits>
        -: 1084:streamsize
        -: 1085:basic_istream<_CharT, _Traits>::readsome(char_type* __s, streamsize __n)
        -: 1086:{
        -: 1087:    ios_base::iostate __state = ios_base::goodbit;
        -: 1088:    __gc_ = 0;
        -: 1089:    sentry __sen(*this, true);
        -: 1090:    if (__sen)
        -: 1091:    {
        -: 1092:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1093:        try
        -: 1094:        {
        -: 1095:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1096:            streamsize __c = this->rdbuf()->in_avail();
        -: 1097:            switch (__c)
        -: 1098:            {
        -: 1099:            case -1:
        -: 1100:                __state |= ios_base::eofbit;
        -: 1101:                break;
        -: 1102:            case 0:
        -: 1103:                break;
        -: 1104:            default:
        -: 1105:                __n = _VSTD::min(__c, __n);
        -: 1106:                __gc_ = this->rdbuf()->sgetn(__s, __n);
        -: 1107:                if (__gc_ != __n)
        -: 1108:                    __state |= ios_base::failbit | ios_base::eofbit;
        -: 1109:                break;
        -: 1110:            }
        -: 1111:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1112:        }
        -: 1113:        catch (...)
        -: 1114:        {
        -: 1115:            __state |= ios_base::badbit;
        -: 1116:            this->__setstate_nothrow(__state);
        -: 1117:            if (this->exceptions() & ios_base::badbit)
        -: 1118:            {
        -: 1119:                throw;
        -: 1120:            }
        -: 1121:        }
        -: 1122:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1123:    }
        -: 1124:    else
        -: 1125:    {
        -: 1126:        __state |= ios_base::failbit;
        -: 1127:    }
        -: 1128:    this->setstate(__state);
        -: 1129:    return __gc_;
        -: 1130:}
        -: 1131:
        -: 1132:template<class _CharT, class _Traits>
        -: 1133:basic_istream<_CharT, _Traits>&
        -: 1134:basic_istream<_CharT, _Traits>::putback(char_type __c)
        -: 1135:{
        -: 1136:    ios_base::iostate __state = this->rdstate() & ~ios_base::eofbit;
        -: 1137:    __gc_ = 0;
        -: 1138:    this->clear(__state);
        -: 1139:    sentry __sen(*this, true);
        -: 1140:    if (__sen)
        -: 1141:    {
        -: 1142:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1143:        try
        -: 1144:        {
        -: 1145:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1146:            if (this->rdbuf() == 0 || this->rdbuf()->sputbackc(__c) == traits_type::eof())
        -: 1147:                __state |= ios_base::badbit;
        -: 1148:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1149:        }
        -: 1150:        catch (...)
        -: 1151:        {
        -: 1152:            __state |= ios_base::badbit;
        -: 1153:            this->__setstate_nothrow(__state);
        -: 1154:            if (this->exceptions() & ios_base::badbit)
        -: 1155:            {
        -: 1156:                throw;
        -: 1157:            }
        -: 1158:        }
        -: 1159:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1160:    }
        -: 1161:    else
        -: 1162:    {
        -: 1163:        __state |= ios_base::failbit;
        -: 1164:    }
        -: 1165:    this->setstate(__state);
        -: 1166:    return *this;
        -: 1167:}
        -: 1168:
        -: 1169:template<class _CharT, class _Traits>
        -: 1170:basic_istream<_CharT, _Traits>&
        -: 1171:basic_istream<_CharT, _Traits>::unget()
        -: 1172:{
        -: 1173:    ios_base::iostate __state = this->rdstate() & ~ios_base::eofbit;
        -: 1174:    __gc_ = 0;
        -: 1175:    this->clear(__state);
        -: 1176:    sentry __sen(*this, true);
        -: 1177:    if (__sen)
        -: 1178:    {
        -: 1179:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1180:        try
        -: 1181:        {
        -: 1182:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1183:            if (this->rdbuf() == 0 || this->rdbuf()->sungetc() == traits_type::eof())
        -: 1184:                __state |= ios_base::badbit;
        -: 1185:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1186:        }
        -: 1187:        catch (...)
        -: 1188:        {
        -: 1189:            __state |= ios_base::badbit;
        -: 1190:            this->__setstate_nothrow(__state);
        -: 1191:            if (this->exceptions() & ios_base::badbit)
        -: 1192:            {
        -: 1193:                throw;
        -: 1194:            }
        -: 1195:        }
        -: 1196:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1197:    }
        -: 1198:    else
        -: 1199:    {
        -: 1200:        __state |= ios_base::failbit;
        -: 1201:    }
        -: 1202:    this->setstate(__state);
        -: 1203:    return *this;
        -: 1204:}
        -: 1205:
        -: 1206:template<class _CharT, class _Traits>
        -: 1207:int
        -: 1208:basic_istream<_CharT, _Traits>::sync()
        -: 1209:{
        -: 1210:    ios_base::iostate __state = ios_base::goodbit;
        -: 1211:    int __r = 0;
        -: 1212:    sentry __sen(*this, true);
        -: 1213:    if (__sen)
        -: 1214:    {
        -: 1215:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1216:        try
        -: 1217:        {
        -: 1218:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1219:            if (this->rdbuf() == 0)
        -: 1220:                return -1;
        -: 1221:            if (this->rdbuf()->pubsync() == -1)
        -: 1222:            {
        -: 1223:                __state |= ios_base::badbit;
        -: 1224:                return -1;
        -: 1225:            }
        -: 1226:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1227:        }
        -: 1228:        catch (...)
        -: 1229:        {
        -: 1230:            __state |= ios_base::badbit;
        -: 1231:            this->__setstate_nothrow(__state);
        -: 1232:            if (this->exceptions() & ios_base::badbit)
        -: 1233:            {
        -: 1234:                throw;
        -: 1235:            }
        -: 1236:        }
        -: 1237:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1238:        this->setstate(__state);
        -: 1239:    }
        -: 1240:    return __r;
        -: 1241:}
        -: 1242:
        -: 1243:template<class _CharT, class _Traits>
        -: 1244:typename basic_istream<_CharT, _Traits>::pos_type
        -: 1245:basic_istream<_CharT, _Traits>::tellg()
        -: 1246:{
        -: 1247:    ios_base::iostate __state = ios_base::goodbit;
        -: 1248:    pos_type __r(-1);
        -: 1249:    sentry __sen(*this, true);
        -: 1250:    if (__sen)
        -: 1251:    {
        -: 1252:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1253:        try
        -: 1254:        {
        -: 1255:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1256:        __r = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in);
        -: 1257:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1258:        }
        -: 1259:        catch (...)
        -: 1260:        {
        -: 1261:            __state |= ios_base::badbit;
        -: 1262:            this->__setstate_nothrow(__state);
        -: 1263:            if (this->exceptions() & ios_base::badbit)
        -: 1264:            {
        -: 1265:                throw;
        -: 1266:            }
        -: 1267:        }
        -: 1268:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1269:        this->setstate(__state);
        -: 1270:    }
        -: 1271:    return __r;
        -: 1272:}
        -: 1273:
        -: 1274:template<class _CharT, class _Traits>
        -: 1275:basic_istream<_CharT, _Traits>&
        -: 1276:basic_istream<_CharT, _Traits>::seekg(pos_type __pos)
        -: 1277:{
        -: 1278:    ios_base::iostate __state = this->rdstate() & ~ios_base::eofbit;
        -: 1279:    this->clear(__state);
        -: 1280:    sentry __sen(*this, true);
        -: 1281:    if (__sen)
        -: 1282:    {
        -: 1283:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1284:        try
        -: 1285:        {
        -: 1286:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1287:            if (this->rdbuf()->pubseekpos(__pos, ios_base::in) == pos_type(-1))
        -: 1288:                __state |= ios_base::failbit;
        -: 1289:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1290:        }
        -: 1291:        catch (...)
        -: 1292:        {
        -: 1293:            __state |= ios_base::badbit;
        -: 1294:            this->__setstate_nothrow(__state);
        -: 1295:            if (this->exceptions() & ios_base::badbit)
        -: 1296:            {
        -: 1297:                throw;
        -: 1298:            }
        -: 1299:        }
        -: 1300:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1301:        this->setstate(__state);
        -: 1302:    }
        -: 1303:    return *this;
        -: 1304:}
        -: 1305:
        -: 1306:template<class _CharT, class _Traits>
        -: 1307:basic_istream<_CharT, _Traits>&
        -: 1308:basic_istream<_CharT, _Traits>::seekg(off_type __off, ios_base::seekdir __dir)
        -: 1309:{
        -: 1310:    ios_base::iostate __state = this->rdstate() & ~ios_base::eofbit;
        -: 1311:    this->clear(__state);
        -: 1312:    sentry __sen(*this, true);
        -: 1313:    if (__sen)
        -: 1314:    {
        -: 1315:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1316:        try
        -: 1317:        {
        -: 1318:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1319:            if (this->rdbuf()->pubseekoff(__off, __dir, ios_base::in) == pos_type(-1))
        -: 1320:                __state |= ios_base::failbit;
        -: 1321:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1322:        }
        -: 1323:        catch (...)
        -: 1324:        {
        -: 1325:            __state |= ios_base::badbit;
        -: 1326:            this->__setstate_nothrow(__state);
        -: 1327:            if (this->exceptions() & ios_base::badbit)
        -: 1328:            {
        -: 1329:                throw;
        -: 1330:            }
        -: 1331:        }
        -: 1332:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1333:        this->setstate(__state);
        -: 1334:    }
        -: 1335:    return *this;
        -: 1336:}
        -: 1337:
        -: 1338:template <class _CharT, class _Traits>
        -: 1339:basic_istream<_CharT, _Traits>&
        -: 1340:ws(basic_istream<_CharT, _Traits>& __is)
        -: 1341:{
        -: 1342:    ios_base::iostate __state = ios_base::goodbit;
        -: 1343:    typename basic_istream<_CharT, _Traits>::sentry __sen(__is, true);
        -: 1344:    if (__sen)
        -: 1345:    {
        -: 1346:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1347:        try
        -: 1348:        {
        -: 1349:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1350:            const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__is.getloc());
        -: 1351:            while (true)
        -: 1352:            {
        -: 1353:                typename _Traits::int_type __i = __is.rdbuf()->sgetc();
        -: 1354:                if (_Traits::eq_int_type(__i, _Traits::eof()))
        -: 1355:                {
        -: 1356:                   __state |= ios_base::eofbit;
        -: 1357:                   break;
        -: 1358:                }
        -: 1359:                if (!__ct.is(__ct.space, _Traits::to_char_type(__i)))
        -: 1360:                    break;
        -: 1361:                __is.rdbuf()->sbumpc();
        -: 1362:            }
        -: 1363:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1364:        }
        -: 1365:        catch (...)
        -: 1366:        {
        -: 1367:            __state |= ios_base::badbit;
        -: 1368:            __is.__setstate_nothrow(__state);
        -: 1369:            if (__is.exceptions() & ios_base::badbit)
        -: 1370:            {
        -: 1371:                throw;
        -: 1372:            }
        -: 1373:        }
        -: 1374:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1375:        __is.setstate(__state);
        -: 1376:    }
        -: 1377:    return __is;
        -: 1378:}
        -: 1379:
        -: 1380:#ifndef _LIBCPP_CXX03_LANG
        -: 1381:
        -: 1382:template <class _CharT, class _Traits, class _Tp>
        -: 1383:inline _LIBCPP_INLINE_VISIBILITY
        -: 1384:basic_istream<_CharT, _Traits>&
        -: 1385:operator>>(basic_istream<_CharT, _Traits>&& __is, _Tp&& __x)
        -: 1386:{
        -: 1387:    __is >> _VSTD::forward<_Tp>(__x);
        -: 1388:    return __is;
        -: 1389:}
        -: 1390:
        -: 1391:#endif  // _LIBCPP_CXX03_LANG
        -: 1392:
        -: 1393:template <class _CharT, class _Traits>
        -: 1394:class _LIBCPP_TEMPLATE_VIS basic_iostream
        -: 1395:    : public basic_istream<_CharT, _Traits>,
        -: 1396:      public basic_ostream<_CharT, _Traits>
        -: 1397:{
        -: 1398:public:
        -: 1399:    // types:
        -: 1400:    typedef _CharT                         char_type;
        -: 1401:    typedef _Traits                        traits_type;
        -: 1402:    typedef typename traits_type::int_type int_type;
        -: 1403:    typedef typename traits_type::pos_type pos_type;
        -: 1404:    typedef typename traits_type::off_type off_type;
        -: 1405:
        -: 1406:    // constructor/destructor
        -: 1407:    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1
        -: 1408:    explicit basic_iostream(basic_streambuf<char_type, traits_type>* __sb)
        -: 1409:      : basic_istream<_CharT, _Traits>(__sb)
        -: 1410:    {}
        -: 1411:
        -: 1412:    virtual ~basic_iostream();
        -: 1413:protected:
        -: 1414:#ifndef _LIBCPP_CXX03_LANG
        -: 1415:    inline _LIBCPP_INLINE_VISIBILITY
        -: 1416:    basic_iostream(basic_iostream&& __rhs);
        -: 1417:
        -: 1418:    // assign/swap
        -: 1419:    inline _LIBCPP_INLINE_VISIBILITY
        -: 1420:    basic_iostream& operator=(basic_iostream&& __rhs);
        -: 1421:#endif
        -: 1422:    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1
        -: 1423:    void swap(basic_iostream& __rhs)
        -: 1424:    { basic_istream<char_type, traits_type>::swap(__rhs); }
        -: 1425:public:
        -: 1426:};
        -: 1427:
        -: 1428:#ifndef _LIBCPP_CXX03_LANG
        -: 1429:
        -: 1430:template <class _CharT, class _Traits>
        -: 1431:basic_iostream<_CharT, _Traits>::basic_iostream(basic_iostream&& __rhs)
        -: 1432:    : basic_istream<_CharT, _Traits>(_VSTD::move(__rhs))
        -: 1433:{
        -: 1434:}
        -: 1435:
        -: 1436:template <class _CharT, class _Traits>
        -: 1437:basic_iostream<_CharT, _Traits>&
        -: 1438:basic_iostream<_CharT, _Traits>::operator=(basic_iostream&& __rhs)
        -: 1439:{
        -: 1440:    swap(__rhs);
        -: 1441:    return *this;
        -: 1442:}
        -: 1443:
        -: 1444:#endif  // _LIBCPP_CXX03_LANG
        -: 1445:
        -: 1446:template <class _CharT, class _Traits>
        -: 1447:basic_iostream<_CharT, _Traits>::~basic_iostream()
        -: 1448:{
        -: 1449:}
        -: 1450:
        -: 1451:template<class _CharT, class _Traits, class _Allocator>
        -: 1452:basic_istream<_CharT, _Traits>&
    #####: 1453:operator>>(basic_istream<_CharT, _Traits>& __is,
    $$$$$: 1453-block  0
        -: 1454:           basic_string<_CharT, _Traits, _Allocator>& __str)
        -: 1455:{
    #####: 1456:    ios_base::iostate __state = ios_base::goodbit;
    #####: 1457:    typename basic_istream<_CharT, _Traits>::sentry __sen(__is);
    #####: 1458:    if (__sen)
    $$$$$: 1458-block  0
        -: 1459:    {
        -: 1460:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1461:        try
        -: 1462:        {
        -: 1463:#endif
    #####: 1464:            __str.clear();
    #####: 1465:            streamsize __n = __is.width();
    $$$$$: 1465-block  0
    #####: 1466:            if (__n <= 0)
    $$$$$: 1466-block  0
    #####: 1467:                __n = __str.max_size();
    $$$$$: 1467-block  0
    #####: 1468:            if (__n <= 0)
    $$$$$: 1468-block  0
    #####: 1469:                __n = numeric_limits<streamsize>::max();
    $$$$$: 1469-block  0
    #####: 1470:            streamsize __c = 0;
    #####: 1471:            const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__is.getloc());
    $$$$$: 1471-block  0
    $$$$$: 1471-block  1
    $$$$$: 1471-block  2
    #####: 1472:            while (__c < __n)
    $$$$$: 1472-block  0
    $$$$$: 1472-block  1
    $$$$$: 1472-block  2
        -: 1473:            {
    #####: 1474:                typename _Traits::int_type __i = __is.rdbuf()->sgetc();
    $$$$$: 1474-block  0
    $$$$$: 1474-block  1
    #####: 1475:                if (_Traits::eq_int_type(__i, _Traits::eof()))
    $$$$$: 1475-block  0
        -: 1476:                {
    #####: 1477:                   __state |= ios_base::eofbit;
    #####: 1478:                   break;
    $$$$$: 1478-block  0
        -: 1479:                }
    #####: 1480:                _CharT __ch = _Traits::to_char_type(__i);
    #####: 1481:                if (__ct.is(__ct.space, __ch))
    $$$$$: 1481-block  0
    $$$$$: 1481-block  1
    #####: 1482:                    break;
    $$$$$: 1482-block  0
    #####: 1483:                __str.push_back(__ch);
    $$$$$: 1483-block  0
    #####: 1484:                ++__c;
    #####: 1485:                 __is.rdbuf()->sbumpc();
    $$$$$: 1485-block  0
    $$$$$: 1485-block  1
        -: 1486:            }
    #####: 1487:            __is.width(0);
    $$$$$: 1487-block  0
    #####: 1488:            if (__c == 0)
    $$$$$: 1488-block  0
    #####: 1489:               __state |= ios_base::failbit;
    $$$$$: 1489-block  0
        -: 1490:#ifndef _LIBCPP_NO_EXCEPTIONS
    #####: 1491:        }
    $$$$$: 1491-block  0
        -: 1492:        catch (...)
        -: 1493:        {
    #####: 1494:            __state |= ios_base::badbit;
    #####: 1495:            __is.__setstate_nothrow(__state);
    $$$$$: 1495-block  0
    #####: 1496:            if (__is.exceptions() & ios_base::badbit)
    $$$$$: 1496-block  0
    $$$$$: 1496-block  1
        -: 1497:            {
    #####: 1498:                throw;
    $$$$$: 1498-block  0
        -: 1499:            }
    #####: 1500:        }
    $$$$$: 1500-block  0
    $$$$$: 1500-block  1
    $$$$$: 1500-block  2
    $$$$$: 1500-block  3
    $$$$$: 1500-block  4
        -: 1501:#endif
    #####: 1502:        __is.setstate(__state);
    #####: 1503:    }
    $$$$$: 1503-block  0
    #####: 1504:    return __is;
    $$$$$: 1504-block  0
    #####: 1505:}
    $$$$$: 1505-block  0
        -: 1506:
        -: 1507:template<class _CharT, class _Traits, class _Allocator>
        -: 1508:basic_istream<_CharT, _Traits>&
    #####: 1509:getline(basic_istream<_CharT, _Traits>& __is,
    $$$$$: 1509-block  0
        -: 1510:        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm)
        -: 1511:{
    #####: 1512:    ios_base::iostate __state = ios_base::goodbit;
    #####: 1513:    typename basic_istream<_CharT, _Traits>::sentry __sen(__is, true);
    #####: 1514:    if (__sen)
    $$$$$: 1514-block  0
        -: 1515:    {
        -: 1516:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1517:        try
        -: 1518:        {
        -: 1519:#endif
    #####: 1520:            __str.clear();
    #####: 1521:            streamsize __extr = 0;
    #####: 1522:            while (true)
    $$$$$: 1522-block  0
    $$$$$: 1522-block  1
    $$$$$: 1522-block  2
        -: 1523:            {
    #####: 1524:                typename _Traits::int_type __i = __is.rdbuf()->sbumpc();
    $$$$$: 1524-block  0
    $$$$$: 1524-block  1
    #####: 1525:                if (_Traits::eq_int_type(__i, _Traits::eof()))
    $$$$$: 1525-block  0
        -: 1526:                {
    #####: 1527:                   __state |= ios_base::eofbit;
    #####: 1528:                   break;
    $$$$$: 1528-block  0
        -: 1529:                }
    #####: 1530:                ++__extr;
    #####: 1531:                _CharT __ch = _Traits::to_char_type(__i);
    #####: 1532:                if (_Traits::eq(__ch, __dlm))
    $$$$$: 1532-block  0
    #####: 1533:                    break;
    $$$$$: 1533-block  0
    #####: 1534:                __str.push_back(__ch);
    $$$$$: 1534-block  0
    #####: 1535:                if (__str.size() == __str.max_size())
    $$$$$: 1535-block  0
        -: 1536:                {
    #####: 1537:                    __state |= ios_base::failbit;
    #####: 1538:                    break;
    $$$$$: 1538-block  0
        -: 1539:                }
        -: 1540:            }
    #####: 1541:            if (__extr == 0)
    $$$$$: 1541-block  0
    #####: 1542:               __state |= ios_base::failbit;
    $$$$$: 1542-block  0
        -: 1543:#ifndef _LIBCPP_NO_EXCEPTIONS
    #####: 1544:        }
    $$$$$: 1544-block  0
        -: 1545:        catch (...)
        -: 1546:        {
    #####: 1547:            __state |= ios_base::badbit;
    #####: 1548:            __is.__setstate_nothrow(__state);
    $$$$$: 1548-block  0
    #####: 1549:            if (__is.exceptions() & ios_base::badbit)
    $$$$$: 1549-block  0
    $$$$$: 1549-block  1
        -: 1550:            {
    #####: 1551:                throw;
    $$$$$: 1551-block  0
        -: 1552:            }
    #####: 1553:        }
    $$$$$: 1553-block  0
    $$$$$: 1553-block  1
    $$$$$: 1553-block  2
    $$$$$: 1553-block  3
    $$$$$: 1553-block  4
        -: 1554:#endif
    #####: 1555:        __is.setstate(__state);
    #####: 1556:    }
    $$$$$: 1556-block  0
    #####: 1557:    return __is;
    $$$$$: 1557-block  0
    #####: 1558:}
    $$$$$: 1558-block  0
        -: 1559:
        -: 1560:template<class _CharT, class _Traits, class _Allocator>
        -: 1561:inline _LIBCPP_INLINE_VISIBILITY
        -: 1562:basic_istream<_CharT, _Traits>&
    #####: 1563:getline(basic_istream<_CharT, _Traits>& __is,
    $$$$$: 1563-block  0
        -: 1564:        basic_string<_CharT, _Traits, _Allocator>& __str)
        -: 1565:{
    #####: 1566:    return getline(__is, __str, __is.widen('\n'));
    $$$$$: 1566-block  0
        -: 1567:}
        -: 1568:
        -: 1569:#ifndef _LIBCPP_CXX03_LANG
        -: 1570:
        -: 1571:template<class _CharT, class _Traits, class _Allocator>
        -: 1572:inline _LIBCPP_INLINE_VISIBILITY
        -: 1573:basic_istream<_CharT, _Traits>&
        -: 1574:getline(basic_istream<_CharT, _Traits>&& __is,
        -: 1575:        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm)
        -: 1576:{
        -: 1577:    return getline(__is, __str, __dlm);
        -: 1578:}
        -: 1579:
        -: 1580:template<class _CharT, class _Traits, class _Allocator>
        -: 1581:inline _LIBCPP_INLINE_VISIBILITY
        -: 1582:basic_istream<_CharT, _Traits>&
        -: 1583:getline(basic_istream<_CharT, _Traits>&& __is,
        -: 1584:        basic_string<_CharT, _Traits, _Allocator>& __str)
        -: 1585:{
        -: 1586:    return getline(__is, __str, __is.widen('\n'));
        -: 1587:}
        -: 1588:
        -: 1589:#endif  // _LIBCPP_CXX03_LANG
        -: 1590:
        -: 1591:template <class _CharT, class _Traits, size_t _Size>
        -: 1592:basic_istream<_CharT, _Traits>&
        -: 1593:operator>>(basic_istream<_CharT, _Traits>& __is, bitset<_Size>& __x)
        -: 1594:{
        -: 1595:    ios_base::iostate __state = ios_base::goodbit;
        -: 1596:    typename basic_istream<_CharT, _Traits>::sentry __sen(__is);
        -: 1597:    if (__sen)
        -: 1598:    {
        -: 1599:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1600:        try
        -: 1601:        {
        -: 1602:#endif
        -: 1603:            basic_string<_CharT, _Traits> __str;
        -: 1604:            const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__is.getloc());
        -: 1605:            size_t __c = 0;
        -: 1606:            _CharT __zero = __ct.widen('0');
        -: 1607:            _CharT __one = __ct.widen('1');
        -: 1608:            while (__c < _Size)
        -: 1609:            {
        -: 1610:                typename _Traits::int_type __i = __is.rdbuf()->sgetc();
        -: 1611:                if (_Traits::eq_int_type(__i, _Traits::eof()))
        -: 1612:                {
        -: 1613:                   __state |= ios_base::eofbit;
        -: 1614:                   break;
        -: 1615:                }
        -: 1616:                _CharT __ch = _Traits::to_char_type(__i);
        -: 1617:                if (!_Traits::eq(__ch, __zero) && !_Traits::eq(__ch, __one))
        -: 1618:                    break;
        -: 1619:                __str.push_back(__ch);
        -: 1620:                ++__c;
        -: 1621:                 __is.rdbuf()->sbumpc();
        -: 1622:            }
        -: 1623:            __x = bitset<_Size>(__str);
        -: 1624:            if (__c == 0)
        -: 1625:               __state |= ios_base::failbit;
        -: 1626:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1627:        }
        -: 1628:        catch (...)
        -: 1629:        {
        -: 1630:            __state |= ios_base::badbit;
        -: 1631:            __is.__setstate_nothrow(__state);
        -: 1632:            if (__is.exceptions() & ios_base::badbit)
        -: 1633:            {
        -: 1634:                throw;
        -: 1635:            }
        -: 1636:        }
        -: 1637:#endif
        -: 1638:        __is.setstate(__state);
        -: 1639:    }
        -: 1640:    return __is;
        -: 1641:}
        -: 1642:
        -: 1643:#ifndef _LIBCPP_DO_NOT_ASSUME_STREAMS_EXPLICIT_INSTANTIATION_IN_DYLIB
        -: 1644:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_istream<char>)
        -: 1645:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_istream<wchar_t>)
        -: 1646:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_iostream<char>)
        -: 1647:#endif
        -: 1648:
        -: 1649:_LIBCPP_END_NAMESPACE_STD
        -: 1650:
        -: 1651:_LIBCPP_POP_MACROS
        -: 1652:
        -: 1653:#endif  // _LIBCPP_ISTREAM
