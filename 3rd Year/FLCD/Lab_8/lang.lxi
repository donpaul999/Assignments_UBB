%{
#include <stdio.h>
#include <string.h>
int lines = 0;
%}

%option noyywrap
%option caseless

WORD		\'[0-9a-zA-Z]+\'
NUMBER		[+-]?[0-9]*|0$
CONST		{WORD}|{NUMBER}
ID 		[a-zA-Z][a-zA-Z0-9]*


%%

START {printf("Reserved word: %s\n", yytext);}
END	{printf( "Reserved word: %s\n", yytext);}
array_numbers	{printf( "Reserved word: %s\n", yytext);}
bigger_than	{printf( "Reserved word: %s\n", yytext);}
equals	{printf( "Reserved word: %s\n", yytext);}
for	{printf( "Reserved word: %s\n", yytext);}
greater_or_equal	{printf( "Reserved word: %s\n", yytext);}
if	{printf( "Reserved word: %s\n", yytext);}
let	{printf( "Reserved word: %s\n", yytext);}
not_equals	{printf( "Reserved word: %s\n", yytext);}
number	{printf( "Reserved word: %s\n", yytext);}
or	{printf( "Reserved word: %s\n", yytext);;}
print	{printf( "Reserved word: %s\n", yytext);}
read	{printf( "Reserved word: %s\n", yytext);}
smaller_or_equal	{printf( "Reserved word: %s\n", yytext);}
smaller_than	{printf( "Reserved word: %s\n", yytext);}
string	{printf( "Reserved word: %s\n", yytext);}
while	{printf( "Reserved word: %s\n", yytext);}

"{"	{printf( "Separator: %s\n", yytext );}
"}"	{printf( "Separator: %s\n", yytext );}
"("	{printf( "Separator: %s\n", yytext );}
")"	{printf( "Separator: %s\n", yytext );}
"["	{printf( "Separator: %s\n", yytext );}
"]"	{printf( "Separator: %s\n", yytext );}
"+"	{printf( "Operator: %s\n", yytext );}
"-"	{printf( "Operator: %s\n", yytext );}
"*"	{printf( "Operator: %s\n", yytext );}
"/"	{printf( "Operator: %s\n", yytext );}
"="	{printf( "Separator: %s\n", yytext );}
"%"	{printf( "Operator: %s\n", yytext );}
"$"	{printf( "Operator: %s\n", yytext );}
";"	{printf( "Operator: %s\n", yytext );}
","	{printf( "Operator: %s\n", yytext );}
"'"	{printf( "Operator: %s\n", yytext );}


{ID}	{printf( "Identifier: %s\n", yytext);}

{CONST}	{printf( "Constant: %s\n", yytext );}


[ \t]+  	{}
[\n]+ {lines++;}

.	{printf("Illegal symbol %s at line %d\n", yytext, lines); return -1;}
%%
